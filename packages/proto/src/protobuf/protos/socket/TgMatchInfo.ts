// @generated by protobuf-ts 2.5.0
// @generated from protobuf file "protobuf/protos/socket/TgMatchInfo.proto" (package "socketProtos.TgMatchInfo", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Command } from "./Socket";
/**
 * @generated from protobuf message socketProtos.TgMatchInfo.TgMatchUpdate
 */
export interface TgMatchUpdate {
    /**
     * @generated from protobuf field: socketProtos.command.Command command = 1;
     */
    command: Command;
    /**
     * @generated from protobuf field: repeated socketProtos.TgMatchInfo.TgMatchInfo data = 2;
     */
    data: TgMatchInfo[];
}
/**
 * @generated from protobuf message socketProtos.TgMatchInfo.TgRecentMatches
 */
export interface TgRecentMatches {
    /**
     * @generated from protobuf field: socketProtos.command.Command command = 1;
     */
    command: Command;
    /**
     * @generated from protobuf field: repeated socketProtos.TgMatchInfo.TgMatchDetail data = 2;
     */
    data: TgMatchDetail[];
}
/**
 * @generated from protobuf message socketProtos.TgMatchInfo.TgMatchInfo
 */
export interface TgMatchInfo {
    /**
     * @generated from protobuf field: int32 matchId = 1;
     */
    matchId: number; // 賽事id
    /**
     * @generated from protobuf field: int32 tgStatus = 2;
     */
    tgStatus: number; // TG賽事是否開啟 0未開啟 1開啟
    /**
     * @generated from protobuf field: int32 openDate = 3;
     */
    openDate: number; // 開賽時間(timestamp)
    /**
     * @generated from protobuf field: int32 betsCount = 4;
     */
    betsCount: number; // 總下注量
    /**
     * @generated from protobuf field: repeated socketProtos.TgMatchInfo.BetDetail betDetail = 5;
     */
    betDetail: BetDetail[];
}
/**
 * @generated from protobuf message socketProtos.TgMatchInfo.TgOddInfo
 */
export interface TgOddInfo {
    /**
     * @generated from protobuf field: socketProtos.command.Command command = 1;
     */
    command: Command;
    /**
     * @generated from protobuf field: int32 matchId = 2;
     */
    matchId: number; // 賽事id
    /**
     * @generated from protobuf field: socketProtos.TgMatchInfo.TgOddMarket correctScore = 3;
     */
    correctScore?: TgOddMarket; // 波胆
    /**
     * @generated from protobuf field: socketProtos.TgMatchInfo.TgOddMarket halfTimeScore = 4;
     */
    halfTimeScore?: TgOddMarket; // 上半场波胆
    /**
     * @generated from protobuf field: socketProtos.TgMatchInfo.TgOddMarket totalGoals = 5;
     */
    totalGoals?: TgOddMarket; // 总得分
}
/**
 * @generated from protobuf message socketProtos.TgMatchInfo.TgMatchDetail
 */
export interface TgMatchDetail {
    /**
     * @generated from protobuf field: int32 matchId = 1;
     */
    matchId: number; // 賽事id
    /**
     * @generated from protobuf field: int32 status = 2;
     */
    status: number; // 賽事狀態
    /**
     * @generated from protobuf field: int32 tgStatus = 3;
     */
    tgStatus: number; // TG賽事是否開啟 0未開啟 1開啟
    /**
     * @generated from protobuf field: int32 homeId = 4;
     */
    homeId: number; // 主隊ID
    /**
     * @generated from protobuf field: int32 awayId = 5;
     */
    awayId: number; // 客隊ID
    /**
     * @generated from protobuf field: string home = 6;
     */
    home: string; // 主隊名稱
    /**
     * @generated from protobuf field: string away = 7;
     */
    away: string; // 客隊名稱
    /**
     * @generated from protobuf field: string homeLogo = 8;
     */
    homeLogo: string; // 主隊LOGO
    /**
     * @generated from protobuf field: string awayLogo = 9;
     */
    awayLogo: string; // 客隊LOGO
    /**
     * @generated from protobuf field: int32 leagueId = 10;
     */
    leagueId: number; // 聯盟ID
    /**
     * @generated from protobuf field: string league = 11;
     */
    league: string; // 聯盟名稱
    /**
     * @generated from protobuf field: string leagueShortNameEn = 12;
     */
    leagueShortNameEn: string; // 聯盟簡稱
    /**
     * @generated from protobuf field: string leagueLogo = 13;
     */
    leagueLogo: string; // 聯盟LOGO
    /**
     * @generated from protobuf field: int32 openDate = 14;
     */
    openDate: number; // 開賽時間(timestamp)
    /**
     * @generated from protobuf field: int32 betsCount = 15;
     */
    betsCount: number; // 總下注量
    /**
     * @generated from protobuf field: int32 views = 16;
     */
    views: number; // 人氣數
    /**
     * @generated from protobuf field: int32 neutral = 17;
     */
    neutral: number; // 是否為中立場
    /**
     * @generated from protobuf field: string maxScore = 18;
     */
    maxScore: string; // 最大出現率名稱
    /**
     * @generated from protobuf field: string maxValue = 19;
     */
    maxValue: string; // 最大出現率%
    /**
     * @generated from protobuf field: string minScore = 20;
     */
    minScore: string; // 最小出現率名稱
    /**
     * @generated from protobuf field: string minValue = 21;
     */
    minValue: string; // 最小出現率%
    /**
     * @generated from protobuf field: bool recentFourHours = 22;
     */
    recentFourHours: boolean; // 是否為4小內賽事
    /**
     * @generated from protobuf field: bool recentEightHours = 23;
     */
    recentEightHours: boolean; // 是否為8小內賽事
    /**
     * @generated from protobuf field: bool recentTwelveHours = 24;
     */
    recentTwelveHours: boolean; // 是否為12小內賽事
}
/**
 * @generated from protobuf message socketProtos.TgMatchInfo.BetDetail
 */
export interface BetDetail {
    /**
     * @generated from protobuf field: int32 marketType = 1;
     */
    marketType: number; // 1波膽 2半場波膽 3總入球
    /**
     * @generated from protobuf field: string selectionName = 2;
     */
    selectionName: string; // 選項名稱
    /**
     * @generated from protobuf field: string transaction = 3;
     */
    transaction: string; // 可交易量
    /**
     * @generated from protobuf field: string profit = 4;
     */
    profit: string; // 獲利率
    /**
     * @generated from protobuf field: string betMoney = 5;
     */
    betMoney: string; // 累積金額
    /**
     * @generated from protobuf field: int32 isPopular = 6;
     */
    isPopular: number; // 是否熱銷
    /**
     * @generated from protobuf field: int32 isSoldOut = 7;
     */
    isSoldOut: number; // 是否完售
}
/**
 * @generated from protobuf message socketProtos.TgMatchInfo.TgOddMarket
 */
export interface TgOddMarket {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string; // 市場名稱
    /**
     * @generated from protobuf field: repeated socketProtos.TgMatchInfo.TgOddMarketSelection selections = 2;
     */
    selections: TgOddMarketSelection[]; // 市場選項明細
}
/**
 * @generated from protobuf message socketProtos.TgMatchInfo.TgOddMarketSelection
 */
export interface TgOddMarketSelection {
    /**
     * @generated from protobuf field: string selectionName = 1;
     */
    selectionName: string; // 選項名稱
    /**
     * @generated from protobuf field: string odd = 2;
     */
    odd: string; // 獲利率
    /**
     * @generated from protobuf field: string transaction = 3;
     */
    transaction: string; // 可交易量
    /**
     * @generated from protobuf field: string betMoney = 4;
     */
    betMoney: string; // 累積金額
}
// @generated message type with reflection information, may provide speed optimized methods
class TgMatchUpdate$Type extends MessageType<TgMatchUpdate> {
    constructor() {
        super("socketProtos.TgMatchInfo.TgMatchUpdate", [
            { no: 1, name: "command", kind: "enum", T: () => ["socketProtos.command.Command", Command] },
            { no: 2, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TgMatchInfo }
        ]);
    }
    create(value?: PartialMessage<TgMatchUpdate>): TgMatchUpdate {
        const message = { command: 0, data: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TgMatchUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TgMatchUpdate): TgMatchUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* socketProtos.command.Command command */ 1:
                    message.command = reader.int32();
                    break;
                case /* repeated socketProtos.TgMatchInfo.TgMatchInfo data */ 2:
                    message.data.push(TgMatchInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TgMatchUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* socketProtos.command.Command command = 1; */
        if (message.command !== 0)
            writer.tag(1, WireType.Varint).int32(message.command);
        /* repeated socketProtos.TgMatchInfo.TgMatchInfo data = 2; */
        for (let i = 0; i < message.data.length; i++)
            TgMatchInfo.internalBinaryWrite(message.data[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.TgMatchInfo.TgMatchUpdate
 */
export const TgMatchUpdate = new TgMatchUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TgRecentMatches$Type extends MessageType<TgRecentMatches> {
    constructor() {
        super("socketProtos.TgMatchInfo.TgRecentMatches", [
            { no: 1, name: "command", kind: "enum", T: () => ["socketProtos.command.Command", Command] },
            { no: 2, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TgMatchDetail }
        ]);
    }
    create(value?: PartialMessage<TgRecentMatches>): TgRecentMatches {
        const message = { command: 0, data: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TgRecentMatches>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TgRecentMatches): TgRecentMatches {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* socketProtos.command.Command command */ 1:
                    message.command = reader.int32();
                    break;
                case /* repeated socketProtos.TgMatchInfo.TgMatchDetail data */ 2:
                    message.data.push(TgMatchDetail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TgRecentMatches, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* socketProtos.command.Command command = 1; */
        if (message.command !== 0)
            writer.tag(1, WireType.Varint).int32(message.command);
        /* repeated socketProtos.TgMatchInfo.TgMatchDetail data = 2; */
        for (let i = 0; i < message.data.length; i++)
            TgMatchDetail.internalBinaryWrite(message.data[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.TgMatchInfo.TgRecentMatches
 */
export const TgRecentMatches = new TgRecentMatches$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TgMatchInfo$Type extends MessageType<TgMatchInfo> {
    constructor() {
        super("socketProtos.TgMatchInfo.TgMatchInfo", [
            { no: 1, name: "matchId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "tgStatus", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "openDate", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "betsCount", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "betDetail", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BetDetail }
        ]);
    }
    create(value?: PartialMessage<TgMatchInfo>): TgMatchInfo {
        const message = { matchId: 0, tgStatus: 0, openDate: 0, betsCount: 0, betDetail: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TgMatchInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TgMatchInfo): TgMatchInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 matchId */ 1:
                    message.matchId = reader.int32();
                    break;
                case /* int32 tgStatus */ 2:
                    message.tgStatus = reader.int32();
                    break;
                case /* int32 openDate */ 3:
                    message.openDate = reader.int32();
                    break;
                case /* int32 betsCount */ 4:
                    message.betsCount = reader.int32();
                    break;
                case /* repeated socketProtos.TgMatchInfo.BetDetail betDetail */ 5:
                    message.betDetail.push(BetDetail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TgMatchInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 matchId = 1; */
        if (message.matchId !== 0)
            writer.tag(1, WireType.Varint).int32(message.matchId);
        /* int32 tgStatus = 2; */
        if (message.tgStatus !== 0)
            writer.tag(2, WireType.Varint).int32(message.tgStatus);
        /* int32 openDate = 3; */
        if (message.openDate !== 0)
            writer.tag(3, WireType.Varint).int32(message.openDate);
        /* int32 betsCount = 4; */
        if (message.betsCount !== 0)
            writer.tag(4, WireType.Varint).int32(message.betsCount);
        /* repeated socketProtos.TgMatchInfo.BetDetail betDetail = 5; */
        for (let i = 0; i < message.betDetail.length; i++)
            BetDetail.internalBinaryWrite(message.betDetail[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.TgMatchInfo.TgMatchInfo
 */
export const TgMatchInfo = new TgMatchInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TgOddInfo$Type extends MessageType<TgOddInfo> {
    constructor() {
        super("socketProtos.TgMatchInfo.TgOddInfo", [
            { no: 1, name: "command", kind: "enum", T: () => ["socketProtos.command.Command", Command] },
            { no: 2, name: "matchId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "correctScore", kind: "message", T: () => TgOddMarket },
            { no: 4, name: "halfTimeScore", kind: "message", T: () => TgOddMarket },
            { no: 5, name: "totalGoals", kind: "message", T: () => TgOddMarket }
        ]);
    }
    create(value?: PartialMessage<TgOddInfo>): TgOddInfo {
        const message = { command: 0, matchId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TgOddInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TgOddInfo): TgOddInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* socketProtos.command.Command command */ 1:
                    message.command = reader.int32();
                    break;
                case /* int32 matchId */ 2:
                    message.matchId = reader.int32();
                    break;
                case /* socketProtos.TgMatchInfo.TgOddMarket correctScore */ 3:
                    message.correctScore = TgOddMarket.internalBinaryRead(reader, reader.uint32(), options, message.correctScore);
                    break;
                case /* socketProtos.TgMatchInfo.TgOddMarket halfTimeScore */ 4:
                    message.halfTimeScore = TgOddMarket.internalBinaryRead(reader, reader.uint32(), options, message.halfTimeScore);
                    break;
                case /* socketProtos.TgMatchInfo.TgOddMarket totalGoals */ 5:
                    message.totalGoals = TgOddMarket.internalBinaryRead(reader, reader.uint32(), options, message.totalGoals);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TgOddInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* socketProtos.command.Command command = 1; */
        if (message.command !== 0)
            writer.tag(1, WireType.Varint).int32(message.command);
        /* int32 matchId = 2; */
        if (message.matchId !== 0)
            writer.tag(2, WireType.Varint).int32(message.matchId);
        /* socketProtos.TgMatchInfo.TgOddMarket correctScore = 3; */
        if (message.correctScore)
            TgOddMarket.internalBinaryWrite(message.correctScore, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* socketProtos.TgMatchInfo.TgOddMarket halfTimeScore = 4; */
        if (message.halfTimeScore)
            TgOddMarket.internalBinaryWrite(message.halfTimeScore, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* socketProtos.TgMatchInfo.TgOddMarket totalGoals = 5; */
        if (message.totalGoals)
            TgOddMarket.internalBinaryWrite(message.totalGoals, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.TgMatchInfo.TgOddInfo
 */
export const TgOddInfo = new TgOddInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TgMatchDetail$Type extends MessageType<TgMatchDetail> {
    constructor() {
        super("socketProtos.TgMatchInfo.TgMatchDetail", [
            { no: 1, name: "matchId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "tgStatus", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "homeId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "awayId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "home", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "away", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "homeLogo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "awayLogo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "leagueId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "league", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "leagueShortNameEn", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "leagueLogo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "openDate", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "betsCount", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 16, name: "views", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 17, name: "neutral", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 18, name: "maxScore", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "maxValue", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "minScore", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "minValue", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 22, name: "recentFourHours", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 23, name: "recentEightHours", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 24, name: "recentTwelveHours", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<TgMatchDetail>): TgMatchDetail {
        const message = { matchId: 0, status: 0, tgStatus: 0, homeId: 0, awayId: 0, home: "", away: "", homeLogo: "", awayLogo: "", leagueId: 0, league: "", leagueShortNameEn: "", leagueLogo: "", openDate: 0, betsCount: 0, views: 0, neutral: 0, maxScore: "", maxValue: "", minScore: "", minValue: "", recentFourHours: false, recentEightHours: false, recentTwelveHours: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TgMatchDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TgMatchDetail): TgMatchDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 matchId */ 1:
                    message.matchId = reader.int32();
                    break;
                case /* int32 status */ 2:
                    message.status = reader.int32();
                    break;
                case /* int32 tgStatus */ 3:
                    message.tgStatus = reader.int32();
                    break;
                case /* int32 homeId */ 4:
                    message.homeId = reader.int32();
                    break;
                case /* int32 awayId */ 5:
                    message.awayId = reader.int32();
                    break;
                case /* string home */ 6:
                    message.home = reader.string();
                    break;
                case /* string away */ 7:
                    message.away = reader.string();
                    break;
                case /* string homeLogo */ 8:
                    message.homeLogo = reader.string();
                    break;
                case /* string awayLogo */ 9:
                    message.awayLogo = reader.string();
                    break;
                case /* int32 leagueId */ 10:
                    message.leagueId = reader.int32();
                    break;
                case /* string league */ 11:
                    message.league = reader.string();
                    break;
                case /* string leagueShortNameEn */ 12:
                    message.leagueShortNameEn = reader.string();
                    break;
                case /* string leagueLogo */ 13:
                    message.leagueLogo = reader.string();
                    break;
                case /* int32 openDate */ 14:
                    message.openDate = reader.int32();
                    break;
                case /* int32 betsCount */ 15:
                    message.betsCount = reader.int32();
                    break;
                case /* int32 views */ 16:
                    message.views = reader.int32();
                    break;
                case /* int32 neutral */ 17:
                    message.neutral = reader.int32();
                    break;
                case /* string maxScore */ 18:
                    message.maxScore = reader.string();
                    break;
                case /* string maxValue */ 19:
                    message.maxValue = reader.string();
                    break;
                case /* string minScore */ 20:
                    message.minScore = reader.string();
                    break;
                case /* string minValue */ 21:
                    message.minValue = reader.string();
                    break;
                case /* bool recentFourHours */ 22:
                    message.recentFourHours = reader.bool();
                    break;
                case /* bool recentEightHours */ 23:
                    message.recentEightHours = reader.bool();
                    break;
                case /* bool recentTwelveHours */ 24:
                    message.recentTwelveHours = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TgMatchDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 matchId = 1; */
        if (message.matchId !== 0)
            writer.tag(1, WireType.Varint).int32(message.matchId);
        /* int32 status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        /* int32 tgStatus = 3; */
        if (message.tgStatus !== 0)
            writer.tag(3, WireType.Varint).int32(message.tgStatus);
        /* int32 homeId = 4; */
        if (message.homeId !== 0)
            writer.tag(4, WireType.Varint).int32(message.homeId);
        /* int32 awayId = 5; */
        if (message.awayId !== 0)
            writer.tag(5, WireType.Varint).int32(message.awayId);
        /* string home = 6; */
        if (message.home !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.home);
        /* string away = 7; */
        if (message.away !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.away);
        /* string homeLogo = 8; */
        if (message.homeLogo !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.homeLogo);
        /* string awayLogo = 9; */
        if (message.awayLogo !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.awayLogo);
        /* int32 leagueId = 10; */
        if (message.leagueId !== 0)
            writer.tag(10, WireType.Varint).int32(message.leagueId);
        /* string league = 11; */
        if (message.league !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.league);
        /* string leagueShortNameEn = 12; */
        if (message.leagueShortNameEn !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.leagueShortNameEn);
        /* string leagueLogo = 13; */
        if (message.leagueLogo !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.leagueLogo);
        /* int32 openDate = 14; */
        if (message.openDate !== 0)
            writer.tag(14, WireType.Varint).int32(message.openDate);
        /* int32 betsCount = 15; */
        if (message.betsCount !== 0)
            writer.tag(15, WireType.Varint).int32(message.betsCount);
        /* int32 views = 16; */
        if (message.views !== 0)
            writer.tag(16, WireType.Varint).int32(message.views);
        /* int32 neutral = 17; */
        if (message.neutral !== 0)
            writer.tag(17, WireType.Varint).int32(message.neutral);
        /* string maxScore = 18; */
        if (message.maxScore !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.maxScore);
        /* string maxValue = 19; */
        if (message.maxValue !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.maxValue);
        /* string minScore = 20; */
        if (message.minScore !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.minScore);
        /* string minValue = 21; */
        if (message.minValue !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.minValue);
        /* bool recentFourHours = 22; */
        if (message.recentFourHours !== false)
            writer.tag(22, WireType.Varint).bool(message.recentFourHours);
        /* bool recentEightHours = 23; */
        if (message.recentEightHours !== false)
            writer.tag(23, WireType.Varint).bool(message.recentEightHours);
        /* bool recentTwelveHours = 24; */
        if (message.recentTwelveHours !== false)
            writer.tag(24, WireType.Varint).bool(message.recentTwelveHours);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.TgMatchInfo.TgMatchDetail
 */
export const TgMatchDetail = new TgMatchDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BetDetail$Type extends MessageType<BetDetail> {
    constructor() {
        super("socketProtos.TgMatchInfo.BetDetail", [
            { no: 1, name: "marketType", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "selectionName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "transaction", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "profit", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "betMoney", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "isPopular", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "isSoldOut", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<BetDetail>): BetDetail {
        const message = { marketType: 0, selectionName: "", transaction: "", profit: "", betMoney: "", isPopular: 0, isSoldOut: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BetDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BetDetail): BetDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 marketType */ 1:
                    message.marketType = reader.int32();
                    break;
                case /* string selectionName */ 2:
                    message.selectionName = reader.string();
                    break;
                case /* string transaction */ 3:
                    message.transaction = reader.string();
                    break;
                case /* string profit */ 4:
                    message.profit = reader.string();
                    break;
                case /* string betMoney */ 5:
                    message.betMoney = reader.string();
                    break;
                case /* int32 isPopular */ 6:
                    message.isPopular = reader.int32();
                    break;
                case /* int32 isSoldOut */ 7:
                    message.isSoldOut = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BetDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 marketType = 1; */
        if (message.marketType !== 0)
            writer.tag(1, WireType.Varint).int32(message.marketType);
        /* string selectionName = 2; */
        if (message.selectionName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.selectionName);
        /* string transaction = 3; */
        if (message.transaction !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.transaction);
        /* string profit = 4; */
        if (message.profit !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.profit);
        /* string betMoney = 5; */
        if (message.betMoney !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.betMoney);
        /* int32 isPopular = 6; */
        if (message.isPopular !== 0)
            writer.tag(6, WireType.Varint).int32(message.isPopular);
        /* int32 isSoldOut = 7; */
        if (message.isSoldOut !== 0)
            writer.tag(7, WireType.Varint).int32(message.isSoldOut);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.TgMatchInfo.BetDetail
 */
export const BetDetail = new BetDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TgOddMarket$Type extends MessageType<TgOddMarket> {
    constructor() {
        super("socketProtos.TgMatchInfo.TgOddMarket", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "selections", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TgOddMarketSelection }
        ]);
    }
    create(value?: PartialMessage<TgOddMarket>): TgOddMarket {
        const message = { name: "", selections: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TgOddMarket>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TgOddMarket): TgOddMarket {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* repeated socketProtos.TgMatchInfo.TgOddMarketSelection selections */ 2:
                    message.selections.push(TgOddMarketSelection.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TgOddMarket, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* repeated socketProtos.TgMatchInfo.TgOddMarketSelection selections = 2; */
        for (let i = 0; i < message.selections.length; i++)
            TgOddMarketSelection.internalBinaryWrite(message.selections[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.TgMatchInfo.TgOddMarket
 */
export const TgOddMarket = new TgOddMarket$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TgOddMarketSelection$Type extends MessageType<TgOddMarketSelection> {
    constructor() {
        super("socketProtos.TgMatchInfo.TgOddMarketSelection", [
            { no: 1, name: "selectionName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "odd", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "transaction", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "betMoney", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TgOddMarketSelection>): TgOddMarketSelection {
        const message = { selectionName: "", odd: "", transaction: "", betMoney: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TgOddMarketSelection>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TgOddMarketSelection): TgOddMarketSelection {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string selectionName */ 1:
                    message.selectionName = reader.string();
                    break;
                case /* string odd */ 2:
                    message.odd = reader.string();
                    break;
                case /* string transaction */ 3:
                    message.transaction = reader.string();
                    break;
                case /* string betMoney */ 4:
                    message.betMoney = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TgOddMarketSelection, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string selectionName = 1; */
        if (message.selectionName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.selectionName);
        /* string odd = 2; */
        if (message.odd !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.odd);
        /* string transaction = 3; */
        if (message.transaction !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.transaction);
        /* string betMoney = 4; */
        if (message.betMoney !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.betMoney);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.TgMatchInfo.TgOddMarketSelection
 */
export const TgOddMarketSelection = new TgOddMarketSelection$Type();
