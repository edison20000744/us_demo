// @generated by protobuf-ts 2.5.0
// @generated from protobuf file "protobuf/protos/socket/MatchInfo.proto" (package "socketProtos.MatchInfo", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Command } from "./Socket";
/**
 * @generated from protobuf message socketProtos.MatchInfo.MatchUpdate
 */
export interface MatchUpdate {
    /**
     * @generated from protobuf field: socketProtos.command.Command command = 1;
     */
    command: Command;
    /**
     * @generated from protobuf field: int32 matchId = 2;
     */
    matchId: number; // 賽事id
    /**
     * @generated from protobuf field: sint32 status = 3;
     */
    status: number; // 賽事狀態
    /**
     * @generated from protobuf field: int32 startTime = 4;
     */
    startTime: number; // 實際開球時間(timestamp)
    /**
     * @generated from protobuf field: int32 homeScore = 5;
     */
    homeScore: number; // 主隊全場得分
    /**
     * @generated from protobuf field: int32 homeHalfScore = 6;
     */
    homeHalfScore: number; // 主隊半場得分
    /**
     * @generated from protobuf field: int32 homeRedCard = 7;
     */
    homeRedCard: number; // 主隊紅牌數量
    /**
     * @generated from protobuf field: int32 homeYellowCard = 8;
     */
    homeYellowCard: number; // 主隊黃牌數量
    /**
     * @generated from protobuf field: int32 homeCorner = 9;
     */
    homeCorner: number; // 主隊角球數量
    /**
     * @generated from protobuf field: int32 homeExtend = 10;
     */
    homeExtend: number; // 主隊延長賽比分(已包含常規比分)
    /**
     * @generated from protobuf field: int32 homePenalty = 11;
     */
    homePenalty: number; // 主隊點球大戰比分
    /**
     * @generated from protobuf field: int32 awayScore = 12;
     */
    awayScore: number; // 客隊全場得分
    /**
     * @generated from protobuf field: int32 awayHalfScore = 13;
     */
    awayHalfScore: number; // 客隊半場得分
    /**
     * @generated from protobuf field: int32 awayRedCard = 14;
     */
    awayRedCard: number; // 客隊紅牌數量
    /**
     * @generated from protobuf field: int32 awayYellowCard = 15;
     */
    awayYellowCard: number; // 客隊黃牌數量
    /**
     * @generated from protobuf field: int32 awayCorner = 16;
     */
    awayCorner: number; // 客隊角球數量
    /**
     * @generated from protobuf field: int32 awayExtend = 17;
     */
    awayExtend: number; // 客隊延長賽比分(已包含常規比分)
    /**
     * @generated from protobuf field: int32 awayPenalty = 18;
     */
    awayPenalty: number; // 客隊點球大戰比分
    /**
     * @generated from protobuf field: string animation = 19;
     */
    animation: string; // 動畫連結
    /**
     * @generated from protobuf field: repeated socketProtos.MatchInfo.LiveStreamProvider liveStreamings = 20;
     */
    liveStreamings: LiveStreamProvider[]; // 視頻資訊
}
/**
 * @generated from protobuf message socketProtos.MatchInfo.LiveStreamProvider
 */
export interface LiveStreamProvider {
    /**
     * @generated from protobuf field: string provider = 1;
     */
    provider: string; // 廠商
    /**
     * @generated from protobuf field: repeated socketProtos.MatchInfo.LiveStreamSource source = 2;
     */
    source: LiveStreamSource[]; // 視頻來源
}
/**
 * @generated from protobuf message socketProtos.MatchInfo.LiveStreamSource
 */
export interface LiveStreamSource {
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string; // 視頻名稱
    /**
     * @generated from protobuf field: string rtmp = 3;
     */
    rtmp: string; // rtmp
    /**
     * @generated from protobuf field: string hls = 4;
     */
    hls: string; // hls
}
/**
 * @generated from protobuf message socketProtos.MatchInfo.GoalNotify
 */
export interface GoalNotify {
    /**
     * @generated from protobuf field: socketProtos.command.Command command = 1;
     */
    command: Command;
    /**
     * @generated from protobuf field: int32 matchId = 2;
     */
    matchId: number; // 賽事id
    /**
     * @generated from protobuf field: sint32 status = 3;
     */
    status: number; // 賽事狀態
    /**
     * @generated from protobuf field: int32 type = 4;
     */
    type: number; // 通知事件類型 1:進球 2:紅牌 3:黃牌
    /**
     * @generated from protobuf field: int32 runtime = 5;
     */
    runtime: number; // 現在比賽進行的時間
    /**
     * @generated from protobuf field: int32 teamEvent = 6;
     */
    teamEvent: number; // 通知事件方 1:主隊 2客隊
    /**
     * @generated from protobuf field: string homeName = 7;
     */
    homeName: string; // 主隊名稱簡中
    /**
     * @generated from protobuf field: int32 homeScore = 10;
     */
    homeScore: number; // 主隊全場得分
    /**
     * @generated from protobuf field: int32 homeRedCard = 11;
     */
    homeRedCard: number; // 主隊紅牌數量
    /**
     * @generated from protobuf field: int32 homeYellowCard = 12;
     */
    homeYellowCard: number; // 主隊黃牌數量
    /**
     * @generated from protobuf field: int32 homeCorner = 13;
     */
    homeCorner: number; // 主隊角球數量
    /**
     * @generated from protobuf field: string awayName = 14;
     */
    awayName: string; // 客隊名稱簡中
    /**
     * @generated from protobuf field: int32 awayScore = 17;
     */
    awayScore: number; // 客隊全場得分
    /**
     * @generated from protobuf field: int32 awayRedCard = 18;
     */
    awayRedCard: number; // 客隊紅牌數量
    /**
     * @generated from protobuf field: int32 awayYellowCard = 19;
     */
    awayYellowCard: number; // 客隊黃牌數量
    /**
     * @generated from protobuf field: int32 awayCorner = 20;
     */
    awayCorner: number; // 客隊角球數量
}
/**
 * @generated from protobuf message socketProtos.MatchInfo.DeleteMatches
 */
export interface DeleteMatches {
    /**
     * @generated from protobuf field: socketProtos.command.Command command = 1;
     */
    command: Command;
    /**
     * @generated from protobuf field: repeated int32 matchIds = 2;
     */
    matchIds: number[]; // 賽事id
}
/**
 * @generated from protobuf message socketProtos.MatchInfo.OpenDateChange
 */
export interface OpenDateChange {
    /**
     * @generated from protobuf field: socketProtos.command.Command command = 1;
     */
    command: Command;
    /**
     * @generated from protobuf field: repeated socketProtos.MatchInfo.ChangeItem changeList = 2;
     */
    changeList: ChangeItem[]; // 變動列表
}
/**
 * @generated from protobuf message socketProtos.MatchInfo.ChangeItem
 */
export interface ChangeItem {
    /**
     * @generated from protobuf field: int32 matchId = 1;
     */
    matchId: number; // 賽事id
    /**
     * @generated from protobuf field: int32 initialOpenDate = 2;
     */
    initialOpenDate: number; // 原本時間
    /**
     * @generated from protobuf field: int32 changeOpenDate = 3;
     */
    changeOpenDate: number; // 變動時間
}
/**
 * @generated from protobuf message socketProtos.MatchInfo.MatchStats
 */
export interface MatchStats {
    /**
     * @generated from protobuf field: int32 type = 1;
     */
    type: number; // 技術統計分類;詳見技術統計類別碼
    /**
     * @generated from protobuf field: int32 home = 2;
     */
    home: number; // 主隊分數
    /**
     * @generated from protobuf field: int32 away = 3;
     */
    away: number; // 客隊分數
}
/**
 * @generated from protobuf message socketProtos.MatchInfo.MatchTlive
 */
export interface MatchTlive {
    /**
     * @generated from protobuf field: string data = 1;
     */
    data: string; // 文字直播內容
    /**
     * @generated from protobuf field: int32 position = 2;
     */
    position: number; // 事件發生方,0-中立 1,主隊 2,客隊
    /**
     * @generated from protobuf field: int32 type = 3;
     */
    type: number; // 狀態分類//类型，详见技术统计類別碼
    /**
     * @generated from protobuf field: string time = 4;
     */
    time: string; // 進行時間
}
/**
 * @generated from protobuf message socketProtos.MatchInfo.MatchIncident
 */
export interface MatchIncident {
    /**
     * @generated from protobuf field: int32 halfTime = 1;
     */
    halfTime: number; // 半場時間刻度
    /**
     * @generated from protobuf field: int32 overTime = 2;
     */
    overTime: number; // 全場時間刻度
    /**
     * @generated from protobuf field: int32 extendTime = 3;
     */
    extendTime: number; // 加時時間刻度
    /**
     * @generated from protobuf field: repeated socketProtos.MatchInfo.IncidentData data = 4;
     */
    data: IncidentData[]; // 事件資料
}
/**
 * @generated from protobuf message socketProtos.MatchInfo.IncidentData
 */
export interface IncidentData {
    /**
     * @generated from protobuf field: int32 type = 1;
     */
    type: number; // 類型
    /**
     * @generated from protobuf field: int32 position = 2;
     */
    position: number; // 事件發生方，0-中立1，主隊2，客隊
    /**
     * @generated from protobuf field: string time = 3;
     */
    time: string; // 時間（分鐘）
    /**
     * @generated from protobuf field: int32 scale = 4;
     */
    scale: number; // 時間刻度
    /**
     * @generated from protobuf field: string playerName = 5;
     */
    playerName: string; // 事件人員名稱(除了簡中，其它語言為空字串)    
}
/**
 * @generated from protobuf message socketProtos.MatchInfo.MatchDetail
 */
export interface MatchDetail {
    /**
     * @generated from protobuf field: socketProtos.command.Command command = 1;
     */
    command: Command;
    /**
     * @generated from protobuf field: repeated socketProtos.MatchInfo.MatchStats matchStats = 2;
     */
    matchStats: MatchStats[]; // 賽事統計資訊
    /**
     * @generated from protobuf field: repeated socketProtos.MatchInfo.MatchTlive matchTlive = 3;
     */
    matchTlive: MatchTlive[]; // 賽事文字直播
    /**
     * @generated from protobuf field: socketProtos.MatchInfo.MatchIncident matchIncident = 4;
     */
    matchIncident?: MatchIncident; // 賽事重要事件
}
/**
 * @generated from protobuf message socketProtos.MatchInfo.MatchPlayer
 */
export interface MatchPlayer {
    /**
     * @generated from protobuf field: int32 playerId = 1;
     */
    playerId: number; // 球員id
    /**
     * @generated from protobuf field: repeated socketProtos.MatchInfo.MatchPlayerIncident matchPlayerIncidents = 2;
     */
    matchPlayerIncidents: MatchPlayerIncident[]; // 賽事球員事件
}
/**
 * @generated from protobuf message socketProtos.MatchInfo.MatchPlayerIncident
 */
export interface MatchPlayerIncident {
    /**
     * @generated from protobuf field: int32 type = 1;
     */
    type: number; // 類型詳見狀態碼(足球技術統計)
    /**
     * @generated from protobuf field: string time = 2;
     */
    time: string; // 時間（分鐘）
    /**
     * @generated from protobuf field: int32 assist1Id = 3;
     */
    assist1Id: number; // 進球時，助攻球員1 id，-1則不須理會
    /**
     * @generated from protobuf field: int32 assist2Id = 4;
     */
    assist2Id: number; // 進球時，助攻球員2 id，-1則不須理會
    /**
     * @generated from protobuf field: int32 inPlayerId = 5;
     */
    inPlayerId: number; // 換人時，換上球員id，-1則不須理會
    /**
     * @generated from protobuf field: int32 outPlayerId = 6;
     */
    outPlayerId: number; // 換人時，換下球員id，-1則不須理會
    /**
     * @generated from protobuf field: int32 homeScore = 7;
     */
    homeScore: number; // 主隊比分
    /**
     * @generated from protobuf field: int32 awayScore = 8;
     */
    awayScore: number; // 客隊比分
}
/**
 * @generated from protobuf message socketProtos.MatchInfo.MatchLineup
 */
export interface MatchLineup {
    /**
     * @generated from protobuf field: socketProtos.command.Command command = 1;
     */
    command: Command;
    /**
     * @generated from protobuf field: repeated socketProtos.MatchInfo.MatchPlayer homePlayers = 2;
     */
    homePlayers: MatchPlayer[]; // 主隊球員
    /**
     * @generated from protobuf field: repeated socketProtos.MatchInfo.MatchPlayer awayPlayers = 3;
     */
    awayPlayers: MatchPlayer[]; // 客隊球員
}
/**
 * @generated from protobuf message socketProtos.MatchInfo.NewMatches
 */
export interface NewMatches {
    /**
     * @generated from protobuf field: socketProtos.command.Command command = 1;
     */
    command: Command;
    /**
     * @generated from protobuf field: repeated socketProtos.MatchInfo.Area areas = 2;
     */
    areas: Area[]; // 地區列表
    /**
     * @generated from protobuf field: repeated socketProtos.MatchInfo.MatchData matches = 3;
     */
    matches: MatchData[]; // 賽事列表
}
/**
 * @generated from protobuf message socketProtos.MatchInfo.Area
 */
export interface Area {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number; // 地區id
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string; // 地區名稱
    /**
     * @generated from protobuf field: repeated socketProtos.MatchInfo.Country countries = 3;
     */
    countries: Country[]; // 國家列表
}
/**
 * @generated from protobuf message socketProtos.MatchInfo.Country
 */
export interface Country {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number; // 國家id
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string; // 國家名稱
    /**
     * @generated from protobuf field: repeated socketProtos.MatchInfo.League leagues = 3;
     */
    leagues: League[]; // 聯盟列表
}
/**
 * @generated from protobuf message socketProtos.MatchInfo.League
 */
export interface League {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number; // 聯盟id
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string; // 聯盟名稱(簡中)
}
/**
 * @generated from protobuf message socketProtos.MatchInfo.MatchData
 */
export interface MatchData {
    /**
     * @generated from protobuf field: int32 matchId = 1;
     */
    matchId: number; // 賽事id
    /**
     * @generated from protobuf field: int32 status = 2;
     */
    status: number; // 賽事狀態
    /**
     * @generated from protobuf field: int32 openDate = 3;
     */
    openDate: number; // 開賽時間
    /**
     * @generated from protobuf field: int32 startTime = 4;
     */
    startTime: number; // 開球時間
    /**
     * @generated from protobuf field: int32 areaId = 5;
     */
    areaId: number; // 地區id
    /**
     * @generated from protobuf field: int32 countryId = 6;
     */
    countryId: number; // 國家id
    /**
     * @generated from protobuf field: int32 leagueId = 7;
     */
    leagueId: number; // 聯盟id
    /**
     * @generated from protobuf field: string leagueName = 8;
     */
    leagueName: string; // 聯盟名稱
    /**
     * @generated from protobuf field: string leagueLogo = 9;
     */
    leagueLogo: string; // 聯盟logo
    /**
     * @generated from protobuf field: int32 homeId = 10;
     */
    homeId: number; // 主隊id
    /**
     * @generated from protobuf field: int32 awayId = 11;
     */
    awayId: number; // 客隊id
    /**
     * @generated from protobuf field: string homeName = 12;
     */
    homeName: string; // 主隊名稱
    /**
     * @generated from protobuf field: string awayName = 13;
     */
    awayName: string; // 客隊名稱
    /**
     * @generated from protobuf field: string homeLogo = 14;
     */
    homeLogo: string; // 主隊logo
    /**
     * @generated from protobuf field: string awayLogo = 15;
     */
    awayLogo: string; // 客隊logo
    /**
     * @generated from protobuf field: int32 homeScore = 16;
     */
    homeScore: number; // 主隊全場比分
    /**
     * @generated from protobuf field: int32 awayScore = 17;
     */
    awayScore: number; // 客隊全場比分
    /**
     * @generated from protobuf field: int32 homeHalfScore = 18;
     */
    homeHalfScore: number; // 主隊半場比分
    /**
     * @generated from protobuf field: int32 awayHalfScore = 19;
     */
    awayHalfScore: number; // 客隊半場比分
    /**
     * @generated from protobuf field: int32 homeRedCard = 20;
     */
    homeRedCard: number; // 主隊紅牌數量
    /**
     * @generated from protobuf field: int32 awayRedCard = 21;
     */
    awayRedCard: number; // 客隊紅牌數量
    /**
     * @generated from protobuf field: int32 homeYellowCard = 22;
     */
    homeYellowCard: number; // 主隊黃牌數量
    /**
     * @generated from protobuf field: int32 awayYellowCard = 23;
     */
    awayYellowCard: number; // 客隊黃牌數量
    /**
     * @generated from protobuf field: int32 homeCorner = 24;
     */
    homeCorner: number; // 主隊角球數量
    /**
     * @generated from protobuf field: int32 awayCorner = 25;
     */
    awayCorner: number; // 客隊角球數量
    /**
     * @generated from protobuf field: string animation = 26;
     */
    animation: string; // 動畫連結
    /**
     * @generated from protobuf field: repeated socketProtos.MatchInfo.LiveStreamProvider liveStreamings = 27;
     */
    liveStreamings: LiveStreamProvider[]; // 視頻連結
    /**
     * @generated from protobuf field: string fullGameTime = 28;
     */
    fullGameTime: string; // 完場時間
    /**
     * @generated from protobuf field: int32 neutral = 29;
     */
    neutral: number; // 是否為中立場 0否 1是
    /**
     * @generated from protobuf field: int32 round = 30;
     */
    round: number; // 輪次
    /**
     * @generated from protobuf field: int32 betsCount = 31;
     */
    betsCount: number; // 累計下注次數
    /**
     * @generated from protobuf field: bool hasStatistics = 32;
     */
    hasStatistics: boolean; // 是否有統計項目(scoreStatistics、oddStatistics、tgOdds、odds)
    /**
     * @generated from protobuf field: repeated socketProtos.MatchInfo.ScoreStatistics scoreStatistics = 33;
     */
    scoreStatistics: ScoreStatistics[]; // 選項出現率統計
    /**
     * @generated from protobuf field: socketProtos.MatchInfo.OddStatistics oddStatistics = 34;
     */
    oddStatistics?: OddStatistics; // 指數統計
    /**
     * @generated from protobuf field: repeated socketProtos.MatchInfo.TgOdd tgOdds = 35;
     */
    tgOdds: TgOdd[]; // TG指數資訊
    /**
     * @generated from protobuf field: socketProtos.MatchInfo.OddIndexs odds = 36;
     */
    odds?: OddIndexs; // 一般指數(亞、歐、大小球)資訊
    /**
     * @generated from protobuf field: int32 views = 37;
     */
    views: number; // 賽事詳情觀看次數
}
/**
 * @generated from protobuf message socketProtos.MatchInfo.ScoreStatistics
 */
export interface ScoreStatistics {
    /**
     * @generated from protobuf field: string selectionName = 1;
     */
    selectionName: string; // 選項
    /**
     * @generated from protobuf field: string homeAppearRate = 2;
     */
    homeAppearRate: string; // 出現率(主隊)
    /**
     * @generated from protobuf field: int32 homeContinuedCount = 3;
     */
    homeContinuedCount: number; // 連續出現次數(主隊)
    /**
     * @generated from protobuf field: string awayAppearRate = 4;
     */
    awayAppearRate: string; // 出現率(客隊)
    /**
     * @generated from protobuf field: int32 awayContinuedCount = 5;
     */
    awayContinuedCount: number; // 連續出現次數(客隊)
}
/**
 * @generated from protobuf message socketProtos.MatchInfo.OddStatistics
 */
export interface OddStatistics {
    /**
     * @generated from protobuf field: socketProtos.MatchInfo.OddStatisticsDetail win = 1;
     */
    win?: OddStatisticsDetail; // 贏
    /**
     * @generated from protobuf field: socketProtos.MatchInfo.OddStatisticsDetail lost = 2;
     */
    lost?: OddStatisticsDetail; // 輸
    /**
     * @generated from protobuf field: socketProtos.MatchInfo.OddStatisticsDetail peace = 3;
     */
    peace?: OddStatisticsDetail; // 和
    /**
     * @generated from protobuf field: socketProtos.MatchInfo.OddStatisticsDetail asiaWin = 4;
     */
    asiaWin?: OddStatisticsDetail; // 亞盤連續贏盤
    /**
     * @generated from protobuf field: socketProtos.MatchInfo.OddStatisticsDetail asiaLost = 5;
     */
    asiaLost?: OddStatisticsDetail; // 亞盤連續輸盤
    /**
     * @generated from protobuf field: socketProtos.MatchInfo.OddStatisticsDetail asiaPeace = 6;
     */
    asiaPeace?: OddStatisticsDetail; // 亞盤連續平局
    /**
     * @generated from protobuf field: socketProtos.MatchInfo.OddStatisticsDetail overBall = 7;
     */
    overBall?: OddStatisticsDetail; // 連續大球
    /**
     * @generated from protobuf field: socketProtos.MatchInfo.OddStatisticsDetail underBall = 8;
     */
    underBall?: OddStatisticsDetail; // 連續小球
    /**
     * @generated from protobuf field: socketProtos.MatchInfo.OddStatisticsDetail peaceBall = 9;
     */
    peaceBall?: OddStatisticsDetail; // 連續走(平局)
}
/**
 * @generated from protobuf message socketProtos.MatchInfo.OddStatisticsDetail
 */
export interface OddStatisticsDetail {
    /**
     * @generated from protobuf field: int32 homeAppearCnt = 1;
     */
    homeAppearCnt: number; // 出現次數(主隊)
    /**
     * @generated from protobuf field: string homeAppearRate = 2;
     */
    homeAppearRate: string; // 出現機率(主隊)
    /**
     * @generated from protobuf field: int32 homeContinuedCount = 3;
     */
    homeContinuedCount: number; // 連續出現次數(主隊)
    /**
     * @generated from protobuf field: int32 awayAppearCnt = 4;
     */
    awayAppearCnt: number; // 出現次數(客隊)
    /**
     * @generated from protobuf field: string awayAppearRate = 5;
     */
    awayAppearRate: string; // 出現機率(客隊)
    /**
     * @generated from protobuf field: int32 awayContinuedCount = 6;
     */
    awayContinuedCount: number; // 連續出現次數(客隊)
}
/**
 * @generated from protobuf message socketProtos.MatchInfo.TgOdd
 */
export interface TgOdd {
    /**
     * @generated from protobuf field: string selectionName = 1;
     */
    selectionName: string; // 選項名稱
    /**
     * @generated from protobuf field: string transaction = 2;
     */
    transaction: string; // 可交易量
    /**
     * @generated from protobuf field: string profit = 3;
     */
    profit: string; // 獲利率
    /**
     * @generated from protobuf field: string betMoney = 4;
     */
    betMoney: string; // 累計下注金額
    /**
     * @generated from protobuf field: int32 isPopular = 5;
     */
    isPopular: number; // 是否熱銷 0否 1是
    /**
     * @generated from protobuf field: int32 isSoldOut = 6;
     */
    isSoldOut: number; // 是否完售 0否 1是
}
/**
 * @generated from protobuf message socketProtos.MatchInfo.OddIndexs
 */
export interface OddIndexs {
    /**
     * @generated from protobuf field: socketProtos.MatchInfo.OddIndexItem asia = 1;
     */
    asia?: OddIndexItem; // 亞盤
    /**
     * @generated from protobuf field: socketProtos.MatchInfo.OddIndexItem eu = 2;
     */
    eu?: OddIndexItem; // 歐盤
    /**
     * @generated from protobuf field: socketProtos.MatchInfo.OddIndexItem bs = 3;
     */
    bs?: OddIndexItem; // 大小球
    /**
     * @generated from protobuf field: socketProtos.MatchInfo.OddIndexItem cr = 4;
     */
    cr?: OddIndexItem; // 角球
}
/**
 * @generated from protobuf message socketProtos.MatchInfo.OddIndexItem
 */
export interface OddIndexItem {
    /**
     * @generated from protobuf field: int32 companyID = 1;
     */
    companyID: number; // 指數公司id
    /**
     * @generated from protobuf field: string companyName = 2;
     */
    companyName: string; // 指數公司名稱
    /**
     * @generated from protobuf field: socketProtos.MatchInfo.OddIndexDetail first = 3;
     */
    first?: OddIndexDetail; // 初盤
    /**
     * @generated from protobuf field: socketProtos.MatchInfo.OddIndexDetail latest = 4;
     */
    latest?: OddIndexDetail; // 即時盤
    /**
     * @generated from protobuf field: socketProtos.MatchInfo.OddIndexDetail live = 5;
     */
    live?: OddIndexDetail; // 滾球盤
    /**
     * @generated from protobuf field: int32 closed = 6;
     */
    closed: number; // 是否封盤 0否 1是
}
/**
 * @generated from protobuf message socketProtos.MatchInfo.OddIndexDetail
 */
export interface OddIndexDetail {
    /**
     * @generated from protobuf field: string home = 1;
     */
    home: string; // 主賠率
    /**
     * @generated from protobuf field: string handicap = 2;
     */
    handicap: string; // 和賠率
    /**
     * @generated from protobuf field: string away = 3;
     */
    away: string; // 客賠率
}
/**
 * @generated from protobuf message socketProtos.MatchInfo.PopularMatches
 */
export interface PopularMatches {
    /**
     * @generated from protobuf field: socketProtos.command.Command command = 1;
     */
    command: Command;
    /**
     * @generated from protobuf field: repeated socketProtos.MatchInfo.PopularMatches.PopularMatch matches = 2;
     */
    matches: PopularMatches_PopularMatch[]; // 賽事列表
}
/**
 * @generated from protobuf message socketProtos.MatchInfo.PopularMatches.PopularIndex
 */
export interface PopularMatches_PopularIndex {
    /**
     * @generated from protobuf field: string home = 1;
     */
    home: string; // 主胜
    /**
     * @generated from protobuf field: string handicap = 2;
     */
    handicap: string; // 盤口
    /**
     * @generated from protobuf field: string away = 3;
     */
    away: string; // 客胜
    /**
     * @generated from protobuf field: int32 closed = 4;
     */
    closed: number; // 是否封盤
}
/**
 * @generated from protobuf message socketProtos.MatchInfo.PopularMatches.PopularOdds
 */
export interface PopularMatches_PopularOdds {
    /**
     * @generated from protobuf field: socketProtos.MatchInfo.PopularMatches.PopularIndex asia = 1;
     */
    asia?: PopularMatches_PopularIndex; // 亞盤
    /**
     * @generated from protobuf field: socketProtos.MatchInfo.PopularMatches.PopularIndex eu = 2;
     */
    eu?: PopularMatches_PopularIndex; // 歐盤
    /**
     * @generated from protobuf field: socketProtos.MatchInfo.PopularMatches.PopularIndex bs = 3;
     */
    bs?: PopularMatches_PopularIndex; // 大小球
    /**
     * @generated from protobuf field: socketProtos.MatchInfo.PopularMatches.PopularIndex cr = 4;
     */
    cr?: PopularMatches_PopularIndex; // 角球
}
/**
 * @generated from protobuf message socketProtos.MatchInfo.PopularMatches.PopularMatch
 */
export interface PopularMatches_PopularMatch {
    /**
     * @generated from protobuf field: int32 matchId = 1;
     */
    matchId: number; // 賽事id
    /**
     * @generated from protobuf field: int32 status = 2;
     */
    status: number; // 賽事狀態
    /**
     * @generated from protobuf field: int32 openDate = 3;
     */
    openDate: number; // 開賽時間
    /**
     * @generated from protobuf field: int32 startTime = 4;
     */
    startTime: number; // 開球時間
    /**
     * @generated from protobuf field: int32 leagueId = 5;
     */
    leagueId: number; // 聯盟id
    /**
     * @generated from protobuf field: string leagueName = 6;
     */
    leagueName: string; // 聯盟名稱
    /**
     * @generated from protobuf field: string leagueLogo = 7;
     */
    leagueLogo: string; // 聯盟logo
    /**
     * @generated from protobuf field: int32 homeId = 8;
     */
    homeId: number; // 主隊id
    /**
     * @generated from protobuf field: int32 awayId = 9;
     */
    awayId: number; // 客隊id
    /**
     * @generated from protobuf field: string homeName = 10;
     */
    homeName: string; // 主隊名稱
    /**
     * @generated from protobuf field: string awayName = 11;
     */
    awayName: string; // 客隊名稱
    /**
     * @generated from protobuf field: string homeLogo = 12;
     */
    homeLogo: string; // 主隊logo
    /**
     * @generated from protobuf field: string awayLogo = 13;
     */
    awayLogo: string; // 客隊logo
    /**
     * @generated from protobuf field: int32 homeScore = 14;
     */
    homeScore: number; // 主隊全場比分
    /**
     * @generated from protobuf field: int32 awayScore = 15;
     */
    awayScore: number; // 客隊全場比分
    /**
     * @generated from protobuf field: int32 homeHalfScore = 16;
     */
    homeHalfScore: number; // 主隊半場比分
    /**
     * @generated from protobuf field: int32 awayHalfScore = 17;
     */
    awayHalfScore: number; // 客隊半場比分
    /**
     * @generated from protobuf field: int32 homeRedCard = 18;
     */
    homeRedCard: number; // 主隊紅牌數量
    /**
     * @generated from protobuf field: int32 awayRedCard = 19;
     */
    awayRedCard: number; // 客隊紅牌數量
    /**
     * @generated from protobuf field: int32 homeYellowCard = 20;
     */
    homeYellowCard: number; // 主隊黃牌數量
    /**
     * @generated from protobuf field: int32 awayYellowCard = 21;
     */
    awayYellowCard: number; // 客隊黃牌數量
    /**
     * @generated from protobuf field: int32 homeCorner = 22;
     */
    homeCorner: number; // 主隊角球數量
    /**
     * @generated from protobuf field: int32 awayCorner = 23;
     */
    awayCorner: number; // 客隊角球數量
    /**
     * @generated from protobuf field: string animation = 24;
     */
    animation: string; // 動畫連結
    /**
     * @generated from protobuf field: repeated socketProtos.MatchInfo.LiveStreamProvider liveStreamings = 25;
     */
    liveStreamings: LiveStreamProvider[]; // 視頻連結
    /**
     * @generated from protobuf field: int32 views = 26;
     */
    views: number; // 賽事詳情觀看次數
    /**
     * @generated from protobuf field: int32 neutral = 27;
     */
    neutral: number; // 是否為中立場
    /**
     * @generated from protobuf field: socketProtos.MatchInfo.PopularMatches.PopularOdds odds = 28;
     */
    odds?: PopularMatches_PopularOdds; // 一般指數(亞、歐、大小球)資訊
    /**
     * @generated from protobuf field: repeated socketProtos.MatchInfo.TgOdd tgOdds = 29;
     */
    tgOdds: TgOdd[]; // TG指數資訊
}
// @generated message type with reflection information, may provide speed optimized methods
class MatchUpdate$Type extends MessageType<MatchUpdate> {
    constructor() {
        super("socketProtos.MatchInfo.MatchUpdate", [
            { no: 1, name: "command", kind: "enum", T: () => ["socketProtos.command.Command", Command] },
            { no: 2, name: "matchId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "status", kind: "scalar", T: 17 /*ScalarType.SINT32*/ },
            { no: 4, name: "startTime", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "homeScore", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "homeHalfScore", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "homeRedCard", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "homeYellowCard", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "homeCorner", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "homeExtend", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "homePenalty", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "awayScore", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "awayHalfScore", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "awayRedCard", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "awayYellowCard", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 16, name: "awayCorner", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 17, name: "awayExtend", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 18, name: "awayPenalty", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 19, name: "animation", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "liveStreamings", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LiveStreamProvider }
        ]);
    }
    create(value?: PartialMessage<MatchUpdate>): MatchUpdate {
        const message = { command: 0, matchId: 0, status: 0, startTime: 0, homeScore: 0, homeHalfScore: 0, homeRedCard: 0, homeYellowCard: 0, homeCorner: 0, homeExtend: 0, homePenalty: 0, awayScore: 0, awayHalfScore: 0, awayRedCard: 0, awayYellowCard: 0, awayCorner: 0, awayExtend: 0, awayPenalty: 0, animation: "", liveStreamings: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchUpdate): MatchUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* socketProtos.command.Command command */ 1:
                    message.command = reader.int32();
                    break;
                case /* int32 matchId */ 2:
                    message.matchId = reader.int32();
                    break;
                case /* sint32 status */ 3:
                    message.status = reader.sint32();
                    break;
                case /* int32 startTime */ 4:
                    message.startTime = reader.int32();
                    break;
                case /* int32 homeScore */ 5:
                    message.homeScore = reader.int32();
                    break;
                case /* int32 homeHalfScore */ 6:
                    message.homeHalfScore = reader.int32();
                    break;
                case /* int32 homeRedCard */ 7:
                    message.homeRedCard = reader.int32();
                    break;
                case /* int32 homeYellowCard */ 8:
                    message.homeYellowCard = reader.int32();
                    break;
                case /* int32 homeCorner */ 9:
                    message.homeCorner = reader.int32();
                    break;
                case /* int32 homeExtend */ 10:
                    message.homeExtend = reader.int32();
                    break;
                case /* int32 homePenalty */ 11:
                    message.homePenalty = reader.int32();
                    break;
                case /* int32 awayScore */ 12:
                    message.awayScore = reader.int32();
                    break;
                case /* int32 awayHalfScore */ 13:
                    message.awayHalfScore = reader.int32();
                    break;
                case /* int32 awayRedCard */ 14:
                    message.awayRedCard = reader.int32();
                    break;
                case /* int32 awayYellowCard */ 15:
                    message.awayYellowCard = reader.int32();
                    break;
                case /* int32 awayCorner */ 16:
                    message.awayCorner = reader.int32();
                    break;
                case /* int32 awayExtend */ 17:
                    message.awayExtend = reader.int32();
                    break;
                case /* int32 awayPenalty */ 18:
                    message.awayPenalty = reader.int32();
                    break;
                case /* string animation */ 19:
                    message.animation = reader.string();
                    break;
                case /* repeated socketProtos.MatchInfo.LiveStreamProvider liveStreamings */ 20:
                    message.liveStreamings.push(LiveStreamProvider.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* socketProtos.command.Command command = 1; */
        if (message.command !== 0)
            writer.tag(1, WireType.Varint).int32(message.command);
        /* int32 matchId = 2; */
        if (message.matchId !== 0)
            writer.tag(2, WireType.Varint).int32(message.matchId);
        /* sint32 status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).sint32(message.status);
        /* int32 startTime = 4; */
        if (message.startTime !== 0)
            writer.tag(4, WireType.Varint).int32(message.startTime);
        /* int32 homeScore = 5; */
        if (message.homeScore !== 0)
            writer.tag(5, WireType.Varint).int32(message.homeScore);
        /* int32 homeHalfScore = 6; */
        if (message.homeHalfScore !== 0)
            writer.tag(6, WireType.Varint).int32(message.homeHalfScore);
        /* int32 homeRedCard = 7; */
        if (message.homeRedCard !== 0)
            writer.tag(7, WireType.Varint).int32(message.homeRedCard);
        /* int32 homeYellowCard = 8; */
        if (message.homeYellowCard !== 0)
            writer.tag(8, WireType.Varint).int32(message.homeYellowCard);
        /* int32 homeCorner = 9; */
        if (message.homeCorner !== 0)
            writer.tag(9, WireType.Varint).int32(message.homeCorner);
        /* int32 homeExtend = 10; */
        if (message.homeExtend !== 0)
            writer.tag(10, WireType.Varint).int32(message.homeExtend);
        /* int32 homePenalty = 11; */
        if (message.homePenalty !== 0)
            writer.tag(11, WireType.Varint).int32(message.homePenalty);
        /* int32 awayScore = 12; */
        if (message.awayScore !== 0)
            writer.tag(12, WireType.Varint).int32(message.awayScore);
        /* int32 awayHalfScore = 13; */
        if (message.awayHalfScore !== 0)
            writer.tag(13, WireType.Varint).int32(message.awayHalfScore);
        /* int32 awayRedCard = 14; */
        if (message.awayRedCard !== 0)
            writer.tag(14, WireType.Varint).int32(message.awayRedCard);
        /* int32 awayYellowCard = 15; */
        if (message.awayYellowCard !== 0)
            writer.tag(15, WireType.Varint).int32(message.awayYellowCard);
        /* int32 awayCorner = 16; */
        if (message.awayCorner !== 0)
            writer.tag(16, WireType.Varint).int32(message.awayCorner);
        /* int32 awayExtend = 17; */
        if (message.awayExtend !== 0)
            writer.tag(17, WireType.Varint).int32(message.awayExtend);
        /* int32 awayPenalty = 18; */
        if (message.awayPenalty !== 0)
            writer.tag(18, WireType.Varint).int32(message.awayPenalty);
        /* string animation = 19; */
        if (message.animation !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.animation);
        /* repeated socketProtos.MatchInfo.LiveStreamProvider liveStreamings = 20; */
        for (let i = 0; i < message.liveStreamings.length; i++)
            LiveStreamProvider.internalBinaryWrite(message.liveStreamings[i], writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.MatchInfo.MatchUpdate
 */
export const MatchUpdate = new MatchUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LiveStreamProvider$Type extends MessageType<LiveStreamProvider> {
    constructor() {
        super("socketProtos.MatchInfo.LiveStreamProvider", [
            { no: 1, name: "provider", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "source", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LiveStreamSource }
        ]);
    }
    create(value?: PartialMessage<LiveStreamProvider>): LiveStreamProvider {
        const message = { provider: "", source: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LiveStreamProvider>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LiveStreamProvider): LiveStreamProvider {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string provider */ 1:
                    message.provider = reader.string();
                    break;
                case /* repeated socketProtos.MatchInfo.LiveStreamSource source */ 2:
                    message.source.push(LiveStreamSource.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LiveStreamProvider, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string provider = 1; */
        if (message.provider !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.provider);
        /* repeated socketProtos.MatchInfo.LiveStreamSource source = 2; */
        for (let i = 0; i < message.source.length; i++)
            LiveStreamSource.internalBinaryWrite(message.source[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.MatchInfo.LiveStreamProvider
 */
export const LiveStreamProvider = new LiveStreamProvider$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LiveStreamSource$Type extends MessageType<LiveStreamSource> {
    constructor() {
        super("socketProtos.MatchInfo.LiveStreamSource", [
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "rtmp", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "hls", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LiveStreamSource>): LiveStreamSource {
        const message = { name: "", rtmp: "", hls: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LiveStreamSource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LiveStreamSource): LiveStreamSource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string rtmp */ 3:
                    message.rtmp = reader.string();
                    break;
                case /* string hls */ 4:
                    message.hls = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LiveStreamSource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string rtmp = 3; */
        if (message.rtmp !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.rtmp);
        /* string hls = 4; */
        if (message.hls !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.hls);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.MatchInfo.LiveStreamSource
 */
export const LiveStreamSource = new LiveStreamSource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GoalNotify$Type extends MessageType<GoalNotify> {
    constructor() {
        super("socketProtos.MatchInfo.GoalNotify", [
            { no: 1, name: "command", kind: "enum", T: () => ["socketProtos.command.Command", Command] },
            { no: 2, name: "matchId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "status", kind: "scalar", T: 17 /*ScalarType.SINT32*/ },
            { no: 4, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "runtime", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "teamEvent", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "homeName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "homeScore", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "homeRedCard", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "homeYellowCard", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "homeCorner", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "awayName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "awayScore", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 18, name: "awayRedCard", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 19, name: "awayYellowCard", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 20, name: "awayCorner", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GoalNotify>): GoalNotify {
        const message = { command: 0, matchId: 0, status: 0, type: 0, runtime: 0, teamEvent: 0, homeName: "", homeScore: 0, homeRedCard: 0, homeYellowCard: 0, homeCorner: 0, awayName: "", awayScore: 0, awayRedCard: 0, awayYellowCard: 0, awayCorner: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GoalNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GoalNotify): GoalNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* socketProtos.command.Command command */ 1:
                    message.command = reader.int32();
                    break;
                case /* int32 matchId */ 2:
                    message.matchId = reader.int32();
                    break;
                case /* sint32 status */ 3:
                    message.status = reader.sint32();
                    break;
                case /* int32 type */ 4:
                    message.type = reader.int32();
                    break;
                case /* int32 runtime */ 5:
                    message.runtime = reader.int32();
                    break;
                case /* int32 teamEvent */ 6:
                    message.teamEvent = reader.int32();
                    break;
                case /* string homeName */ 7:
                    message.homeName = reader.string();
                    break;
                case /* int32 homeScore */ 10:
                    message.homeScore = reader.int32();
                    break;
                case /* int32 homeRedCard */ 11:
                    message.homeRedCard = reader.int32();
                    break;
                case /* int32 homeYellowCard */ 12:
                    message.homeYellowCard = reader.int32();
                    break;
                case /* int32 homeCorner */ 13:
                    message.homeCorner = reader.int32();
                    break;
                case /* string awayName */ 14:
                    message.awayName = reader.string();
                    break;
                case /* int32 awayScore */ 17:
                    message.awayScore = reader.int32();
                    break;
                case /* int32 awayRedCard */ 18:
                    message.awayRedCard = reader.int32();
                    break;
                case /* int32 awayYellowCard */ 19:
                    message.awayYellowCard = reader.int32();
                    break;
                case /* int32 awayCorner */ 20:
                    message.awayCorner = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GoalNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* socketProtos.command.Command command = 1; */
        if (message.command !== 0)
            writer.tag(1, WireType.Varint).int32(message.command);
        /* int32 matchId = 2; */
        if (message.matchId !== 0)
            writer.tag(2, WireType.Varint).int32(message.matchId);
        /* sint32 status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).sint32(message.status);
        /* int32 type = 4; */
        if (message.type !== 0)
            writer.tag(4, WireType.Varint).int32(message.type);
        /* int32 runtime = 5; */
        if (message.runtime !== 0)
            writer.tag(5, WireType.Varint).int32(message.runtime);
        /* int32 teamEvent = 6; */
        if (message.teamEvent !== 0)
            writer.tag(6, WireType.Varint).int32(message.teamEvent);
        /* string homeName = 7; */
        if (message.homeName !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.homeName);
        /* int32 homeScore = 10; */
        if (message.homeScore !== 0)
            writer.tag(10, WireType.Varint).int32(message.homeScore);
        /* int32 homeRedCard = 11; */
        if (message.homeRedCard !== 0)
            writer.tag(11, WireType.Varint).int32(message.homeRedCard);
        /* int32 homeYellowCard = 12; */
        if (message.homeYellowCard !== 0)
            writer.tag(12, WireType.Varint).int32(message.homeYellowCard);
        /* int32 homeCorner = 13; */
        if (message.homeCorner !== 0)
            writer.tag(13, WireType.Varint).int32(message.homeCorner);
        /* string awayName = 14; */
        if (message.awayName !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.awayName);
        /* int32 awayScore = 17; */
        if (message.awayScore !== 0)
            writer.tag(17, WireType.Varint).int32(message.awayScore);
        /* int32 awayRedCard = 18; */
        if (message.awayRedCard !== 0)
            writer.tag(18, WireType.Varint).int32(message.awayRedCard);
        /* int32 awayYellowCard = 19; */
        if (message.awayYellowCard !== 0)
            writer.tag(19, WireType.Varint).int32(message.awayYellowCard);
        /* int32 awayCorner = 20; */
        if (message.awayCorner !== 0)
            writer.tag(20, WireType.Varint).int32(message.awayCorner);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.MatchInfo.GoalNotify
 */
export const GoalNotify = new GoalNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteMatches$Type extends MessageType<DeleteMatches> {
    constructor() {
        super("socketProtos.MatchInfo.DeleteMatches", [
            { no: 1, name: "command", kind: "enum", T: () => ["socketProtos.command.Command", Command] },
            { no: 2, name: "matchIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteMatches>): DeleteMatches {
        const message = { command: 0, matchIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteMatches>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteMatches): DeleteMatches {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* socketProtos.command.Command command */ 1:
                    message.command = reader.int32();
                    break;
                case /* repeated int32 matchIds */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.matchIds.push(reader.int32());
                    else
                        message.matchIds.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteMatches, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* socketProtos.command.Command command = 1; */
        if (message.command !== 0)
            writer.tag(1, WireType.Varint).int32(message.command);
        /* repeated int32 matchIds = 2; */
        if (message.matchIds.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.matchIds.length; i++)
                writer.int32(message.matchIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.MatchInfo.DeleteMatches
 */
export const DeleteMatches = new DeleteMatches$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OpenDateChange$Type extends MessageType<OpenDateChange> {
    constructor() {
        super("socketProtos.MatchInfo.OpenDateChange", [
            { no: 1, name: "command", kind: "enum", T: () => ["socketProtos.command.Command", Command] },
            { no: 2, name: "changeList", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChangeItem }
        ]);
    }
    create(value?: PartialMessage<OpenDateChange>): OpenDateChange {
        const message = { command: 0, changeList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OpenDateChange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OpenDateChange): OpenDateChange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* socketProtos.command.Command command */ 1:
                    message.command = reader.int32();
                    break;
                case /* repeated socketProtos.MatchInfo.ChangeItem changeList */ 2:
                    message.changeList.push(ChangeItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OpenDateChange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* socketProtos.command.Command command = 1; */
        if (message.command !== 0)
            writer.tag(1, WireType.Varint).int32(message.command);
        /* repeated socketProtos.MatchInfo.ChangeItem changeList = 2; */
        for (let i = 0; i < message.changeList.length; i++)
            ChangeItem.internalBinaryWrite(message.changeList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.MatchInfo.OpenDateChange
 */
export const OpenDateChange = new OpenDateChange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeItem$Type extends MessageType<ChangeItem> {
    constructor() {
        super("socketProtos.MatchInfo.ChangeItem", [
            { no: 1, name: "matchId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "initialOpenDate", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "changeOpenDate", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeItem>): ChangeItem {
        const message = { matchId: 0, initialOpenDate: 0, changeOpenDate: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChangeItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeItem): ChangeItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 matchId */ 1:
                    message.matchId = reader.int32();
                    break;
                case /* int32 initialOpenDate */ 2:
                    message.initialOpenDate = reader.int32();
                    break;
                case /* int32 changeOpenDate */ 3:
                    message.changeOpenDate = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 matchId = 1; */
        if (message.matchId !== 0)
            writer.tag(1, WireType.Varint).int32(message.matchId);
        /* int32 initialOpenDate = 2; */
        if (message.initialOpenDate !== 0)
            writer.tag(2, WireType.Varint).int32(message.initialOpenDate);
        /* int32 changeOpenDate = 3; */
        if (message.changeOpenDate !== 0)
            writer.tag(3, WireType.Varint).int32(message.changeOpenDate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.MatchInfo.ChangeItem
 */
export const ChangeItem = new ChangeItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchStats$Type extends MessageType<MatchStats> {
    constructor() {
        super("socketProtos.MatchInfo.MatchStats", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "home", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "away", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MatchStats>): MatchStats {
        const message = { type: 0, home: 0, away: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchStats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchStats): MatchStats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* int32 home */ 2:
                    message.home = reader.int32();
                    break;
                case /* int32 away */ 3:
                    message.away = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* int32 home = 2; */
        if (message.home !== 0)
            writer.tag(2, WireType.Varint).int32(message.home);
        /* int32 away = 3; */
        if (message.away !== 0)
            writer.tag(3, WireType.Varint).int32(message.away);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.MatchInfo.MatchStats
 */
export const MatchStats = new MatchStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchTlive$Type extends MessageType<MatchTlive> {
    constructor() {
        super("socketProtos.MatchInfo.MatchTlive", [
            { no: 1, name: "data", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "position", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "time", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MatchTlive>): MatchTlive {
        const message = { data: "", position: 0, type: 0, time: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchTlive>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchTlive): MatchTlive {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string data */ 1:
                    message.data = reader.string();
                    break;
                case /* int32 position */ 2:
                    message.position = reader.int32();
                    break;
                case /* int32 type */ 3:
                    message.type = reader.int32();
                    break;
                case /* string time */ 4:
                    message.time = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchTlive, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string data = 1; */
        if (message.data !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.data);
        /* int32 position = 2; */
        if (message.position !== 0)
            writer.tag(2, WireType.Varint).int32(message.position);
        /* int32 type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* string time = 4; */
        if (message.time !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.time);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.MatchInfo.MatchTlive
 */
export const MatchTlive = new MatchTlive$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchIncident$Type extends MessageType<MatchIncident> {
    constructor() {
        super("socketProtos.MatchInfo.MatchIncident", [
            { no: 1, name: "halfTime", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "overTime", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "extendTime", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IncidentData }
        ]);
    }
    create(value?: PartialMessage<MatchIncident>): MatchIncident {
        const message = { halfTime: 0, overTime: 0, extendTime: 0, data: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchIncident>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchIncident): MatchIncident {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 halfTime */ 1:
                    message.halfTime = reader.int32();
                    break;
                case /* int32 overTime */ 2:
                    message.overTime = reader.int32();
                    break;
                case /* int32 extendTime */ 3:
                    message.extendTime = reader.int32();
                    break;
                case /* repeated socketProtos.MatchInfo.IncidentData data */ 4:
                    message.data.push(IncidentData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchIncident, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 halfTime = 1; */
        if (message.halfTime !== 0)
            writer.tag(1, WireType.Varint).int32(message.halfTime);
        /* int32 overTime = 2; */
        if (message.overTime !== 0)
            writer.tag(2, WireType.Varint).int32(message.overTime);
        /* int32 extendTime = 3; */
        if (message.extendTime !== 0)
            writer.tag(3, WireType.Varint).int32(message.extendTime);
        /* repeated socketProtos.MatchInfo.IncidentData data = 4; */
        for (let i = 0; i < message.data.length; i++)
            IncidentData.internalBinaryWrite(message.data[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.MatchInfo.MatchIncident
 */
export const MatchIncident = new MatchIncident$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IncidentData$Type extends MessageType<IncidentData> {
    constructor() {
        super("socketProtos.MatchInfo.IncidentData", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "position", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "scale", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "playerName", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IncidentData>): IncidentData {
        const message = { type: 0, position: 0, time: "", scale: 0, playerName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IncidentData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IncidentData): IncidentData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* int32 position */ 2:
                    message.position = reader.int32();
                    break;
                case /* string time */ 3:
                    message.time = reader.string();
                    break;
                case /* int32 scale */ 4:
                    message.scale = reader.int32();
                    break;
                case /* string playerName */ 5:
                    message.playerName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IncidentData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* int32 position = 2; */
        if (message.position !== 0)
            writer.tag(2, WireType.Varint).int32(message.position);
        /* string time = 3; */
        if (message.time !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.time);
        /* int32 scale = 4; */
        if (message.scale !== 0)
            writer.tag(4, WireType.Varint).int32(message.scale);
        /* string playerName = 5; */
        if (message.playerName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.playerName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.MatchInfo.IncidentData
 */
export const IncidentData = new IncidentData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchDetail$Type extends MessageType<MatchDetail> {
    constructor() {
        super("socketProtos.MatchInfo.MatchDetail", [
            { no: 1, name: "command", kind: "enum", T: () => ["socketProtos.command.Command", Command] },
            { no: 2, name: "matchStats", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchStats },
            { no: 3, name: "matchTlive", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchTlive },
            { no: 4, name: "matchIncident", kind: "message", T: () => MatchIncident }
        ]);
    }
    create(value?: PartialMessage<MatchDetail>): MatchDetail {
        const message = { command: 0, matchStats: [], matchTlive: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchDetail): MatchDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* socketProtos.command.Command command */ 1:
                    message.command = reader.int32();
                    break;
                case /* repeated socketProtos.MatchInfo.MatchStats matchStats */ 2:
                    message.matchStats.push(MatchStats.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated socketProtos.MatchInfo.MatchTlive matchTlive */ 3:
                    message.matchTlive.push(MatchTlive.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* socketProtos.MatchInfo.MatchIncident matchIncident */ 4:
                    message.matchIncident = MatchIncident.internalBinaryRead(reader, reader.uint32(), options, message.matchIncident);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* socketProtos.command.Command command = 1; */
        if (message.command !== 0)
            writer.tag(1, WireType.Varint).int32(message.command);
        /* repeated socketProtos.MatchInfo.MatchStats matchStats = 2; */
        for (let i = 0; i < message.matchStats.length; i++)
            MatchStats.internalBinaryWrite(message.matchStats[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated socketProtos.MatchInfo.MatchTlive matchTlive = 3; */
        for (let i = 0; i < message.matchTlive.length; i++)
            MatchTlive.internalBinaryWrite(message.matchTlive[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* socketProtos.MatchInfo.MatchIncident matchIncident = 4; */
        if (message.matchIncident)
            MatchIncident.internalBinaryWrite(message.matchIncident, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.MatchInfo.MatchDetail
 */
export const MatchDetail = new MatchDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchPlayer$Type extends MessageType<MatchPlayer> {
    constructor() {
        super("socketProtos.MatchInfo.MatchPlayer", [
            { no: 1, name: "playerId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "matchPlayerIncidents", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchPlayerIncident }
        ]);
    }
    create(value?: PartialMessage<MatchPlayer>): MatchPlayer {
        const message = { playerId: 0, matchPlayerIncidents: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchPlayer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchPlayer): MatchPlayer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 playerId */ 1:
                    message.playerId = reader.int32();
                    break;
                case /* repeated socketProtos.MatchInfo.MatchPlayerIncident matchPlayerIncidents */ 2:
                    message.matchPlayerIncidents.push(MatchPlayerIncident.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchPlayer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 playerId = 1; */
        if (message.playerId !== 0)
            writer.tag(1, WireType.Varint).int32(message.playerId);
        /* repeated socketProtos.MatchInfo.MatchPlayerIncident matchPlayerIncidents = 2; */
        for (let i = 0; i < message.matchPlayerIncidents.length; i++)
            MatchPlayerIncident.internalBinaryWrite(message.matchPlayerIncidents[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.MatchInfo.MatchPlayer
 */
export const MatchPlayer = new MatchPlayer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchPlayerIncident$Type extends MessageType<MatchPlayerIncident> {
    constructor() {
        super("socketProtos.MatchInfo.MatchPlayerIncident", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "assist1Id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "assist2Id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "inPlayerId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "outPlayerId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "homeScore", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "awayScore", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MatchPlayerIncident>): MatchPlayerIncident {
        const message = { type: 0, time: "", assist1Id: 0, assist2Id: 0, inPlayerId: 0, outPlayerId: 0, homeScore: 0, awayScore: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchPlayerIncident>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchPlayerIncident): MatchPlayerIncident {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* string time */ 2:
                    message.time = reader.string();
                    break;
                case /* int32 assist1Id */ 3:
                    message.assist1Id = reader.int32();
                    break;
                case /* int32 assist2Id */ 4:
                    message.assist2Id = reader.int32();
                    break;
                case /* int32 inPlayerId */ 5:
                    message.inPlayerId = reader.int32();
                    break;
                case /* int32 outPlayerId */ 6:
                    message.outPlayerId = reader.int32();
                    break;
                case /* int32 homeScore */ 7:
                    message.homeScore = reader.int32();
                    break;
                case /* int32 awayScore */ 8:
                    message.awayScore = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchPlayerIncident, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* string time = 2; */
        if (message.time !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.time);
        /* int32 assist1Id = 3; */
        if (message.assist1Id !== 0)
            writer.tag(3, WireType.Varint).int32(message.assist1Id);
        /* int32 assist2Id = 4; */
        if (message.assist2Id !== 0)
            writer.tag(4, WireType.Varint).int32(message.assist2Id);
        /* int32 inPlayerId = 5; */
        if (message.inPlayerId !== 0)
            writer.tag(5, WireType.Varint).int32(message.inPlayerId);
        /* int32 outPlayerId = 6; */
        if (message.outPlayerId !== 0)
            writer.tag(6, WireType.Varint).int32(message.outPlayerId);
        /* int32 homeScore = 7; */
        if (message.homeScore !== 0)
            writer.tag(7, WireType.Varint).int32(message.homeScore);
        /* int32 awayScore = 8; */
        if (message.awayScore !== 0)
            writer.tag(8, WireType.Varint).int32(message.awayScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.MatchInfo.MatchPlayerIncident
 */
export const MatchPlayerIncident = new MatchPlayerIncident$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchLineup$Type extends MessageType<MatchLineup> {
    constructor() {
        super("socketProtos.MatchInfo.MatchLineup", [
            { no: 1, name: "command", kind: "enum", T: () => ["socketProtos.command.Command", Command] },
            { no: 2, name: "homePlayers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchPlayer },
            { no: 3, name: "awayPlayers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchPlayer }
        ]);
    }
    create(value?: PartialMessage<MatchLineup>): MatchLineup {
        const message = { command: 0, homePlayers: [], awayPlayers: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchLineup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchLineup): MatchLineup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* socketProtos.command.Command command */ 1:
                    message.command = reader.int32();
                    break;
                case /* repeated socketProtos.MatchInfo.MatchPlayer homePlayers */ 2:
                    message.homePlayers.push(MatchPlayer.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated socketProtos.MatchInfo.MatchPlayer awayPlayers */ 3:
                    message.awayPlayers.push(MatchPlayer.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchLineup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* socketProtos.command.Command command = 1; */
        if (message.command !== 0)
            writer.tag(1, WireType.Varint).int32(message.command);
        /* repeated socketProtos.MatchInfo.MatchPlayer homePlayers = 2; */
        for (let i = 0; i < message.homePlayers.length; i++)
            MatchPlayer.internalBinaryWrite(message.homePlayers[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated socketProtos.MatchInfo.MatchPlayer awayPlayers = 3; */
        for (let i = 0; i < message.awayPlayers.length; i++)
            MatchPlayer.internalBinaryWrite(message.awayPlayers[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.MatchInfo.MatchLineup
 */
export const MatchLineup = new MatchLineup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NewMatches$Type extends MessageType<NewMatches> {
    constructor() {
        super("socketProtos.MatchInfo.NewMatches", [
            { no: 1, name: "command", kind: "enum", T: () => ["socketProtos.command.Command", Command] },
            { no: 2, name: "areas", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Area },
            { no: 3, name: "matches", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchData }
        ]);
    }
    create(value?: PartialMessage<NewMatches>): NewMatches {
        const message = { command: 0, areas: [], matches: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NewMatches>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NewMatches): NewMatches {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* socketProtos.command.Command command */ 1:
                    message.command = reader.int32();
                    break;
                case /* repeated socketProtos.MatchInfo.Area areas */ 2:
                    message.areas.push(Area.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated socketProtos.MatchInfo.MatchData matches */ 3:
                    message.matches.push(MatchData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NewMatches, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* socketProtos.command.Command command = 1; */
        if (message.command !== 0)
            writer.tag(1, WireType.Varint).int32(message.command);
        /* repeated socketProtos.MatchInfo.Area areas = 2; */
        for (let i = 0; i < message.areas.length; i++)
            Area.internalBinaryWrite(message.areas[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated socketProtos.MatchInfo.MatchData matches = 3; */
        for (let i = 0; i < message.matches.length; i++)
            MatchData.internalBinaryWrite(message.matches[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.MatchInfo.NewMatches
 */
export const NewMatches = new NewMatches$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Area$Type extends MessageType<Area> {
    constructor() {
        super("socketProtos.MatchInfo.Area", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "countries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Country }
        ]);
    }
    create(value?: PartialMessage<Area>): Area {
        const message = { id: 0, name: "", countries: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Area>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Area): Area {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* repeated socketProtos.MatchInfo.Country countries */ 3:
                    message.countries.push(Country.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Area, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* repeated socketProtos.MatchInfo.Country countries = 3; */
        for (let i = 0; i < message.countries.length; i++)
            Country.internalBinaryWrite(message.countries[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.MatchInfo.Area
 */
export const Area = new Area$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Country$Type extends MessageType<Country> {
    constructor() {
        super("socketProtos.MatchInfo.Country", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "leagues", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => League }
        ]);
    }
    create(value?: PartialMessage<Country>): Country {
        const message = { id: 0, name: "", leagues: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Country>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Country): Country {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* repeated socketProtos.MatchInfo.League leagues */ 3:
                    message.leagues.push(League.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Country, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* repeated socketProtos.MatchInfo.League leagues = 3; */
        for (let i = 0; i < message.leagues.length; i++)
            League.internalBinaryWrite(message.leagues[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.MatchInfo.Country
 */
export const Country = new Country$Type();
// @generated message type with reflection information, may provide speed optimized methods
class League$Type extends MessageType<League> {
    constructor() {
        super("socketProtos.MatchInfo.League", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<League>): League {
        const message = { id: 0, name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<League>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: League): League {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: League, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.MatchInfo.League
 */
export const League = new League$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchData$Type extends MessageType<MatchData> {
    constructor() {
        super("socketProtos.MatchInfo.MatchData", [
            { no: 1, name: "matchId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "openDate", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "startTime", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "areaId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "countryId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "leagueId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "leagueName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "leagueLogo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "homeId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "awayId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "homeName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "awayName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "homeLogo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "awayLogo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "homeScore", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 17, name: "awayScore", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 18, name: "homeHalfScore", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 19, name: "awayHalfScore", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 20, name: "homeRedCard", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 21, name: "awayRedCard", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 22, name: "homeYellowCard", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 23, name: "awayYellowCard", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 24, name: "homeCorner", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 25, name: "awayCorner", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 26, name: "animation", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 27, name: "liveStreamings", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LiveStreamProvider },
            { no: 28, name: "fullGameTime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 29, name: "neutral", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 30, name: "round", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 31, name: "betsCount", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 32, name: "hasStatistics", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 33, name: "scoreStatistics", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ScoreStatistics },
            { no: 34, name: "oddStatistics", kind: "message", T: () => OddStatistics },
            { no: 35, name: "tgOdds", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TgOdd },
            { no: 36, name: "odds", kind: "message", T: () => OddIndexs },
            { no: 37, name: "views", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MatchData>): MatchData {
        const message = { matchId: 0, status: 0, openDate: 0, startTime: 0, areaId: 0, countryId: 0, leagueId: 0, leagueName: "", leagueLogo: "", homeId: 0, awayId: 0, homeName: "", awayName: "", homeLogo: "", awayLogo: "", homeScore: 0, awayScore: 0, homeHalfScore: 0, awayHalfScore: 0, homeRedCard: 0, awayRedCard: 0, homeYellowCard: 0, awayYellowCard: 0, homeCorner: 0, awayCorner: 0, animation: "", liveStreamings: [], fullGameTime: "", neutral: 0, round: 0, betsCount: 0, hasStatistics: false, scoreStatistics: [], tgOdds: [], views: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchData): MatchData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 matchId */ 1:
                    message.matchId = reader.int32();
                    break;
                case /* int32 status */ 2:
                    message.status = reader.int32();
                    break;
                case /* int32 openDate */ 3:
                    message.openDate = reader.int32();
                    break;
                case /* int32 startTime */ 4:
                    message.startTime = reader.int32();
                    break;
                case /* int32 areaId */ 5:
                    message.areaId = reader.int32();
                    break;
                case /* int32 countryId */ 6:
                    message.countryId = reader.int32();
                    break;
                case /* int32 leagueId */ 7:
                    message.leagueId = reader.int32();
                    break;
                case /* string leagueName */ 8:
                    message.leagueName = reader.string();
                    break;
                case /* string leagueLogo */ 9:
                    message.leagueLogo = reader.string();
                    break;
                case /* int32 homeId */ 10:
                    message.homeId = reader.int32();
                    break;
                case /* int32 awayId */ 11:
                    message.awayId = reader.int32();
                    break;
                case /* string homeName */ 12:
                    message.homeName = reader.string();
                    break;
                case /* string awayName */ 13:
                    message.awayName = reader.string();
                    break;
                case /* string homeLogo */ 14:
                    message.homeLogo = reader.string();
                    break;
                case /* string awayLogo */ 15:
                    message.awayLogo = reader.string();
                    break;
                case /* int32 homeScore */ 16:
                    message.homeScore = reader.int32();
                    break;
                case /* int32 awayScore */ 17:
                    message.awayScore = reader.int32();
                    break;
                case /* int32 homeHalfScore */ 18:
                    message.homeHalfScore = reader.int32();
                    break;
                case /* int32 awayHalfScore */ 19:
                    message.awayHalfScore = reader.int32();
                    break;
                case /* int32 homeRedCard */ 20:
                    message.homeRedCard = reader.int32();
                    break;
                case /* int32 awayRedCard */ 21:
                    message.awayRedCard = reader.int32();
                    break;
                case /* int32 homeYellowCard */ 22:
                    message.homeYellowCard = reader.int32();
                    break;
                case /* int32 awayYellowCard */ 23:
                    message.awayYellowCard = reader.int32();
                    break;
                case /* int32 homeCorner */ 24:
                    message.homeCorner = reader.int32();
                    break;
                case /* int32 awayCorner */ 25:
                    message.awayCorner = reader.int32();
                    break;
                case /* string animation */ 26:
                    message.animation = reader.string();
                    break;
                case /* repeated socketProtos.MatchInfo.LiveStreamProvider liveStreamings */ 27:
                    message.liveStreamings.push(LiveStreamProvider.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string fullGameTime */ 28:
                    message.fullGameTime = reader.string();
                    break;
                case /* int32 neutral */ 29:
                    message.neutral = reader.int32();
                    break;
                case /* int32 round */ 30:
                    message.round = reader.int32();
                    break;
                case /* int32 betsCount */ 31:
                    message.betsCount = reader.int32();
                    break;
                case /* bool hasStatistics */ 32:
                    message.hasStatistics = reader.bool();
                    break;
                case /* repeated socketProtos.MatchInfo.ScoreStatistics scoreStatistics */ 33:
                    message.scoreStatistics.push(ScoreStatistics.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* socketProtos.MatchInfo.OddStatistics oddStatistics */ 34:
                    message.oddStatistics = OddStatistics.internalBinaryRead(reader, reader.uint32(), options, message.oddStatistics);
                    break;
                case /* repeated socketProtos.MatchInfo.TgOdd tgOdds */ 35:
                    message.tgOdds.push(TgOdd.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* socketProtos.MatchInfo.OddIndexs odds */ 36:
                    message.odds = OddIndexs.internalBinaryRead(reader, reader.uint32(), options, message.odds);
                    break;
                case /* int32 views */ 37:
                    message.views = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 matchId = 1; */
        if (message.matchId !== 0)
            writer.tag(1, WireType.Varint).int32(message.matchId);
        /* int32 status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        /* int32 openDate = 3; */
        if (message.openDate !== 0)
            writer.tag(3, WireType.Varint).int32(message.openDate);
        /* int32 startTime = 4; */
        if (message.startTime !== 0)
            writer.tag(4, WireType.Varint).int32(message.startTime);
        /* int32 areaId = 5; */
        if (message.areaId !== 0)
            writer.tag(5, WireType.Varint).int32(message.areaId);
        /* int32 countryId = 6; */
        if (message.countryId !== 0)
            writer.tag(6, WireType.Varint).int32(message.countryId);
        /* int32 leagueId = 7; */
        if (message.leagueId !== 0)
            writer.tag(7, WireType.Varint).int32(message.leagueId);
        /* string leagueName = 8; */
        if (message.leagueName !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.leagueName);
        /* string leagueLogo = 9; */
        if (message.leagueLogo !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.leagueLogo);
        /* int32 homeId = 10; */
        if (message.homeId !== 0)
            writer.tag(10, WireType.Varint).int32(message.homeId);
        /* int32 awayId = 11; */
        if (message.awayId !== 0)
            writer.tag(11, WireType.Varint).int32(message.awayId);
        /* string homeName = 12; */
        if (message.homeName !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.homeName);
        /* string awayName = 13; */
        if (message.awayName !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.awayName);
        /* string homeLogo = 14; */
        if (message.homeLogo !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.homeLogo);
        /* string awayLogo = 15; */
        if (message.awayLogo !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.awayLogo);
        /* int32 homeScore = 16; */
        if (message.homeScore !== 0)
            writer.tag(16, WireType.Varint).int32(message.homeScore);
        /* int32 awayScore = 17; */
        if (message.awayScore !== 0)
            writer.tag(17, WireType.Varint).int32(message.awayScore);
        /* int32 homeHalfScore = 18; */
        if (message.homeHalfScore !== 0)
            writer.tag(18, WireType.Varint).int32(message.homeHalfScore);
        /* int32 awayHalfScore = 19; */
        if (message.awayHalfScore !== 0)
            writer.tag(19, WireType.Varint).int32(message.awayHalfScore);
        /* int32 homeRedCard = 20; */
        if (message.homeRedCard !== 0)
            writer.tag(20, WireType.Varint).int32(message.homeRedCard);
        /* int32 awayRedCard = 21; */
        if (message.awayRedCard !== 0)
            writer.tag(21, WireType.Varint).int32(message.awayRedCard);
        /* int32 homeYellowCard = 22; */
        if (message.homeYellowCard !== 0)
            writer.tag(22, WireType.Varint).int32(message.homeYellowCard);
        /* int32 awayYellowCard = 23; */
        if (message.awayYellowCard !== 0)
            writer.tag(23, WireType.Varint).int32(message.awayYellowCard);
        /* int32 homeCorner = 24; */
        if (message.homeCorner !== 0)
            writer.tag(24, WireType.Varint).int32(message.homeCorner);
        /* int32 awayCorner = 25; */
        if (message.awayCorner !== 0)
            writer.tag(25, WireType.Varint).int32(message.awayCorner);
        /* string animation = 26; */
        if (message.animation !== "")
            writer.tag(26, WireType.LengthDelimited).string(message.animation);
        /* repeated socketProtos.MatchInfo.LiveStreamProvider liveStreamings = 27; */
        for (let i = 0; i < message.liveStreamings.length; i++)
            LiveStreamProvider.internalBinaryWrite(message.liveStreamings[i], writer.tag(27, WireType.LengthDelimited).fork(), options).join();
        /* string fullGameTime = 28; */
        if (message.fullGameTime !== "")
            writer.tag(28, WireType.LengthDelimited).string(message.fullGameTime);
        /* int32 neutral = 29; */
        if (message.neutral !== 0)
            writer.tag(29, WireType.Varint).int32(message.neutral);
        /* int32 round = 30; */
        if (message.round !== 0)
            writer.tag(30, WireType.Varint).int32(message.round);
        /* int32 betsCount = 31; */
        if (message.betsCount !== 0)
            writer.tag(31, WireType.Varint).int32(message.betsCount);
        /* bool hasStatistics = 32; */
        if (message.hasStatistics !== false)
            writer.tag(32, WireType.Varint).bool(message.hasStatistics);
        /* repeated socketProtos.MatchInfo.ScoreStatistics scoreStatistics = 33; */
        for (let i = 0; i < message.scoreStatistics.length; i++)
            ScoreStatistics.internalBinaryWrite(message.scoreStatistics[i], writer.tag(33, WireType.LengthDelimited).fork(), options).join();
        /* socketProtos.MatchInfo.OddStatistics oddStatistics = 34; */
        if (message.oddStatistics)
            OddStatistics.internalBinaryWrite(message.oddStatistics, writer.tag(34, WireType.LengthDelimited).fork(), options).join();
        /* repeated socketProtos.MatchInfo.TgOdd tgOdds = 35; */
        for (let i = 0; i < message.tgOdds.length; i++)
            TgOdd.internalBinaryWrite(message.tgOdds[i], writer.tag(35, WireType.LengthDelimited).fork(), options).join();
        /* socketProtos.MatchInfo.OddIndexs odds = 36; */
        if (message.odds)
            OddIndexs.internalBinaryWrite(message.odds, writer.tag(36, WireType.LengthDelimited).fork(), options).join();
        /* int32 views = 37; */
        if (message.views !== 0)
            writer.tag(37, WireType.Varint).int32(message.views);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.MatchInfo.MatchData
 */
export const MatchData = new MatchData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScoreStatistics$Type extends MessageType<ScoreStatistics> {
    constructor() {
        super("socketProtos.MatchInfo.ScoreStatistics", [
            { no: 1, name: "selectionName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "homeAppearRate", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "homeContinuedCount", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "awayAppearRate", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "awayContinuedCount", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ScoreStatistics>): ScoreStatistics {
        const message = { selectionName: "", homeAppearRate: "", homeContinuedCount: 0, awayAppearRate: "", awayContinuedCount: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScoreStatistics>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScoreStatistics): ScoreStatistics {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string selectionName */ 1:
                    message.selectionName = reader.string();
                    break;
                case /* string homeAppearRate */ 2:
                    message.homeAppearRate = reader.string();
                    break;
                case /* int32 homeContinuedCount */ 3:
                    message.homeContinuedCount = reader.int32();
                    break;
                case /* string awayAppearRate */ 4:
                    message.awayAppearRate = reader.string();
                    break;
                case /* int32 awayContinuedCount */ 5:
                    message.awayContinuedCount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScoreStatistics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string selectionName = 1; */
        if (message.selectionName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.selectionName);
        /* string homeAppearRate = 2; */
        if (message.homeAppearRate !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.homeAppearRate);
        /* int32 homeContinuedCount = 3; */
        if (message.homeContinuedCount !== 0)
            writer.tag(3, WireType.Varint).int32(message.homeContinuedCount);
        /* string awayAppearRate = 4; */
        if (message.awayAppearRate !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.awayAppearRate);
        /* int32 awayContinuedCount = 5; */
        if (message.awayContinuedCount !== 0)
            writer.tag(5, WireType.Varint).int32(message.awayContinuedCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.MatchInfo.ScoreStatistics
 */
export const ScoreStatistics = new ScoreStatistics$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OddStatistics$Type extends MessageType<OddStatistics> {
    constructor() {
        super("socketProtos.MatchInfo.OddStatistics", [
            { no: 1, name: "win", kind: "message", T: () => OddStatisticsDetail },
            { no: 2, name: "lost", kind: "message", T: () => OddStatisticsDetail },
            { no: 3, name: "peace", kind: "message", T: () => OddStatisticsDetail },
            { no: 4, name: "asiaWin", kind: "message", T: () => OddStatisticsDetail },
            { no: 5, name: "asiaLost", kind: "message", T: () => OddStatisticsDetail },
            { no: 6, name: "asiaPeace", kind: "message", T: () => OddStatisticsDetail },
            { no: 7, name: "overBall", kind: "message", T: () => OddStatisticsDetail },
            { no: 8, name: "underBall", kind: "message", T: () => OddStatisticsDetail },
            { no: 9, name: "peaceBall", kind: "message", T: () => OddStatisticsDetail }
        ]);
    }
    create(value?: PartialMessage<OddStatistics>): OddStatistics {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OddStatistics>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OddStatistics): OddStatistics {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* socketProtos.MatchInfo.OddStatisticsDetail win */ 1:
                    message.win = OddStatisticsDetail.internalBinaryRead(reader, reader.uint32(), options, message.win);
                    break;
                case /* socketProtos.MatchInfo.OddStatisticsDetail lost */ 2:
                    message.lost = OddStatisticsDetail.internalBinaryRead(reader, reader.uint32(), options, message.lost);
                    break;
                case /* socketProtos.MatchInfo.OddStatisticsDetail peace */ 3:
                    message.peace = OddStatisticsDetail.internalBinaryRead(reader, reader.uint32(), options, message.peace);
                    break;
                case /* socketProtos.MatchInfo.OddStatisticsDetail asiaWin */ 4:
                    message.asiaWin = OddStatisticsDetail.internalBinaryRead(reader, reader.uint32(), options, message.asiaWin);
                    break;
                case /* socketProtos.MatchInfo.OddStatisticsDetail asiaLost */ 5:
                    message.asiaLost = OddStatisticsDetail.internalBinaryRead(reader, reader.uint32(), options, message.asiaLost);
                    break;
                case /* socketProtos.MatchInfo.OddStatisticsDetail asiaPeace */ 6:
                    message.asiaPeace = OddStatisticsDetail.internalBinaryRead(reader, reader.uint32(), options, message.asiaPeace);
                    break;
                case /* socketProtos.MatchInfo.OddStatisticsDetail overBall */ 7:
                    message.overBall = OddStatisticsDetail.internalBinaryRead(reader, reader.uint32(), options, message.overBall);
                    break;
                case /* socketProtos.MatchInfo.OddStatisticsDetail underBall */ 8:
                    message.underBall = OddStatisticsDetail.internalBinaryRead(reader, reader.uint32(), options, message.underBall);
                    break;
                case /* socketProtos.MatchInfo.OddStatisticsDetail peaceBall */ 9:
                    message.peaceBall = OddStatisticsDetail.internalBinaryRead(reader, reader.uint32(), options, message.peaceBall);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OddStatistics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* socketProtos.MatchInfo.OddStatisticsDetail win = 1; */
        if (message.win)
            OddStatisticsDetail.internalBinaryWrite(message.win, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* socketProtos.MatchInfo.OddStatisticsDetail lost = 2; */
        if (message.lost)
            OddStatisticsDetail.internalBinaryWrite(message.lost, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* socketProtos.MatchInfo.OddStatisticsDetail peace = 3; */
        if (message.peace)
            OddStatisticsDetail.internalBinaryWrite(message.peace, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* socketProtos.MatchInfo.OddStatisticsDetail asiaWin = 4; */
        if (message.asiaWin)
            OddStatisticsDetail.internalBinaryWrite(message.asiaWin, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* socketProtos.MatchInfo.OddStatisticsDetail asiaLost = 5; */
        if (message.asiaLost)
            OddStatisticsDetail.internalBinaryWrite(message.asiaLost, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* socketProtos.MatchInfo.OddStatisticsDetail asiaPeace = 6; */
        if (message.asiaPeace)
            OddStatisticsDetail.internalBinaryWrite(message.asiaPeace, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* socketProtos.MatchInfo.OddStatisticsDetail overBall = 7; */
        if (message.overBall)
            OddStatisticsDetail.internalBinaryWrite(message.overBall, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* socketProtos.MatchInfo.OddStatisticsDetail underBall = 8; */
        if (message.underBall)
            OddStatisticsDetail.internalBinaryWrite(message.underBall, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* socketProtos.MatchInfo.OddStatisticsDetail peaceBall = 9; */
        if (message.peaceBall)
            OddStatisticsDetail.internalBinaryWrite(message.peaceBall, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.MatchInfo.OddStatistics
 */
export const OddStatistics = new OddStatistics$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OddStatisticsDetail$Type extends MessageType<OddStatisticsDetail> {
    constructor() {
        super("socketProtos.MatchInfo.OddStatisticsDetail", [
            { no: 1, name: "homeAppearCnt", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "homeAppearRate", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "homeContinuedCount", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "awayAppearCnt", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "awayAppearRate", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "awayContinuedCount", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<OddStatisticsDetail>): OddStatisticsDetail {
        const message = { homeAppearCnt: 0, homeAppearRate: "", homeContinuedCount: 0, awayAppearCnt: 0, awayAppearRate: "", awayContinuedCount: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OddStatisticsDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OddStatisticsDetail): OddStatisticsDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 homeAppearCnt */ 1:
                    message.homeAppearCnt = reader.int32();
                    break;
                case /* string homeAppearRate */ 2:
                    message.homeAppearRate = reader.string();
                    break;
                case /* int32 homeContinuedCount */ 3:
                    message.homeContinuedCount = reader.int32();
                    break;
                case /* int32 awayAppearCnt */ 4:
                    message.awayAppearCnt = reader.int32();
                    break;
                case /* string awayAppearRate */ 5:
                    message.awayAppearRate = reader.string();
                    break;
                case /* int32 awayContinuedCount */ 6:
                    message.awayContinuedCount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OddStatisticsDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 homeAppearCnt = 1; */
        if (message.homeAppearCnt !== 0)
            writer.tag(1, WireType.Varint).int32(message.homeAppearCnt);
        /* string homeAppearRate = 2; */
        if (message.homeAppearRate !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.homeAppearRate);
        /* int32 homeContinuedCount = 3; */
        if (message.homeContinuedCount !== 0)
            writer.tag(3, WireType.Varint).int32(message.homeContinuedCount);
        /* int32 awayAppearCnt = 4; */
        if (message.awayAppearCnt !== 0)
            writer.tag(4, WireType.Varint).int32(message.awayAppearCnt);
        /* string awayAppearRate = 5; */
        if (message.awayAppearRate !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.awayAppearRate);
        /* int32 awayContinuedCount = 6; */
        if (message.awayContinuedCount !== 0)
            writer.tag(6, WireType.Varint).int32(message.awayContinuedCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.MatchInfo.OddStatisticsDetail
 */
export const OddStatisticsDetail = new OddStatisticsDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TgOdd$Type extends MessageType<TgOdd> {
    constructor() {
        super("socketProtos.MatchInfo.TgOdd", [
            { no: 1, name: "selectionName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "transaction", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "profit", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "betMoney", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "isPopular", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "isSoldOut", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TgOdd>): TgOdd {
        const message = { selectionName: "", transaction: "", profit: "", betMoney: "", isPopular: 0, isSoldOut: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TgOdd>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TgOdd): TgOdd {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string selectionName */ 1:
                    message.selectionName = reader.string();
                    break;
                case /* string transaction */ 2:
                    message.transaction = reader.string();
                    break;
                case /* string profit */ 3:
                    message.profit = reader.string();
                    break;
                case /* string betMoney */ 4:
                    message.betMoney = reader.string();
                    break;
                case /* int32 isPopular */ 5:
                    message.isPopular = reader.int32();
                    break;
                case /* int32 isSoldOut */ 6:
                    message.isSoldOut = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TgOdd, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string selectionName = 1; */
        if (message.selectionName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.selectionName);
        /* string transaction = 2; */
        if (message.transaction !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.transaction);
        /* string profit = 3; */
        if (message.profit !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.profit);
        /* string betMoney = 4; */
        if (message.betMoney !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.betMoney);
        /* int32 isPopular = 5; */
        if (message.isPopular !== 0)
            writer.tag(5, WireType.Varint).int32(message.isPopular);
        /* int32 isSoldOut = 6; */
        if (message.isSoldOut !== 0)
            writer.tag(6, WireType.Varint).int32(message.isSoldOut);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.MatchInfo.TgOdd
 */
export const TgOdd = new TgOdd$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OddIndexs$Type extends MessageType<OddIndexs> {
    constructor() {
        super("socketProtos.MatchInfo.OddIndexs", [
            { no: 1, name: "asia", kind: "message", T: () => OddIndexItem },
            { no: 2, name: "eu", kind: "message", T: () => OddIndexItem },
            { no: 3, name: "bs", kind: "message", T: () => OddIndexItem },
            { no: 4, name: "cr", kind: "message", T: () => OddIndexItem }
        ]);
    }
    create(value?: PartialMessage<OddIndexs>): OddIndexs {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OddIndexs>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OddIndexs): OddIndexs {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* socketProtos.MatchInfo.OddIndexItem asia */ 1:
                    message.asia = OddIndexItem.internalBinaryRead(reader, reader.uint32(), options, message.asia);
                    break;
                case /* socketProtos.MatchInfo.OddIndexItem eu */ 2:
                    message.eu = OddIndexItem.internalBinaryRead(reader, reader.uint32(), options, message.eu);
                    break;
                case /* socketProtos.MatchInfo.OddIndexItem bs */ 3:
                    message.bs = OddIndexItem.internalBinaryRead(reader, reader.uint32(), options, message.bs);
                    break;
                case /* socketProtos.MatchInfo.OddIndexItem cr */ 4:
                    message.cr = OddIndexItem.internalBinaryRead(reader, reader.uint32(), options, message.cr);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OddIndexs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* socketProtos.MatchInfo.OddIndexItem asia = 1; */
        if (message.asia)
            OddIndexItem.internalBinaryWrite(message.asia, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* socketProtos.MatchInfo.OddIndexItem eu = 2; */
        if (message.eu)
            OddIndexItem.internalBinaryWrite(message.eu, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* socketProtos.MatchInfo.OddIndexItem bs = 3; */
        if (message.bs)
            OddIndexItem.internalBinaryWrite(message.bs, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* socketProtos.MatchInfo.OddIndexItem cr = 4; */
        if (message.cr)
            OddIndexItem.internalBinaryWrite(message.cr, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.MatchInfo.OddIndexs
 */
export const OddIndexs = new OddIndexs$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OddIndexItem$Type extends MessageType<OddIndexItem> {
    constructor() {
        super("socketProtos.MatchInfo.OddIndexItem", [
            { no: 1, name: "companyID", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "companyName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "first", kind: "message", T: () => OddIndexDetail },
            { no: 4, name: "latest", kind: "message", T: () => OddIndexDetail },
            { no: 5, name: "live", kind: "message", T: () => OddIndexDetail },
            { no: 6, name: "closed", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<OddIndexItem>): OddIndexItem {
        const message = { companyID: 0, companyName: "", closed: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OddIndexItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OddIndexItem): OddIndexItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 companyID */ 1:
                    message.companyID = reader.int32();
                    break;
                case /* string companyName */ 2:
                    message.companyName = reader.string();
                    break;
                case /* socketProtos.MatchInfo.OddIndexDetail first */ 3:
                    message.first = OddIndexDetail.internalBinaryRead(reader, reader.uint32(), options, message.first);
                    break;
                case /* socketProtos.MatchInfo.OddIndexDetail latest */ 4:
                    message.latest = OddIndexDetail.internalBinaryRead(reader, reader.uint32(), options, message.latest);
                    break;
                case /* socketProtos.MatchInfo.OddIndexDetail live */ 5:
                    message.live = OddIndexDetail.internalBinaryRead(reader, reader.uint32(), options, message.live);
                    break;
                case /* int32 closed */ 6:
                    message.closed = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OddIndexItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 companyID = 1; */
        if (message.companyID !== 0)
            writer.tag(1, WireType.Varint).int32(message.companyID);
        /* string companyName = 2; */
        if (message.companyName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.companyName);
        /* socketProtos.MatchInfo.OddIndexDetail first = 3; */
        if (message.first)
            OddIndexDetail.internalBinaryWrite(message.first, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* socketProtos.MatchInfo.OddIndexDetail latest = 4; */
        if (message.latest)
            OddIndexDetail.internalBinaryWrite(message.latest, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* socketProtos.MatchInfo.OddIndexDetail live = 5; */
        if (message.live)
            OddIndexDetail.internalBinaryWrite(message.live, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int32 closed = 6; */
        if (message.closed !== 0)
            writer.tag(6, WireType.Varint).int32(message.closed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.MatchInfo.OddIndexItem
 */
export const OddIndexItem = new OddIndexItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OddIndexDetail$Type extends MessageType<OddIndexDetail> {
    constructor() {
        super("socketProtos.MatchInfo.OddIndexDetail", [
            { no: 1, name: "home", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "handicap", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "away", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<OddIndexDetail>): OddIndexDetail {
        const message = { home: "", handicap: "", away: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OddIndexDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OddIndexDetail): OddIndexDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string home */ 1:
                    message.home = reader.string();
                    break;
                case /* string handicap */ 2:
                    message.handicap = reader.string();
                    break;
                case /* string away */ 3:
                    message.away = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OddIndexDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string home = 1; */
        if (message.home !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.home);
        /* string handicap = 2; */
        if (message.handicap !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.handicap);
        /* string away = 3; */
        if (message.away !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.away);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.MatchInfo.OddIndexDetail
 */
export const OddIndexDetail = new OddIndexDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PopularMatches$Type extends MessageType<PopularMatches> {
    constructor() {
        super("socketProtos.MatchInfo.PopularMatches", [
            { no: 1, name: "command", kind: "enum", T: () => ["socketProtos.command.Command", Command] },
            { no: 2, name: "matches", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PopularMatches_PopularMatch }
        ]);
    }
    create(value?: PartialMessage<PopularMatches>): PopularMatches {
        const message = { command: 0, matches: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PopularMatches>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PopularMatches): PopularMatches {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* socketProtos.command.Command command */ 1:
                    message.command = reader.int32();
                    break;
                case /* repeated socketProtos.MatchInfo.PopularMatches.PopularMatch matches */ 2:
                    message.matches.push(PopularMatches_PopularMatch.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PopularMatches, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* socketProtos.command.Command command = 1; */
        if (message.command !== 0)
            writer.tag(1, WireType.Varint).int32(message.command);
        /* repeated socketProtos.MatchInfo.PopularMatches.PopularMatch matches = 2; */
        for (let i = 0; i < message.matches.length; i++)
            PopularMatches_PopularMatch.internalBinaryWrite(message.matches[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.MatchInfo.PopularMatches
 */
export const PopularMatches = new PopularMatches$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PopularMatches_PopularIndex$Type extends MessageType<PopularMatches_PopularIndex> {
    constructor() {
        super("socketProtos.MatchInfo.PopularMatches.PopularIndex", [
            { no: 1, name: "home", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "handicap", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "away", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "closed", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PopularMatches_PopularIndex>): PopularMatches_PopularIndex {
        const message = { home: "", handicap: "", away: "", closed: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PopularMatches_PopularIndex>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PopularMatches_PopularIndex): PopularMatches_PopularIndex {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string home */ 1:
                    message.home = reader.string();
                    break;
                case /* string handicap */ 2:
                    message.handicap = reader.string();
                    break;
                case /* string away */ 3:
                    message.away = reader.string();
                    break;
                case /* int32 closed */ 4:
                    message.closed = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PopularMatches_PopularIndex, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string home = 1; */
        if (message.home !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.home);
        /* string handicap = 2; */
        if (message.handicap !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.handicap);
        /* string away = 3; */
        if (message.away !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.away);
        /* int32 closed = 4; */
        if (message.closed !== 0)
            writer.tag(4, WireType.Varint).int32(message.closed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.MatchInfo.PopularMatches.PopularIndex
 */
export const PopularMatches_PopularIndex = new PopularMatches_PopularIndex$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PopularMatches_PopularOdds$Type extends MessageType<PopularMatches_PopularOdds> {
    constructor() {
        super("socketProtos.MatchInfo.PopularMatches.PopularOdds", [
            { no: 1, name: "asia", kind: "message", T: () => PopularMatches_PopularIndex },
            { no: 2, name: "eu", kind: "message", T: () => PopularMatches_PopularIndex },
            { no: 3, name: "bs", kind: "message", T: () => PopularMatches_PopularIndex },
            { no: 4, name: "cr", kind: "message", T: () => PopularMatches_PopularIndex }
        ]);
    }
    create(value?: PartialMessage<PopularMatches_PopularOdds>): PopularMatches_PopularOdds {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PopularMatches_PopularOdds>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PopularMatches_PopularOdds): PopularMatches_PopularOdds {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* socketProtos.MatchInfo.PopularMatches.PopularIndex asia */ 1:
                    message.asia = PopularMatches_PopularIndex.internalBinaryRead(reader, reader.uint32(), options, message.asia);
                    break;
                case /* socketProtos.MatchInfo.PopularMatches.PopularIndex eu */ 2:
                    message.eu = PopularMatches_PopularIndex.internalBinaryRead(reader, reader.uint32(), options, message.eu);
                    break;
                case /* socketProtos.MatchInfo.PopularMatches.PopularIndex bs */ 3:
                    message.bs = PopularMatches_PopularIndex.internalBinaryRead(reader, reader.uint32(), options, message.bs);
                    break;
                case /* socketProtos.MatchInfo.PopularMatches.PopularIndex cr */ 4:
                    message.cr = PopularMatches_PopularIndex.internalBinaryRead(reader, reader.uint32(), options, message.cr);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PopularMatches_PopularOdds, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* socketProtos.MatchInfo.PopularMatches.PopularIndex asia = 1; */
        if (message.asia)
            PopularMatches_PopularIndex.internalBinaryWrite(message.asia, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* socketProtos.MatchInfo.PopularMatches.PopularIndex eu = 2; */
        if (message.eu)
            PopularMatches_PopularIndex.internalBinaryWrite(message.eu, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* socketProtos.MatchInfo.PopularMatches.PopularIndex bs = 3; */
        if (message.bs)
            PopularMatches_PopularIndex.internalBinaryWrite(message.bs, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* socketProtos.MatchInfo.PopularMatches.PopularIndex cr = 4; */
        if (message.cr)
            PopularMatches_PopularIndex.internalBinaryWrite(message.cr, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.MatchInfo.PopularMatches.PopularOdds
 */
export const PopularMatches_PopularOdds = new PopularMatches_PopularOdds$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PopularMatches_PopularMatch$Type extends MessageType<PopularMatches_PopularMatch> {
    constructor() {
        super("socketProtos.MatchInfo.PopularMatches.PopularMatch", [
            { no: 1, name: "matchId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "openDate", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "startTime", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "leagueId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "leagueName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "leagueLogo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "homeId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "awayId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "homeName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "awayName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "homeLogo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "awayLogo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "homeScore", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "awayScore", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 16, name: "homeHalfScore", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 17, name: "awayHalfScore", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 18, name: "homeRedCard", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 19, name: "awayRedCard", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 20, name: "homeYellowCard", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 21, name: "awayYellowCard", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 22, name: "homeCorner", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 23, name: "awayCorner", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 24, name: "animation", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 25, name: "liveStreamings", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LiveStreamProvider },
            { no: 26, name: "views", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 27, name: "neutral", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 28, name: "odds", kind: "message", T: () => PopularMatches_PopularOdds },
            { no: 29, name: "tgOdds", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TgOdd }
        ]);
    }
    create(value?: PartialMessage<PopularMatches_PopularMatch>): PopularMatches_PopularMatch {
        const message = { matchId: 0, status: 0, openDate: 0, startTime: 0, leagueId: 0, leagueName: "", leagueLogo: "", homeId: 0, awayId: 0, homeName: "", awayName: "", homeLogo: "", awayLogo: "", homeScore: 0, awayScore: 0, homeHalfScore: 0, awayHalfScore: 0, homeRedCard: 0, awayRedCard: 0, homeYellowCard: 0, awayYellowCard: 0, homeCorner: 0, awayCorner: 0, animation: "", liveStreamings: [], views: 0, neutral: 0, tgOdds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PopularMatches_PopularMatch>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PopularMatches_PopularMatch): PopularMatches_PopularMatch {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 matchId */ 1:
                    message.matchId = reader.int32();
                    break;
                case /* int32 status */ 2:
                    message.status = reader.int32();
                    break;
                case /* int32 openDate */ 3:
                    message.openDate = reader.int32();
                    break;
                case /* int32 startTime */ 4:
                    message.startTime = reader.int32();
                    break;
                case /* int32 leagueId */ 5:
                    message.leagueId = reader.int32();
                    break;
                case /* string leagueName */ 6:
                    message.leagueName = reader.string();
                    break;
                case /* string leagueLogo */ 7:
                    message.leagueLogo = reader.string();
                    break;
                case /* int32 homeId */ 8:
                    message.homeId = reader.int32();
                    break;
                case /* int32 awayId */ 9:
                    message.awayId = reader.int32();
                    break;
                case /* string homeName */ 10:
                    message.homeName = reader.string();
                    break;
                case /* string awayName */ 11:
                    message.awayName = reader.string();
                    break;
                case /* string homeLogo */ 12:
                    message.homeLogo = reader.string();
                    break;
                case /* string awayLogo */ 13:
                    message.awayLogo = reader.string();
                    break;
                case /* int32 homeScore */ 14:
                    message.homeScore = reader.int32();
                    break;
                case /* int32 awayScore */ 15:
                    message.awayScore = reader.int32();
                    break;
                case /* int32 homeHalfScore */ 16:
                    message.homeHalfScore = reader.int32();
                    break;
                case /* int32 awayHalfScore */ 17:
                    message.awayHalfScore = reader.int32();
                    break;
                case /* int32 homeRedCard */ 18:
                    message.homeRedCard = reader.int32();
                    break;
                case /* int32 awayRedCard */ 19:
                    message.awayRedCard = reader.int32();
                    break;
                case /* int32 homeYellowCard */ 20:
                    message.homeYellowCard = reader.int32();
                    break;
                case /* int32 awayYellowCard */ 21:
                    message.awayYellowCard = reader.int32();
                    break;
                case /* int32 homeCorner */ 22:
                    message.homeCorner = reader.int32();
                    break;
                case /* int32 awayCorner */ 23:
                    message.awayCorner = reader.int32();
                    break;
                case /* string animation */ 24:
                    message.animation = reader.string();
                    break;
                case /* repeated socketProtos.MatchInfo.LiveStreamProvider liveStreamings */ 25:
                    message.liveStreamings.push(LiveStreamProvider.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 views */ 26:
                    message.views = reader.int32();
                    break;
                case /* int32 neutral */ 27:
                    message.neutral = reader.int32();
                    break;
                case /* socketProtos.MatchInfo.PopularMatches.PopularOdds odds */ 28:
                    message.odds = PopularMatches_PopularOdds.internalBinaryRead(reader, reader.uint32(), options, message.odds);
                    break;
                case /* repeated socketProtos.MatchInfo.TgOdd tgOdds */ 29:
                    message.tgOdds.push(TgOdd.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PopularMatches_PopularMatch, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 matchId = 1; */
        if (message.matchId !== 0)
            writer.tag(1, WireType.Varint).int32(message.matchId);
        /* int32 status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        /* int32 openDate = 3; */
        if (message.openDate !== 0)
            writer.tag(3, WireType.Varint).int32(message.openDate);
        /* int32 startTime = 4; */
        if (message.startTime !== 0)
            writer.tag(4, WireType.Varint).int32(message.startTime);
        /* int32 leagueId = 5; */
        if (message.leagueId !== 0)
            writer.tag(5, WireType.Varint).int32(message.leagueId);
        /* string leagueName = 6; */
        if (message.leagueName !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.leagueName);
        /* string leagueLogo = 7; */
        if (message.leagueLogo !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.leagueLogo);
        /* int32 homeId = 8; */
        if (message.homeId !== 0)
            writer.tag(8, WireType.Varint).int32(message.homeId);
        /* int32 awayId = 9; */
        if (message.awayId !== 0)
            writer.tag(9, WireType.Varint).int32(message.awayId);
        /* string homeName = 10; */
        if (message.homeName !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.homeName);
        /* string awayName = 11; */
        if (message.awayName !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.awayName);
        /* string homeLogo = 12; */
        if (message.homeLogo !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.homeLogo);
        /* string awayLogo = 13; */
        if (message.awayLogo !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.awayLogo);
        /* int32 homeScore = 14; */
        if (message.homeScore !== 0)
            writer.tag(14, WireType.Varint).int32(message.homeScore);
        /* int32 awayScore = 15; */
        if (message.awayScore !== 0)
            writer.tag(15, WireType.Varint).int32(message.awayScore);
        /* int32 homeHalfScore = 16; */
        if (message.homeHalfScore !== 0)
            writer.tag(16, WireType.Varint).int32(message.homeHalfScore);
        /* int32 awayHalfScore = 17; */
        if (message.awayHalfScore !== 0)
            writer.tag(17, WireType.Varint).int32(message.awayHalfScore);
        /* int32 homeRedCard = 18; */
        if (message.homeRedCard !== 0)
            writer.tag(18, WireType.Varint).int32(message.homeRedCard);
        /* int32 awayRedCard = 19; */
        if (message.awayRedCard !== 0)
            writer.tag(19, WireType.Varint).int32(message.awayRedCard);
        /* int32 homeYellowCard = 20; */
        if (message.homeYellowCard !== 0)
            writer.tag(20, WireType.Varint).int32(message.homeYellowCard);
        /* int32 awayYellowCard = 21; */
        if (message.awayYellowCard !== 0)
            writer.tag(21, WireType.Varint).int32(message.awayYellowCard);
        /* int32 homeCorner = 22; */
        if (message.homeCorner !== 0)
            writer.tag(22, WireType.Varint).int32(message.homeCorner);
        /* int32 awayCorner = 23; */
        if (message.awayCorner !== 0)
            writer.tag(23, WireType.Varint).int32(message.awayCorner);
        /* string animation = 24; */
        if (message.animation !== "")
            writer.tag(24, WireType.LengthDelimited).string(message.animation);
        /* repeated socketProtos.MatchInfo.LiveStreamProvider liveStreamings = 25; */
        for (let i = 0; i < message.liveStreamings.length; i++)
            LiveStreamProvider.internalBinaryWrite(message.liveStreamings[i], writer.tag(25, WireType.LengthDelimited).fork(), options).join();
        /* int32 views = 26; */
        if (message.views !== 0)
            writer.tag(26, WireType.Varint).int32(message.views);
        /* int32 neutral = 27; */
        if (message.neutral !== 0)
            writer.tag(27, WireType.Varint).int32(message.neutral);
        /* socketProtos.MatchInfo.PopularMatches.PopularOdds odds = 28; */
        if (message.odds)
            PopularMatches_PopularOdds.internalBinaryWrite(message.odds, writer.tag(28, WireType.LengthDelimited).fork(), options).join();
        /* repeated socketProtos.MatchInfo.TgOdd tgOdds = 29; */
        for (let i = 0; i < message.tgOdds.length; i++)
            TgOdd.internalBinaryWrite(message.tgOdds[i], writer.tag(29, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketProtos.MatchInfo.PopularMatches.PopularMatch
 */
export const PopularMatches_PopularMatch = new PopularMatches_PopularMatch$Type();
