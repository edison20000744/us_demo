// @generated by protobuf-ts 2.5.0
// @generated from protobuf file "protobuf/protos/api/web/WebHomeInfo.proto" (package "ApiProtos.Web.WebHomeInfo", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ApiProtos.Web.WebHomeInfo.WebHomeInfo
 */
export interface WebHomeInfo {
    /**
     * @generated from protobuf field: repeated ApiProtos.Web.WebHomeInfo.Banner banners = 1;
     */
    banners: Banner[]; // banner資訊
    /**
     * @generated from protobuf field: repeated ApiProtos.Web.WebHomeInfo.New news = 2;
     */
    news: New[]; // 賽事列表
}
/**
 * @generated from protobuf message ApiProtos.Web.WebHomeInfo.Banner
 */
export interface Banner {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string; // edm title
    /**
     * @generated from protobuf field: int32 type = 2;
     */
    type: number; // image=1, mp4=2, image & linkUrl = 3
    /**
     * @generated from protobuf field: string imgUrl = 3;
     */
    imgUrl: string; // 圖片位置
    /**
     * @generated from protobuf field: string linkUrl = 4;
     */
    linkUrl: string; // 連結位置
}
/**
 * @generated from protobuf message ApiProtos.Web.WebHomeInfo.New
 */
export interface New {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number; // 新聞ID
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string; // 新聞標題
    /**
     * @generated from protobuf field: string imgSrc = 3;
     */
    imgSrc: string; // 圖片位置
    /**
     * @generated from protobuf field: string time = 4;
     */
    time: string; // 新聞發布時間
}
// @generated message type with reflection information, may provide speed optimized methods
class WebHomeInfo$Type extends MessageType<WebHomeInfo> {
    constructor() {
        super("ApiProtos.Web.WebHomeInfo.WebHomeInfo", [
            { no: 1, name: "banners", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Banner },
            { no: 2, name: "news", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => New }
        ]);
    }
    create(value?: PartialMessage<WebHomeInfo>): WebHomeInfo {
        const message = { banners: [], news: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebHomeInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebHomeInfo): WebHomeInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ApiProtos.Web.WebHomeInfo.Banner banners */ 1:
                    message.banners.push(Banner.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ApiProtos.Web.WebHomeInfo.New news */ 2:
                    message.news.push(New.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebHomeInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ApiProtos.Web.WebHomeInfo.Banner banners = 1; */
        for (let i = 0; i < message.banners.length; i++)
            Banner.internalBinaryWrite(message.banners[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Web.WebHomeInfo.New news = 2; */
        for (let i = 0; i < message.news.length; i++)
            New.internalBinaryWrite(message.news[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Web.WebHomeInfo.WebHomeInfo
 */
export const WebHomeInfo = new WebHomeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Banner$Type extends MessageType<Banner> {
    constructor() {
        super("ApiProtos.Web.WebHomeInfo.Banner", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "imgUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "linkUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Banner>): Banner {
        const message = { title: "", type: 0, imgUrl: "", linkUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Banner>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Banner): Banner {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* int32 type */ 2:
                    message.type = reader.int32();
                    break;
                case /* string imgUrl */ 3:
                    message.imgUrl = reader.string();
                    break;
                case /* string linkUrl */ 4:
                    message.linkUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Banner, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* int32 type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* string imgUrl = 3; */
        if (message.imgUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.imgUrl);
        /* string linkUrl = 4; */
        if (message.linkUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.linkUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Web.WebHomeInfo.Banner
 */
export const Banner = new Banner$Type();
// @generated message type with reflection information, may provide speed optimized methods
class New$Type extends MessageType<New> {
    constructor() {
        super("ApiProtos.Web.WebHomeInfo.New", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "imgSrc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "time", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<New>): New {
        const message = { id: 0, title: "", imgSrc: "", time: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<New>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: New): New {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string imgSrc */ 3:
                    message.imgSrc = reader.string();
                    break;
                case /* string time */ 4:
                    message.time = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: New, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string imgSrc = 3; */
        if (message.imgSrc !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.imgSrc);
        /* string time = 4; */
        if (message.time !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.time);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Web.WebHomeInfo.New
 */
export const New = new New$Type();
