// @generated by protobuf-ts 2.5.0
// @generated from protobuf file "protobuf/protos/api/leagues/SeasonTables.proto" (package "ApiProtos.Leagues.SeasonTables", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ApiProtos.Leagues.SeasonTables.SeasonTables
 */
export interface SeasonTables {
    /**
     * @generated from protobuf field: int32 showSeasonId = 1;
     */
    showSeasonId: number; // 當前顯示賽季id
    /**
     * @generated from protobuf field: repeated ApiProtos.Leagues.SeasonTables.SeasonTables.Stage stages = 2;
     */
    stages: SeasonTables_Stage[]; // 賽事階段列表
    /**
     * @generated from protobuf field: repeated ApiProtos.Leagues.SeasonTables.SeasonTables.Rank rank = 3;
     */
    rank: SeasonTables_Rank[]; // 積分榜資料
    /**
     * @generated from protobuf field: repeated ApiProtos.Leagues.SeasonTables.SeasonTables.Team teams = 4;
     */
    teams: SeasonTables_Team[]; // 隊伍列表
}
/**
 * @generated from protobuf message ApiProtos.Leagues.SeasonTables.SeasonTables.Stage
 */
export interface SeasonTables_Stage {
    /**
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number; // 階段id
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string; // 階段名稱
    /**
     * @generated from protobuf field: int32 mode = 3;
     */
    mode: number; // 階段模式 0=淘汰/1=積分
    /**
     * @generated from protobuf field: int32 groupCount = 4;
     */
    groupCount: number; // 总分组数,0表示没有分组
    /**
     * @generated from protobuf field: int32 roundCount = 5;
     */
    roundCount: number; // 总輪数,0表示没有輪次
}
/**
 * @generated from protobuf message ApiProtos.Leagues.SeasonTables.SeasonTables.Rows
 */
export interface SeasonTables_Rows {
    /**
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number; // 隊伍id
    /**
     * @generated from protobuf field: int32 points = 2;
     */
    points: number; // 積分
    /**
     * @generated from protobuf field: int32 position = 3;
     */
    position: number; // 排名
    /**
     * @generated from protobuf field: int32 total = 4;
     */
    total: number; // 總場次
    /**
     * @generated from protobuf field: int32 won = 5;
     */
    won: number; // 獲勝次數
    /**
     * @generated from protobuf field: int32 draw = 6;
     */
    draw: number; // 平手次數
    /**
     * @generated from protobuf field: int32 loss = 7;
     */
    loss: number; // 輸球次數
    /**
     * @generated from protobuf field: int32 goals = 8;
     */
    goals: number; // 進球次數
    /**
     * @generated from protobuf field: int32 goalsAgainst = 9;
     */
    goalsAgainst: number; // 失分次數
    /**
     * @generated from protobuf field: int32 goalDiff = 10;
     */
    goalDiff: number; // 淨勝球
    /**
     * @generated from protobuf field: int32 avgGoals = 11;
     */
    avgGoals: number; // 場均進球
    /**
     * @generated from protobuf field: int32 avgGoalsAgainst = 12;
     */
    avgGoalsAgainst: number; // 場均失球
    /**
     * @generated from protobuf field: int32 avgGoalDiff = 13;
     */
    avgGoalDiff: number; // 場均淨勝
}
/**
 * @generated from protobuf message ApiProtos.Leagues.SeasonTables.SeasonTables.Data
 */
export interface SeasonTables_Data {
    /**
     * @generated from protobuf field: string group = 1;
     */
    group: string; // 分組名稱/若無分組為"0"
    /**
     * @generated from protobuf field: repeated ApiProtos.Leagues.SeasonTables.SeasonTables.Rows rows = 2;
     */
    rows: SeasonTables_Rows[];
}
/**
 * @generated from protobuf message ApiProtos.Leagues.SeasonTables.SeasonTables.Rank
 */
export interface SeasonTables_Rank {
    /**
     * @generated from protobuf field: int32 stageId = 1;
     */
    stageId: number; // 階段id
    /**
     * @generated from protobuf field: repeated ApiProtos.Leagues.SeasonTables.SeasonTables.Data data = 2;
     */
    data: SeasonTables_Data[]; // 積分榜資料
}
/**
 * @generated from protobuf message ApiProtos.Leagues.SeasonTables.SeasonTables.Team
 */
export interface SeasonTables_Team {
    /**
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number; // 隊伍id
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string; // 隊伍名稱
    /**
     * @generated from protobuf field: string logo = 3;
     */
    logo: string; // 隊伍logo
}
// @generated message type with reflection information, may provide speed optimized methods
class SeasonTables$Type extends MessageType<SeasonTables> {
    constructor() {
        super("ApiProtos.Leagues.SeasonTables.SeasonTables", [
            { no: 1, name: "showSeasonId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "stages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SeasonTables_Stage },
            { no: 3, name: "rank", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SeasonTables_Rank },
            { no: 4, name: "teams", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SeasonTables_Team }
        ]);
    }
    create(value?: PartialMessage<SeasonTables>): SeasonTables {
        const message = { showSeasonId: 0, stages: [], rank: [], teams: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SeasonTables>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeasonTables): SeasonTables {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 showSeasonId */ 1:
                    message.showSeasonId = reader.int32();
                    break;
                case /* repeated ApiProtos.Leagues.SeasonTables.SeasonTables.Stage stages */ 2:
                    message.stages.push(SeasonTables_Stage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ApiProtos.Leagues.SeasonTables.SeasonTables.Rank rank */ 3:
                    message.rank.push(SeasonTables_Rank.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ApiProtos.Leagues.SeasonTables.SeasonTables.Team teams */ 4:
                    message.teams.push(SeasonTables_Team.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeasonTables, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 showSeasonId = 1; */
        if (message.showSeasonId !== 0)
            writer.tag(1, WireType.Varint).int32(message.showSeasonId);
        /* repeated ApiProtos.Leagues.SeasonTables.SeasonTables.Stage stages = 2; */
        for (let i = 0; i < message.stages.length; i++)
            SeasonTables_Stage.internalBinaryWrite(message.stages[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Leagues.SeasonTables.SeasonTables.Rank rank = 3; */
        for (let i = 0; i < message.rank.length; i++)
            SeasonTables_Rank.internalBinaryWrite(message.rank[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Leagues.SeasonTables.SeasonTables.Team teams = 4; */
        for (let i = 0; i < message.teams.length; i++)
            SeasonTables_Team.internalBinaryWrite(message.teams[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Leagues.SeasonTables.SeasonTables
 */
export const SeasonTables = new SeasonTables$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeasonTables_Stage$Type extends MessageType<SeasonTables_Stage> {
    constructor() {
        super("ApiProtos.Leagues.SeasonTables.SeasonTables.Stage", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "mode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "groupCount", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "roundCount", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SeasonTables_Stage>): SeasonTables_Stage {
        const message = { id: 0, name: "", mode: 0, groupCount: 0, roundCount: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SeasonTables_Stage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeasonTables_Stage): SeasonTables_Stage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* int32 mode */ 3:
                    message.mode = reader.int32();
                    break;
                case /* int32 groupCount */ 4:
                    message.groupCount = reader.int32();
                    break;
                case /* int32 roundCount */ 5:
                    message.roundCount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeasonTables_Stage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* int32 mode = 3; */
        if (message.mode !== 0)
            writer.tag(3, WireType.Varint).int32(message.mode);
        /* int32 groupCount = 4; */
        if (message.groupCount !== 0)
            writer.tag(4, WireType.Varint).int32(message.groupCount);
        /* int32 roundCount = 5; */
        if (message.roundCount !== 0)
            writer.tag(5, WireType.Varint).int32(message.roundCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Leagues.SeasonTables.SeasonTables.Stage
 */
export const SeasonTables_Stage = new SeasonTables_Stage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeasonTables_Rows$Type extends MessageType<SeasonTables_Rows> {
    constructor() {
        super("ApiProtos.Leagues.SeasonTables.SeasonTables.Rows", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "points", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "position", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "total", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "won", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "draw", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "loss", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "goals", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "goalsAgainst", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "goalDiff", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "avgGoals", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "avgGoalsAgainst", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "avgGoalDiff", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SeasonTables_Rows>): SeasonTables_Rows {
        const message = { id: 0, points: 0, position: 0, total: 0, won: 0, draw: 0, loss: 0, goals: 0, goalsAgainst: 0, goalDiff: 0, avgGoals: 0, avgGoalsAgainst: 0, avgGoalDiff: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SeasonTables_Rows>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeasonTables_Rows): SeasonTables_Rows {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* int32 points */ 2:
                    message.points = reader.int32();
                    break;
                case /* int32 position */ 3:
                    message.position = reader.int32();
                    break;
                case /* int32 total */ 4:
                    message.total = reader.int32();
                    break;
                case /* int32 won */ 5:
                    message.won = reader.int32();
                    break;
                case /* int32 draw */ 6:
                    message.draw = reader.int32();
                    break;
                case /* int32 loss */ 7:
                    message.loss = reader.int32();
                    break;
                case /* int32 goals */ 8:
                    message.goals = reader.int32();
                    break;
                case /* int32 goalsAgainst */ 9:
                    message.goalsAgainst = reader.int32();
                    break;
                case /* int32 goalDiff */ 10:
                    message.goalDiff = reader.int32();
                    break;
                case /* int32 avgGoals */ 11:
                    message.avgGoals = reader.int32();
                    break;
                case /* int32 avgGoalsAgainst */ 12:
                    message.avgGoalsAgainst = reader.int32();
                    break;
                case /* int32 avgGoalDiff */ 13:
                    message.avgGoalDiff = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeasonTables_Rows, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* int32 points = 2; */
        if (message.points !== 0)
            writer.tag(2, WireType.Varint).int32(message.points);
        /* int32 position = 3; */
        if (message.position !== 0)
            writer.tag(3, WireType.Varint).int32(message.position);
        /* int32 total = 4; */
        if (message.total !== 0)
            writer.tag(4, WireType.Varint).int32(message.total);
        /* int32 won = 5; */
        if (message.won !== 0)
            writer.tag(5, WireType.Varint).int32(message.won);
        /* int32 draw = 6; */
        if (message.draw !== 0)
            writer.tag(6, WireType.Varint).int32(message.draw);
        /* int32 loss = 7; */
        if (message.loss !== 0)
            writer.tag(7, WireType.Varint).int32(message.loss);
        /* int32 goals = 8; */
        if (message.goals !== 0)
            writer.tag(8, WireType.Varint).int32(message.goals);
        /* int32 goalsAgainst = 9; */
        if (message.goalsAgainst !== 0)
            writer.tag(9, WireType.Varint).int32(message.goalsAgainst);
        /* int32 goalDiff = 10; */
        if (message.goalDiff !== 0)
            writer.tag(10, WireType.Varint).int32(message.goalDiff);
        /* int32 avgGoals = 11; */
        if (message.avgGoals !== 0)
            writer.tag(11, WireType.Varint).int32(message.avgGoals);
        /* int32 avgGoalsAgainst = 12; */
        if (message.avgGoalsAgainst !== 0)
            writer.tag(12, WireType.Varint).int32(message.avgGoalsAgainst);
        /* int32 avgGoalDiff = 13; */
        if (message.avgGoalDiff !== 0)
            writer.tag(13, WireType.Varint).int32(message.avgGoalDiff);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Leagues.SeasonTables.SeasonTables.Rows
 */
export const SeasonTables_Rows = new SeasonTables_Rows$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeasonTables_Data$Type extends MessageType<SeasonTables_Data> {
    constructor() {
        super("ApiProtos.Leagues.SeasonTables.SeasonTables.Data", [
            { no: 1, name: "group", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "rows", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SeasonTables_Rows }
        ]);
    }
    create(value?: PartialMessage<SeasonTables_Data>): SeasonTables_Data {
        const message = { group: "", rows: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SeasonTables_Data>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeasonTables_Data): SeasonTables_Data {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string group */ 1:
                    message.group = reader.string();
                    break;
                case /* repeated ApiProtos.Leagues.SeasonTables.SeasonTables.Rows rows */ 2:
                    message.rows.push(SeasonTables_Rows.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeasonTables_Data, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string group = 1; */
        if (message.group !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.group);
        /* repeated ApiProtos.Leagues.SeasonTables.SeasonTables.Rows rows = 2; */
        for (let i = 0; i < message.rows.length; i++)
            SeasonTables_Rows.internalBinaryWrite(message.rows[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Leagues.SeasonTables.SeasonTables.Data
 */
export const SeasonTables_Data = new SeasonTables_Data$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeasonTables_Rank$Type extends MessageType<SeasonTables_Rank> {
    constructor() {
        super("ApiProtos.Leagues.SeasonTables.SeasonTables.Rank", [
            { no: 1, name: "stageId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SeasonTables_Data }
        ]);
    }
    create(value?: PartialMessage<SeasonTables_Rank>): SeasonTables_Rank {
        const message = { stageId: 0, data: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SeasonTables_Rank>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeasonTables_Rank): SeasonTables_Rank {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 stageId */ 1:
                    message.stageId = reader.int32();
                    break;
                case /* repeated ApiProtos.Leagues.SeasonTables.SeasonTables.Data data */ 2:
                    message.data.push(SeasonTables_Data.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeasonTables_Rank, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 stageId = 1; */
        if (message.stageId !== 0)
            writer.tag(1, WireType.Varint).int32(message.stageId);
        /* repeated ApiProtos.Leagues.SeasonTables.SeasonTables.Data data = 2; */
        for (let i = 0; i < message.data.length; i++)
            SeasonTables_Data.internalBinaryWrite(message.data[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Leagues.SeasonTables.SeasonTables.Rank
 */
export const SeasonTables_Rank = new SeasonTables_Rank$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeasonTables_Team$Type extends MessageType<SeasonTables_Team> {
    constructor() {
        super("ApiProtos.Leagues.SeasonTables.SeasonTables.Team", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "logo", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SeasonTables_Team>): SeasonTables_Team {
        const message = { id: 0, name: "", logo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SeasonTables_Team>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeasonTables_Team): SeasonTables_Team {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string logo */ 3:
                    message.logo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeasonTables_Team, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string logo = 3; */
        if (message.logo !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.logo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Leagues.SeasonTables.SeasonTables.Team
 */
export const SeasonTables_Team = new SeasonTables_Team$Type();
