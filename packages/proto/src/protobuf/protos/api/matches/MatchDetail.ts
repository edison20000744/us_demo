// @generated by protobuf-ts 2.5.0
// @generated from protobuf file "protobuf/protos/api/matches/MatchDetail.proto" (package "ApiProtos.Matches.MatchDetail", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { MatchIncident } from "../../socket/MatchInfo";
import { LiveStreamProvider } from "../../socket/MatchInfo";
/**
 * @generated from protobuf message ApiProtos.Matches.MatchDetail.MatchDetail
 */
export interface MatchDetail {
    /**
     * @generated from protobuf field: int32 matchId = 1;
     */
    matchId: number; // 賽事ID
    /**
     * @generated from protobuf field: string leagueName = 2;
     */
    leagueName: string; // 聯盟名稱(簡稱)
    /**
     * @generated from protobuf field: string venueName = 3;
     */
    venueName: string; // 比賽場地
    /**
     * @generated from protobuf field: int32 round = 4;
     */
    round: number; // 比賽輪次
    /**
     * @generated from protobuf field: int32 homeId = 5;
     */
    homeId: number; // 主隊ID
    /**
     * @generated from protobuf field: string homeName = 6;
     */
    homeName: string; // 主隊名稱
    /**
     * @generated from protobuf field: string homeLogo = 7;
     */
    homeLogo: string; // 主隊Logo
    /**
     * @generated from protobuf field: int32 homeScore = 8;
     */
    homeScore: number; // 主隊全場比分
    /**
     * @generated from protobuf field: int32 homeHalfScore = 9;
     */
    homeHalfScore: number; // 主隊半場比分
    /**
     * @generated from protobuf field: int32 homeExtend = 10;
     */
    homeExtend: number; // 主隊延長比分(已含常規比分)
    /**
     * @generated from protobuf field: int32 homePenalty = 11;
     */
    homePenalty: number; // 主隊點球大戰比分
    /**
     * @generated from protobuf field: string homeRank = 12;
     */
    homeRank: string; // 主隊排名
    /**
     * @generated from protobuf field: int32 awayId = 13;
     */
    awayId: number; // 客隊ID
    /**
     * @generated from protobuf field: string awayName = 14;
     */
    awayName: string; // 客隊名稱
    /**
     * @generated from protobuf field: string awayLogo = 15;
     */
    awayLogo: string; // 客隊Logo
    /**
     * @generated from protobuf field: int32 awayScore = 16;
     */
    awayScore: number; // 客隊全場比分
    /**
     * @generated from protobuf field: int32 awayHalfScore = 17;
     */
    awayHalfScore: number; // 客隊半場比分
    /**
     * @generated from protobuf field: int32 awayExtend = 18;
     */
    awayExtend: number; // 客隊延長比分(已含常規比分)
    /**
     * @generated from protobuf field: int32 awayPenalty = 19;
     */
    awayPenalty: number; // 客隊點球大戰比分
    /**
     * @generated from protobuf field: string awayRank = 20;
     */
    awayRank: string; // 客隊排名
    /**
     * @generated from protobuf field: int32 openDate = 21;
     */
    openDate: number; // 開賽時間(timestamp)
    /**
     * @generated from protobuf field: int32 status = 22;
     */
    status: number; // 比賽狀態
    /**
     * @generated from protobuf field: int32 startTime = 23;
     */
    startTime: number; // 開球時間(timestamp)
    /**
     * @generated from protobuf field: string animation = 24;
     */
    animation: string; // 動畫連結 沒有為""
    /**
     * @generated from protobuf field: repeated socketProtos.MatchInfo.LiveStreamProvider liveStreamings = 25;
     */
    liveStreamings: LiveStreamProvider[]; // 視頻連結
    /**
     * @generated from protobuf field: socketProtos.MatchInfo.MatchIncident incidents = 26;
     */
    incidents?: MatchIncident; // 賽事重要事件
    /**
     * @generated from protobuf field: repeated ApiProtos.Matches.MatchDetail.MatchDetail.Stats stats = 27;
     */
    stats: MatchDetail_Stats[]; // 賽事統計
    /**
     * @generated from protobuf field: repeated ApiProtos.Matches.MatchDetail.MatchDetail.Tlive tlive = 28;
     */
    tlive: MatchDetail_Tlive[]; // 賽事文字直播
    /**
     * @generated from protobuf field: int32 views = 29;
     */
    views: number; // 人氣數
    /**
     * @generated from protobuf field: int32 betsCount = 30;
     */
    betsCount: number; // 下注次數
    /**
     * @generated from protobuf field: int32 neutral = 31;
     */
    neutral: number; // 是否為中立場
    /**
     * @generated from protobuf field: ApiProtos.Matches.MatchDetail.MatchDetail.Lineup lineup = 32;
     */
    lineup?: MatchDetail_Lineup; // 賽事陣容
    /**
     * @generated from protobuf field: ApiProtos.Matches.MatchDetail.MatchDetail.BattleRecord battleRecord = 33;
     */
    battleRecord?: MatchDetail_BattleRecord; // 主客歷史交鋒
    /**
     * @generated from protobuf field: ApiProtos.Matches.MatchDetail.MatchDetail.RecentMatches recentMatches = 34;
     */
    recentMatches?: MatchDetail_RecentMatches; // 主客近期最戰紀錄
    /**
     * @generated from protobuf field: ApiProtos.Matches.MatchDetail.MatchDetail.FutureMatches futureMatches = 35;
     */
    futureMatches?: MatchDetail_FutureMatches; // 聯盟、主客近期未來賽事
}
/**
 * @generated from protobuf message ApiProtos.Matches.MatchDetail.MatchDetail.Stats
 */
export interface MatchDetail_Stats {
    /**
     * @generated from protobuf field: int32 type = 1;
     */
    type: number; // 技术统计分類;詳見技术统计類別碼
    /**
     * @generated from protobuf field: int32 home = 2;
     */
    home: number; // 主隊分數
    /**
     * @generated from protobuf field: int32 away = 3;
     */
    away: number; // 客隊分數
}
/**
 * @generated from protobuf message ApiProtos.Matches.MatchDetail.MatchDetail.Tlive
 */
export interface MatchDetail_Tlive {
    /**
     * @generated from protobuf field: string data = 1;
     */
    data: string; // 文字直播內容
    /**
     * @generated from protobuf field: int32 position = 2;
     */
    position: number; // 事件发生方,0-中立 1,主队 2,客队
    /**
     * @generated from protobuf field: int32 type = 3;
     */
    type: number; // 狀態分類//类型，详见技术统计類別碼
    /**
     * @generated from protobuf field: string time = 4;
     */
    time: string; // 進行時間
}
/**
 * @generated from protobuf message ApiProtos.Matches.MatchDetail.MatchDetail.PlayerIncident
 */
export interface MatchDetail_PlayerIncident {
    /**
     * @generated from protobuf field: int32 type = 1;
     */
    type: number; // 類型詳見狀態碼(足球技術統計)
    /**
     * @generated from protobuf field: string time = 2;
     */
    time: string; // 時間（分鐘）
    /**
     * @generated from protobuf field: int32 assist1Id = 3;
     */
    assist1Id: number; // 進球時，助攻球員1 id，-1則不須理會
    /**
     * @generated from protobuf field: int32 assist2Id = 4;
     */
    assist2Id: number; // 進球時，助攻球員2 id，-1則不須理會
    /**
     * @generated from protobuf field: int32 inPlayerId = 5;
     */
    inPlayerId: number; // 換人時，換上球員id，-1則不須理會
    /**
     * @generated from protobuf field: int32 outPlayerId = 6;
     */
    outPlayerId: number; // 換人時，換下球員id，-1則不須理會
    /**
     * @generated from protobuf field: int32 homeScore = 7;
     */
    homeScore: number; // 主隊比分
    /**
     * @generated from protobuf field: int32 awayScore = 8;
     */
    awayScore: number; // 客隊比分
}
/**
 * @generated from protobuf message ApiProtos.Matches.MatchDetail.MatchDetail.LineupFormation
 */
export interface MatchDetail_LineupFormation {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number; // 球員id
    /**
     * @generated from protobuf field: int32 first = 2;
     */
    first: number; // 是否首发，1-是 0-否
    /**
     * @generated from protobuf field: int32 shirtNumber = 3;
     */
    shirtNumber: number; // 球衣号 0表示未分配球衣或者无数据
    /**
     * @generated from protobuf field: string position = 4;
     */
    position: string; // 球员位置,F前锋 M中锋 D后卫 G守门员,其他为未知
    /**
     * @generated from protobuf field: int32 x = 5;
     */
    x: number; // 阵容x坐标 总共100
    /**
     * @generated from protobuf field: int32 y = 6;
     */
    y: number; // 阵容y坐标 总共100
    /**
     * @generated from protobuf field: string rating = 7;
     */
    rating: string; // 阵容y坐标 总共100
    /**
     * @generated from protobuf field: repeated ApiProtos.Matches.MatchDetail.MatchDetail.PlayerIncident incidents = 8;
     */
    incidents: MatchDetail_PlayerIncident[]; // 球員事件
}
/**
 * @generated from protobuf message ApiProtos.Matches.MatchDetail.MatchDetail.PlayerInfo
 */
export interface MatchDetail_PlayerInfo {
    /**
     * @generated from protobuf field: int32 playerId = 1;
     */
    playerId: number; // 球員ID
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string; // 球員名稱
    /**
     * @generated from protobuf field: string shortName = 3;
     */
    shortName: string; // 球員簡稱
    /**
     * @generated from protobuf field: string logo = 4;
     */
    logo: string; // 球員LOGO
}
/**
 * @generated from protobuf message ApiProtos.Matches.MatchDetail.MatchDetail.Lineup
 */
export interface MatchDetail_Lineup {
    /**
     * @generated from protobuf field: string homeManager = 1;
     */
    homeManager: string; // 主隊教練名稱
    /**
     * @generated from protobuf field: string awayManager = 2;
     */
    awayManager: string; // 客隊教練名稱
    /**
     * @generated from protobuf field: string homeFormation = 3;
     */
    homeFormation: string; // 主隊陣型
    /**
     * @generated from protobuf field: string awayFormation = 4;
     */
    awayFormation: string; // 客隊陣型
    /**
     * @generated from protobuf field: repeated ApiProtos.Matches.MatchDetail.MatchDetail.LineupFormation home = 5;
     */
    home: MatchDetail_LineupFormation[]; // 主隊陣容資訊
    /**
     * @generated from protobuf field: repeated ApiProtos.Matches.MatchDetail.MatchDetail.LineupFormation away = 6;
     */
    away: MatchDetail_LineupFormation[]; // 主隊陣容資訊
    /**
     * @generated from protobuf field: repeated ApiProtos.Matches.MatchDetail.MatchDetail.PlayerInfo players = 7;
     */
    players: MatchDetail_PlayerInfo[]; // 球員列表
}
/**
 * @generated from protobuf message ApiProtos.Matches.MatchDetail.MatchDetail.BattleResult
 */
export interface MatchDetail_BattleResult {
    /**
     * @generated from protobuf field: int32 win = 1;
     */
    win: number; // 勝場數
    /**
     * @generated from protobuf field: int32 lost = 2;
     */
    lost: number; // 負場數
    /**
     * @generated from protobuf field: int32 tie = 3;
     */
    tie: number; // 和場數
    /**
     * @generated from protobuf field: int32 total = 4;
     */
    total: number; // 總場數
    /**
     * @generated from protobuf field: int32 winRate = 5;
     */
    winRate: number; // 勝率
}
/**
 * @generated from protobuf message ApiProtos.Matches.MatchDetail.MatchDetail.BattleRecord
 */
export interface MatchDetail_BattleRecord {
    /**
     * @generated from protobuf field: ApiProtos.Matches.MatchDetail.MatchDetail.BattleResult home = 1;
     */
    home?: MatchDetail_BattleResult; // 主隊歷史交鋒資訊
    /**
     * @generated from protobuf field: ApiProtos.Matches.MatchDetail.MatchDetail.BattleResult away = 2;
     */
    away?: MatchDetail_BattleResult; // 客隊歷史交鋒資訊
}
/**
 * @generated from protobuf message ApiProtos.Matches.MatchDetail.MatchDetail.MatchResult
 */
export interface MatchDetail_MatchResult {
    /**
     * @generated from protobuf field: int32 matchId = 1;
     */
    matchId: number; // 賽事ID
    /**
     * @generated from protobuf field: string result = 2;
     */
    result: string; // 賽果 win勝/tie平/lost負
}
/**
 * @generated from protobuf message ApiProtos.Matches.MatchDetail.MatchDetail.MatchStatistics
 */
export interface MatchDetail_MatchStatistics {
    /**
     * @generated from protobuf field: int32 win = 1;
     */
    win: number; // 勝場數
    /**
     * @generated from protobuf field: int32 lost = 2;
     */
    lost: number; // 負場數
    /**
     * @generated from protobuf field: int32 tie = 3;
     */
    tie: number; // 和場數
    /**
     * @generated from protobuf field: int32 total = 4;
     */
    total: number; // 總場數
    /**
     * @generated from protobuf field: int32 winRate = 5;
     */
    winRate: number; // 勝率
    /**
     * @generated from protobuf field: repeated ApiProtos.Matches.MatchDetail.MatchDetail.MatchResult matches = 6;
     */
    matches: MatchDetail_MatchResult[]; // 賽事資訊
}
/**
 * @generated from protobuf message ApiProtos.Matches.MatchDetail.MatchDetail.RecentMatches
 */
export interface MatchDetail_RecentMatches {
    /**
     * @generated from protobuf field: ApiProtos.Matches.MatchDetail.MatchDetail.MatchStatistics home = 1;
     */
    home?: MatchDetail_MatchStatistics; // 主隊近期對戰紀錄
    /**
     * @generated from protobuf field: ApiProtos.Matches.MatchDetail.MatchDetail.MatchStatistics away = 2;
     */
    away?: MatchDetail_MatchStatistics; // 客隊近期對戰紀錄
}
/**
 * @generated from protobuf message ApiProtos.Matches.MatchDetail.MatchDetail.MatchData
 */
export interface MatchDetail_MatchData {
    /**
     * @generated from protobuf field: int32 matchId = 1;
     */
    matchId: number; // 賽事ID
    /**
     * @generated from protobuf field: int32 leagueId = 2;
     */
    leagueId: number; // 聯盟ID
    /**
     * @generated from protobuf field: string leagueName = 3;
     */
    leagueName: string; // 聯盟名稱
    /**
     * @generated from protobuf field: string leagueLogo = 4;
     */
    leagueLogo: string; // 聯盟LOGO
    /**
     * @generated from protobuf field: int32 homeId = 5;
     */
    homeId: number; // 主隊ID
    /**
     * @generated from protobuf field: string homeName = 6;
     */
    homeName: string; // 主隊名稱
    /**
     * @generated from protobuf field: string homeLogo = 7;
     */
    homeLogo: string; // 主隊LOGO
    /**
     * @generated from protobuf field: int32 homeScore = 8;
     */
    homeScore: number; // 主隊比分
    /**
     * @generated from protobuf field: int32 awayId = 9;
     */
    awayId: number; // 客隊ID
    /**
     * @generated from protobuf field: string awayName = 10;
     */
    awayName: string; // 客隊名稱
    /**
     * @generated from protobuf field: string awayLogo = 11;
     */
    awayLogo: string; // 客隊LOGO
    /**
     * @generated from protobuf field: int32 awayScore = 12;
     */
    awayScore: number; // 客隊比分
    /**
     * @generated from protobuf field: int32 openDate = 13;
     */
    openDate: number; // 開賽時間(timestamp)
    /**
     * @generated from protobuf field: int32 status = 14;
     */
    status: number; // 賽事狀態
}
/**
 * @generated from protobuf message ApiProtos.Matches.MatchDetail.MatchDetail.FutureMatches
 */
export interface MatchDetail_FutureMatches {
    /**
     * @generated from protobuf field: repeated ApiProtos.Matches.MatchDetail.MatchDetail.MatchData leagueMatches = 1;
     */
    leagueMatches: MatchDetail_MatchData[]; // 聯盟未來賽事
    /**
     * @generated from protobuf field: repeated ApiProtos.Matches.MatchDetail.MatchDetail.MatchData homeMatches = 2;
     */
    homeMatches: MatchDetail_MatchData[]; // 主隊未來賽事
    /**
     * @generated from protobuf field: repeated ApiProtos.Matches.MatchDetail.MatchDetail.MatchData awayMatches = 3;
     */
    awayMatches: MatchDetail_MatchData[]; // 客隊未來賽事
}
// @generated message type with reflection information, may provide speed optimized methods
class MatchDetail$Type extends MessageType<MatchDetail> {
    constructor() {
        super("ApiProtos.Matches.MatchDetail.MatchDetail", [
            { no: 1, name: "matchId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "leagueName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "venueName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "round", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "homeId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "homeName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "homeLogo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "homeScore", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "homeHalfScore", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "homeExtend", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "homePenalty", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "homeRank", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "awayId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "awayName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "awayLogo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "awayScore", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 17, name: "awayHalfScore", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 18, name: "awayExtend", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 19, name: "awayPenalty", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 20, name: "awayRank", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "openDate", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 22, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 23, name: "startTime", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 24, name: "animation", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 25, name: "liveStreamings", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LiveStreamProvider },
            { no: 26, name: "incidents", kind: "message", T: () => MatchIncident },
            { no: 27, name: "stats", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchDetail_Stats },
            { no: 28, name: "tlive", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchDetail_Tlive },
            { no: 29, name: "views", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 30, name: "betsCount", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 31, name: "neutral", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 32, name: "lineup", kind: "message", T: () => MatchDetail_Lineup },
            { no: 33, name: "battleRecord", kind: "message", T: () => MatchDetail_BattleRecord },
            { no: 34, name: "recentMatches", kind: "message", T: () => MatchDetail_RecentMatches },
            { no: 35, name: "futureMatches", kind: "message", T: () => MatchDetail_FutureMatches }
        ]);
    }
    create(value?: PartialMessage<MatchDetail>): MatchDetail {
        const message = { matchId: 0, leagueName: "", venueName: "", round: 0, homeId: 0, homeName: "", homeLogo: "", homeScore: 0, homeHalfScore: 0, homeExtend: 0, homePenalty: 0, homeRank: "", awayId: 0, awayName: "", awayLogo: "", awayScore: 0, awayHalfScore: 0, awayExtend: 0, awayPenalty: 0, awayRank: "", openDate: 0, status: 0, startTime: 0, animation: "", liveStreamings: [], stats: [], tlive: [], views: 0, betsCount: 0, neutral: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchDetail): MatchDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 matchId */ 1:
                    message.matchId = reader.int32();
                    break;
                case /* string leagueName */ 2:
                    message.leagueName = reader.string();
                    break;
                case /* string venueName */ 3:
                    message.venueName = reader.string();
                    break;
                case /* int32 round */ 4:
                    message.round = reader.int32();
                    break;
                case /* int32 homeId */ 5:
                    message.homeId = reader.int32();
                    break;
                case /* string homeName */ 6:
                    message.homeName = reader.string();
                    break;
                case /* string homeLogo */ 7:
                    message.homeLogo = reader.string();
                    break;
                case /* int32 homeScore */ 8:
                    message.homeScore = reader.int32();
                    break;
                case /* int32 homeHalfScore */ 9:
                    message.homeHalfScore = reader.int32();
                    break;
                case /* int32 homeExtend */ 10:
                    message.homeExtend = reader.int32();
                    break;
                case /* int32 homePenalty */ 11:
                    message.homePenalty = reader.int32();
                    break;
                case /* string homeRank */ 12:
                    message.homeRank = reader.string();
                    break;
                case /* int32 awayId */ 13:
                    message.awayId = reader.int32();
                    break;
                case /* string awayName */ 14:
                    message.awayName = reader.string();
                    break;
                case /* string awayLogo */ 15:
                    message.awayLogo = reader.string();
                    break;
                case /* int32 awayScore */ 16:
                    message.awayScore = reader.int32();
                    break;
                case /* int32 awayHalfScore */ 17:
                    message.awayHalfScore = reader.int32();
                    break;
                case /* int32 awayExtend */ 18:
                    message.awayExtend = reader.int32();
                    break;
                case /* int32 awayPenalty */ 19:
                    message.awayPenalty = reader.int32();
                    break;
                case /* string awayRank */ 20:
                    message.awayRank = reader.string();
                    break;
                case /* int32 openDate */ 21:
                    message.openDate = reader.int32();
                    break;
                case /* int32 status */ 22:
                    message.status = reader.int32();
                    break;
                case /* int32 startTime */ 23:
                    message.startTime = reader.int32();
                    break;
                case /* string animation */ 24:
                    message.animation = reader.string();
                    break;
                case /* repeated socketProtos.MatchInfo.LiveStreamProvider liveStreamings */ 25:
                    message.liveStreamings.push(LiveStreamProvider.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* socketProtos.MatchInfo.MatchIncident incidents */ 26:
                    message.incidents = MatchIncident.internalBinaryRead(reader, reader.uint32(), options, message.incidents);
                    break;
                case /* repeated ApiProtos.Matches.MatchDetail.MatchDetail.Stats stats */ 27:
                    message.stats.push(MatchDetail_Stats.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ApiProtos.Matches.MatchDetail.MatchDetail.Tlive tlive */ 28:
                    message.tlive.push(MatchDetail_Tlive.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 views */ 29:
                    message.views = reader.int32();
                    break;
                case /* int32 betsCount */ 30:
                    message.betsCount = reader.int32();
                    break;
                case /* int32 neutral */ 31:
                    message.neutral = reader.int32();
                    break;
                case /* ApiProtos.Matches.MatchDetail.MatchDetail.Lineup lineup */ 32:
                    message.lineup = MatchDetail_Lineup.internalBinaryRead(reader, reader.uint32(), options, message.lineup);
                    break;
                case /* ApiProtos.Matches.MatchDetail.MatchDetail.BattleRecord battleRecord */ 33:
                    message.battleRecord = MatchDetail_BattleRecord.internalBinaryRead(reader, reader.uint32(), options, message.battleRecord);
                    break;
                case /* ApiProtos.Matches.MatchDetail.MatchDetail.RecentMatches recentMatches */ 34:
                    message.recentMatches = MatchDetail_RecentMatches.internalBinaryRead(reader, reader.uint32(), options, message.recentMatches);
                    break;
                case /* ApiProtos.Matches.MatchDetail.MatchDetail.FutureMatches futureMatches */ 35:
                    message.futureMatches = MatchDetail_FutureMatches.internalBinaryRead(reader, reader.uint32(), options, message.futureMatches);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 matchId = 1; */
        if (message.matchId !== 0)
            writer.tag(1, WireType.Varint).int32(message.matchId);
        /* string leagueName = 2; */
        if (message.leagueName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.leagueName);
        /* string venueName = 3; */
        if (message.venueName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.venueName);
        /* int32 round = 4; */
        if (message.round !== 0)
            writer.tag(4, WireType.Varint).int32(message.round);
        /* int32 homeId = 5; */
        if (message.homeId !== 0)
            writer.tag(5, WireType.Varint).int32(message.homeId);
        /* string homeName = 6; */
        if (message.homeName !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.homeName);
        /* string homeLogo = 7; */
        if (message.homeLogo !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.homeLogo);
        /* int32 homeScore = 8; */
        if (message.homeScore !== 0)
            writer.tag(8, WireType.Varint).int32(message.homeScore);
        /* int32 homeHalfScore = 9; */
        if (message.homeHalfScore !== 0)
            writer.tag(9, WireType.Varint).int32(message.homeHalfScore);
        /* int32 homeExtend = 10; */
        if (message.homeExtend !== 0)
            writer.tag(10, WireType.Varint).int32(message.homeExtend);
        /* int32 homePenalty = 11; */
        if (message.homePenalty !== 0)
            writer.tag(11, WireType.Varint).int32(message.homePenalty);
        /* string homeRank = 12; */
        if (message.homeRank !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.homeRank);
        /* int32 awayId = 13; */
        if (message.awayId !== 0)
            writer.tag(13, WireType.Varint).int32(message.awayId);
        /* string awayName = 14; */
        if (message.awayName !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.awayName);
        /* string awayLogo = 15; */
        if (message.awayLogo !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.awayLogo);
        /* int32 awayScore = 16; */
        if (message.awayScore !== 0)
            writer.tag(16, WireType.Varint).int32(message.awayScore);
        /* int32 awayHalfScore = 17; */
        if (message.awayHalfScore !== 0)
            writer.tag(17, WireType.Varint).int32(message.awayHalfScore);
        /* int32 awayExtend = 18; */
        if (message.awayExtend !== 0)
            writer.tag(18, WireType.Varint).int32(message.awayExtend);
        /* int32 awayPenalty = 19; */
        if (message.awayPenalty !== 0)
            writer.tag(19, WireType.Varint).int32(message.awayPenalty);
        /* string awayRank = 20; */
        if (message.awayRank !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.awayRank);
        /* int32 openDate = 21; */
        if (message.openDate !== 0)
            writer.tag(21, WireType.Varint).int32(message.openDate);
        /* int32 status = 22; */
        if (message.status !== 0)
            writer.tag(22, WireType.Varint).int32(message.status);
        /* int32 startTime = 23; */
        if (message.startTime !== 0)
            writer.tag(23, WireType.Varint).int32(message.startTime);
        /* string animation = 24; */
        if (message.animation !== "")
            writer.tag(24, WireType.LengthDelimited).string(message.animation);
        /* repeated socketProtos.MatchInfo.LiveStreamProvider liveStreamings = 25; */
        for (let i = 0; i < message.liveStreamings.length; i++)
            LiveStreamProvider.internalBinaryWrite(message.liveStreamings[i], writer.tag(25, WireType.LengthDelimited).fork(), options).join();
        /* socketProtos.MatchInfo.MatchIncident incidents = 26; */
        if (message.incidents)
            MatchIncident.internalBinaryWrite(message.incidents, writer.tag(26, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Matches.MatchDetail.MatchDetail.Stats stats = 27; */
        for (let i = 0; i < message.stats.length; i++)
            MatchDetail_Stats.internalBinaryWrite(message.stats[i], writer.tag(27, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Matches.MatchDetail.MatchDetail.Tlive tlive = 28; */
        for (let i = 0; i < message.tlive.length; i++)
            MatchDetail_Tlive.internalBinaryWrite(message.tlive[i], writer.tag(28, WireType.LengthDelimited).fork(), options).join();
        /* int32 views = 29; */
        if (message.views !== 0)
            writer.tag(29, WireType.Varint).int32(message.views);
        /* int32 betsCount = 30; */
        if (message.betsCount !== 0)
            writer.tag(30, WireType.Varint).int32(message.betsCount);
        /* int32 neutral = 31; */
        if (message.neutral !== 0)
            writer.tag(31, WireType.Varint).int32(message.neutral);
        /* ApiProtos.Matches.MatchDetail.MatchDetail.Lineup lineup = 32; */
        if (message.lineup)
            MatchDetail_Lineup.internalBinaryWrite(message.lineup, writer.tag(32, WireType.LengthDelimited).fork(), options).join();
        /* ApiProtos.Matches.MatchDetail.MatchDetail.BattleRecord battleRecord = 33; */
        if (message.battleRecord)
            MatchDetail_BattleRecord.internalBinaryWrite(message.battleRecord, writer.tag(33, WireType.LengthDelimited).fork(), options).join();
        /* ApiProtos.Matches.MatchDetail.MatchDetail.RecentMatches recentMatches = 34; */
        if (message.recentMatches)
            MatchDetail_RecentMatches.internalBinaryWrite(message.recentMatches, writer.tag(34, WireType.LengthDelimited).fork(), options).join();
        /* ApiProtos.Matches.MatchDetail.MatchDetail.FutureMatches futureMatches = 35; */
        if (message.futureMatches)
            MatchDetail_FutureMatches.internalBinaryWrite(message.futureMatches, writer.tag(35, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchDetail.MatchDetail
 */
export const MatchDetail = new MatchDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchDetail_Stats$Type extends MessageType<MatchDetail_Stats> {
    constructor() {
        super("ApiProtos.Matches.MatchDetail.MatchDetail.Stats", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "home", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "away", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MatchDetail_Stats>): MatchDetail_Stats {
        const message = { type: 0, home: 0, away: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchDetail_Stats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchDetail_Stats): MatchDetail_Stats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* int32 home */ 2:
                    message.home = reader.int32();
                    break;
                case /* int32 away */ 3:
                    message.away = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchDetail_Stats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* int32 home = 2; */
        if (message.home !== 0)
            writer.tag(2, WireType.Varint).int32(message.home);
        /* int32 away = 3; */
        if (message.away !== 0)
            writer.tag(3, WireType.Varint).int32(message.away);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchDetail.MatchDetail.Stats
 */
export const MatchDetail_Stats = new MatchDetail_Stats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchDetail_Tlive$Type extends MessageType<MatchDetail_Tlive> {
    constructor() {
        super("ApiProtos.Matches.MatchDetail.MatchDetail.Tlive", [
            { no: 1, name: "data", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "position", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "time", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MatchDetail_Tlive>): MatchDetail_Tlive {
        const message = { data: "", position: 0, type: 0, time: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchDetail_Tlive>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchDetail_Tlive): MatchDetail_Tlive {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string data */ 1:
                    message.data = reader.string();
                    break;
                case /* int32 position */ 2:
                    message.position = reader.int32();
                    break;
                case /* int32 type */ 3:
                    message.type = reader.int32();
                    break;
                case /* string time */ 4:
                    message.time = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchDetail_Tlive, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string data = 1; */
        if (message.data !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.data);
        /* int32 position = 2; */
        if (message.position !== 0)
            writer.tag(2, WireType.Varint).int32(message.position);
        /* int32 type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* string time = 4; */
        if (message.time !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.time);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchDetail.MatchDetail.Tlive
 */
export const MatchDetail_Tlive = new MatchDetail_Tlive$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchDetail_PlayerIncident$Type extends MessageType<MatchDetail_PlayerIncident> {
    constructor() {
        super("ApiProtos.Matches.MatchDetail.MatchDetail.PlayerIncident", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "assist1Id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "assist2Id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "inPlayerId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "outPlayerId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "homeScore", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "awayScore", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MatchDetail_PlayerIncident>): MatchDetail_PlayerIncident {
        const message = { type: 0, time: "", assist1Id: 0, assist2Id: 0, inPlayerId: 0, outPlayerId: 0, homeScore: 0, awayScore: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchDetail_PlayerIncident>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchDetail_PlayerIncident): MatchDetail_PlayerIncident {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* string time */ 2:
                    message.time = reader.string();
                    break;
                case /* int32 assist1Id */ 3:
                    message.assist1Id = reader.int32();
                    break;
                case /* int32 assist2Id */ 4:
                    message.assist2Id = reader.int32();
                    break;
                case /* int32 inPlayerId */ 5:
                    message.inPlayerId = reader.int32();
                    break;
                case /* int32 outPlayerId */ 6:
                    message.outPlayerId = reader.int32();
                    break;
                case /* int32 homeScore */ 7:
                    message.homeScore = reader.int32();
                    break;
                case /* int32 awayScore */ 8:
                    message.awayScore = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchDetail_PlayerIncident, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* string time = 2; */
        if (message.time !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.time);
        /* int32 assist1Id = 3; */
        if (message.assist1Id !== 0)
            writer.tag(3, WireType.Varint).int32(message.assist1Id);
        /* int32 assist2Id = 4; */
        if (message.assist2Id !== 0)
            writer.tag(4, WireType.Varint).int32(message.assist2Id);
        /* int32 inPlayerId = 5; */
        if (message.inPlayerId !== 0)
            writer.tag(5, WireType.Varint).int32(message.inPlayerId);
        /* int32 outPlayerId = 6; */
        if (message.outPlayerId !== 0)
            writer.tag(6, WireType.Varint).int32(message.outPlayerId);
        /* int32 homeScore = 7; */
        if (message.homeScore !== 0)
            writer.tag(7, WireType.Varint).int32(message.homeScore);
        /* int32 awayScore = 8; */
        if (message.awayScore !== 0)
            writer.tag(8, WireType.Varint).int32(message.awayScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchDetail.MatchDetail.PlayerIncident
 */
export const MatchDetail_PlayerIncident = new MatchDetail_PlayerIncident$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchDetail_LineupFormation$Type extends MessageType<MatchDetail_LineupFormation> {
    constructor() {
        super("ApiProtos.Matches.MatchDetail.MatchDetail.LineupFormation", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "first", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "shirtNumber", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "position", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "x", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "y", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "rating", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "incidents", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchDetail_PlayerIncident }
        ]);
    }
    create(value?: PartialMessage<MatchDetail_LineupFormation>): MatchDetail_LineupFormation {
        const message = { id: 0, first: 0, shirtNumber: 0, position: "", x: 0, y: 0, rating: "", incidents: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchDetail_LineupFormation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchDetail_LineupFormation): MatchDetail_LineupFormation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* int32 first */ 2:
                    message.first = reader.int32();
                    break;
                case /* int32 shirtNumber */ 3:
                    message.shirtNumber = reader.int32();
                    break;
                case /* string position */ 4:
                    message.position = reader.string();
                    break;
                case /* int32 x */ 5:
                    message.x = reader.int32();
                    break;
                case /* int32 y */ 6:
                    message.y = reader.int32();
                    break;
                case /* string rating */ 7:
                    message.rating = reader.string();
                    break;
                case /* repeated ApiProtos.Matches.MatchDetail.MatchDetail.PlayerIncident incidents */ 8:
                    message.incidents.push(MatchDetail_PlayerIncident.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchDetail_LineupFormation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* int32 first = 2; */
        if (message.first !== 0)
            writer.tag(2, WireType.Varint).int32(message.first);
        /* int32 shirtNumber = 3; */
        if (message.shirtNumber !== 0)
            writer.tag(3, WireType.Varint).int32(message.shirtNumber);
        /* string position = 4; */
        if (message.position !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.position);
        /* int32 x = 5; */
        if (message.x !== 0)
            writer.tag(5, WireType.Varint).int32(message.x);
        /* int32 y = 6; */
        if (message.y !== 0)
            writer.tag(6, WireType.Varint).int32(message.y);
        /* string rating = 7; */
        if (message.rating !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.rating);
        /* repeated ApiProtos.Matches.MatchDetail.MatchDetail.PlayerIncident incidents = 8; */
        for (let i = 0; i < message.incidents.length; i++)
            MatchDetail_PlayerIncident.internalBinaryWrite(message.incidents[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchDetail.MatchDetail.LineupFormation
 */
export const MatchDetail_LineupFormation = new MatchDetail_LineupFormation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchDetail_PlayerInfo$Type extends MessageType<MatchDetail_PlayerInfo> {
    constructor() {
        super("ApiProtos.Matches.MatchDetail.MatchDetail.PlayerInfo", [
            { no: 1, name: "playerId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "shortName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "logo", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MatchDetail_PlayerInfo>): MatchDetail_PlayerInfo {
        const message = { playerId: 0, name: "", shortName: "", logo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchDetail_PlayerInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchDetail_PlayerInfo): MatchDetail_PlayerInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 playerId */ 1:
                    message.playerId = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string shortName */ 3:
                    message.shortName = reader.string();
                    break;
                case /* string logo */ 4:
                    message.logo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchDetail_PlayerInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 playerId = 1; */
        if (message.playerId !== 0)
            writer.tag(1, WireType.Varint).int32(message.playerId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string shortName = 3; */
        if (message.shortName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.shortName);
        /* string logo = 4; */
        if (message.logo !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.logo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchDetail.MatchDetail.PlayerInfo
 */
export const MatchDetail_PlayerInfo = new MatchDetail_PlayerInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchDetail_Lineup$Type extends MessageType<MatchDetail_Lineup> {
    constructor() {
        super("ApiProtos.Matches.MatchDetail.MatchDetail.Lineup", [
            { no: 1, name: "homeManager", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "awayManager", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "homeFormation", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "awayFormation", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "home", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchDetail_LineupFormation },
            { no: 6, name: "away", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchDetail_LineupFormation },
            { no: 7, name: "players", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchDetail_PlayerInfo }
        ]);
    }
    create(value?: PartialMessage<MatchDetail_Lineup>): MatchDetail_Lineup {
        const message = { homeManager: "", awayManager: "", homeFormation: "", awayFormation: "", home: [], away: [], players: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchDetail_Lineup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchDetail_Lineup): MatchDetail_Lineup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string homeManager */ 1:
                    message.homeManager = reader.string();
                    break;
                case /* string awayManager */ 2:
                    message.awayManager = reader.string();
                    break;
                case /* string homeFormation */ 3:
                    message.homeFormation = reader.string();
                    break;
                case /* string awayFormation */ 4:
                    message.awayFormation = reader.string();
                    break;
                case /* repeated ApiProtos.Matches.MatchDetail.MatchDetail.LineupFormation home */ 5:
                    message.home.push(MatchDetail_LineupFormation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ApiProtos.Matches.MatchDetail.MatchDetail.LineupFormation away */ 6:
                    message.away.push(MatchDetail_LineupFormation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ApiProtos.Matches.MatchDetail.MatchDetail.PlayerInfo players */ 7:
                    message.players.push(MatchDetail_PlayerInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchDetail_Lineup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string homeManager = 1; */
        if (message.homeManager !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.homeManager);
        /* string awayManager = 2; */
        if (message.awayManager !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.awayManager);
        /* string homeFormation = 3; */
        if (message.homeFormation !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.homeFormation);
        /* string awayFormation = 4; */
        if (message.awayFormation !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.awayFormation);
        /* repeated ApiProtos.Matches.MatchDetail.MatchDetail.LineupFormation home = 5; */
        for (let i = 0; i < message.home.length; i++)
            MatchDetail_LineupFormation.internalBinaryWrite(message.home[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Matches.MatchDetail.MatchDetail.LineupFormation away = 6; */
        for (let i = 0; i < message.away.length; i++)
            MatchDetail_LineupFormation.internalBinaryWrite(message.away[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Matches.MatchDetail.MatchDetail.PlayerInfo players = 7; */
        for (let i = 0; i < message.players.length; i++)
            MatchDetail_PlayerInfo.internalBinaryWrite(message.players[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchDetail.MatchDetail.Lineup
 */
export const MatchDetail_Lineup = new MatchDetail_Lineup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchDetail_BattleResult$Type extends MessageType<MatchDetail_BattleResult> {
    constructor() {
        super("ApiProtos.Matches.MatchDetail.MatchDetail.BattleResult", [
            { no: 1, name: "win", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "lost", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "tie", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "total", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "winRate", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MatchDetail_BattleResult>): MatchDetail_BattleResult {
        const message = { win: 0, lost: 0, tie: 0, total: 0, winRate: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchDetail_BattleResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchDetail_BattleResult): MatchDetail_BattleResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 win */ 1:
                    message.win = reader.int32();
                    break;
                case /* int32 lost */ 2:
                    message.lost = reader.int32();
                    break;
                case /* int32 tie */ 3:
                    message.tie = reader.int32();
                    break;
                case /* int32 total */ 4:
                    message.total = reader.int32();
                    break;
                case /* int32 winRate */ 5:
                    message.winRate = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchDetail_BattleResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 win = 1; */
        if (message.win !== 0)
            writer.tag(1, WireType.Varint).int32(message.win);
        /* int32 lost = 2; */
        if (message.lost !== 0)
            writer.tag(2, WireType.Varint).int32(message.lost);
        /* int32 tie = 3; */
        if (message.tie !== 0)
            writer.tag(3, WireType.Varint).int32(message.tie);
        /* int32 total = 4; */
        if (message.total !== 0)
            writer.tag(4, WireType.Varint).int32(message.total);
        /* int32 winRate = 5; */
        if (message.winRate !== 0)
            writer.tag(5, WireType.Varint).int32(message.winRate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchDetail.MatchDetail.BattleResult
 */
export const MatchDetail_BattleResult = new MatchDetail_BattleResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchDetail_BattleRecord$Type extends MessageType<MatchDetail_BattleRecord> {
    constructor() {
        super("ApiProtos.Matches.MatchDetail.MatchDetail.BattleRecord", [
            { no: 1, name: "home", kind: "message", T: () => MatchDetail_BattleResult },
            { no: 2, name: "away", kind: "message", T: () => MatchDetail_BattleResult }
        ]);
    }
    create(value?: PartialMessage<MatchDetail_BattleRecord>): MatchDetail_BattleRecord {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchDetail_BattleRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchDetail_BattleRecord): MatchDetail_BattleRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ApiProtos.Matches.MatchDetail.MatchDetail.BattleResult home */ 1:
                    message.home = MatchDetail_BattleResult.internalBinaryRead(reader, reader.uint32(), options, message.home);
                    break;
                case /* ApiProtos.Matches.MatchDetail.MatchDetail.BattleResult away */ 2:
                    message.away = MatchDetail_BattleResult.internalBinaryRead(reader, reader.uint32(), options, message.away);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchDetail_BattleRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ApiProtos.Matches.MatchDetail.MatchDetail.BattleResult home = 1; */
        if (message.home)
            MatchDetail_BattleResult.internalBinaryWrite(message.home, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ApiProtos.Matches.MatchDetail.MatchDetail.BattleResult away = 2; */
        if (message.away)
            MatchDetail_BattleResult.internalBinaryWrite(message.away, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchDetail.MatchDetail.BattleRecord
 */
export const MatchDetail_BattleRecord = new MatchDetail_BattleRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchDetail_MatchResult$Type extends MessageType<MatchDetail_MatchResult> {
    constructor() {
        super("ApiProtos.Matches.MatchDetail.MatchDetail.MatchResult", [
            { no: 1, name: "matchId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "result", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MatchDetail_MatchResult>): MatchDetail_MatchResult {
        const message = { matchId: 0, result: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchDetail_MatchResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchDetail_MatchResult): MatchDetail_MatchResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 matchId */ 1:
                    message.matchId = reader.int32();
                    break;
                case /* string result */ 2:
                    message.result = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchDetail_MatchResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 matchId = 1; */
        if (message.matchId !== 0)
            writer.tag(1, WireType.Varint).int32(message.matchId);
        /* string result = 2; */
        if (message.result !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.result);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchDetail.MatchDetail.MatchResult
 */
export const MatchDetail_MatchResult = new MatchDetail_MatchResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchDetail_MatchStatistics$Type extends MessageType<MatchDetail_MatchStatistics> {
    constructor() {
        super("ApiProtos.Matches.MatchDetail.MatchDetail.MatchStatistics", [
            { no: 1, name: "win", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "lost", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "tie", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "total", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "winRate", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "matches", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchDetail_MatchResult }
        ]);
    }
    create(value?: PartialMessage<MatchDetail_MatchStatistics>): MatchDetail_MatchStatistics {
        const message = { win: 0, lost: 0, tie: 0, total: 0, winRate: 0, matches: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchDetail_MatchStatistics>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchDetail_MatchStatistics): MatchDetail_MatchStatistics {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 win */ 1:
                    message.win = reader.int32();
                    break;
                case /* int32 lost */ 2:
                    message.lost = reader.int32();
                    break;
                case /* int32 tie */ 3:
                    message.tie = reader.int32();
                    break;
                case /* int32 total */ 4:
                    message.total = reader.int32();
                    break;
                case /* int32 winRate */ 5:
                    message.winRate = reader.int32();
                    break;
                case /* repeated ApiProtos.Matches.MatchDetail.MatchDetail.MatchResult matches */ 6:
                    message.matches.push(MatchDetail_MatchResult.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchDetail_MatchStatistics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 win = 1; */
        if (message.win !== 0)
            writer.tag(1, WireType.Varint).int32(message.win);
        /* int32 lost = 2; */
        if (message.lost !== 0)
            writer.tag(2, WireType.Varint).int32(message.lost);
        /* int32 tie = 3; */
        if (message.tie !== 0)
            writer.tag(3, WireType.Varint).int32(message.tie);
        /* int32 total = 4; */
        if (message.total !== 0)
            writer.tag(4, WireType.Varint).int32(message.total);
        /* int32 winRate = 5; */
        if (message.winRate !== 0)
            writer.tag(5, WireType.Varint).int32(message.winRate);
        /* repeated ApiProtos.Matches.MatchDetail.MatchDetail.MatchResult matches = 6; */
        for (let i = 0; i < message.matches.length; i++)
            MatchDetail_MatchResult.internalBinaryWrite(message.matches[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchDetail.MatchDetail.MatchStatistics
 */
export const MatchDetail_MatchStatistics = new MatchDetail_MatchStatistics$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchDetail_RecentMatches$Type extends MessageType<MatchDetail_RecentMatches> {
    constructor() {
        super("ApiProtos.Matches.MatchDetail.MatchDetail.RecentMatches", [
            { no: 1, name: "home", kind: "message", T: () => MatchDetail_MatchStatistics },
            { no: 2, name: "away", kind: "message", T: () => MatchDetail_MatchStatistics }
        ]);
    }
    create(value?: PartialMessage<MatchDetail_RecentMatches>): MatchDetail_RecentMatches {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchDetail_RecentMatches>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchDetail_RecentMatches): MatchDetail_RecentMatches {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ApiProtos.Matches.MatchDetail.MatchDetail.MatchStatistics home */ 1:
                    message.home = MatchDetail_MatchStatistics.internalBinaryRead(reader, reader.uint32(), options, message.home);
                    break;
                case /* ApiProtos.Matches.MatchDetail.MatchDetail.MatchStatistics away */ 2:
                    message.away = MatchDetail_MatchStatistics.internalBinaryRead(reader, reader.uint32(), options, message.away);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchDetail_RecentMatches, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ApiProtos.Matches.MatchDetail.MatchDetail.MatchStatistics home = 1; */
        if (message.home)
            MatchDetail_MatchStatistics.internalBinaryWrite(message.home, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ApiProtos.Matches.MatchDetail.MatchDetail.MatchStatistics away = 2; */
        if (message.away)
            MatchDetail_MatchStatistics.internalBinaryWrite(message.away, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchDetail.MatchDetail.RecentMatches
 */
export const MatchDetail_RecentMatches = new MatchDetail_RecentMatches$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchDetail_MatchData$Type extends MessageType<MatchDetail_MatchData> {
    constructor() {
        super("ApiProtos.Matches.MatchDetail.MatchDetail.MatchData", [
            { no: 1, name: "matchId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "leagueId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "leagueName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "leagueLogo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "homeId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "homeName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "homeLogo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "homeScore", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "awayId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "awayName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "awayLogo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "awayScore", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "openDate", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MatchDetail_MatchData>): MatchDetail_MatchData {
        const message = { matchId: 0, leagueId: 0, leagueName: "", leagueLogo: "", homeId: 0, homeName: "", homeLogo: "", homeScore: 0, awayId: 0, awayName: "", awayLogo: "", awayScore: 0, openDate: 0, status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchDetail_MatchData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchDetail_MatchData): MatchDetail_MatchData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 matchId */ 1:
                    message.matchId = reader.int32();
                    break;
                case /* int32 leagueId */ 2:
                    message.leagueId = reader.int32();
                    break;
                case /* string leagueName */ 3:
                    message.leagueName = reader.string();
                    break;
                case /* string leagueLogo */ 4:
                    message.leagueLogo = reader.string();
                    break;
                case /* int32 homeId */ 5:
                    message.homeId = reader.int32();
                    break;
                case /* string homeName */ 6:
                    message.homeName = reader.string();
                    break;
                case /* string homeLogo */ 7:
                    message.homeLogo = reader.string();
                    break;
                case /* int32 homeScore */ 8:
                    message.homeScore = reader.int32();
                    break;
                case /* int32 awayId */ 9:
                    message.awayId = reader.int32();
                    break;
                case /* string awayName */ 10:
                    message.awayName = reader.string();
                    break;
                case /* string awayLogo */ 11:
                    message.awayLogo = reader.string();
                    break;
                case /* int32 awayScore */ 12:
                    message.awayScore = reader.int32();
                    break;
                case /* int32 openDate */ 13:
                    message.openDate = reader.int32();
                    break;
                case /* int32 status */ 14:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchDetail_MatchData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 matchId = 1; */
        if (message.matchId !== 0)
            writer.tag(1, WireType.Varint).int32(message.matchId);
        /* int32 leagueId = 2; */
        if (message.leagueId !== 0)
            writer.tag(2, WireType.Varint).int32(message.leagueId);
        /* string leagueName = 3; */
        if (message.leagueName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.leagueName);
        /* string leagueLogo = 4; */
        if (message.leagueLogo !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.leagueLogo);
        /* int32 homeId = 5; */
        if (message.homeId !== 0)
            writer.tag(5, WireType.Varint).int32(message.homeId);
        /* string homeName = 6; */
        if (message.homeName !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.homeName);
        /* string homeLogo = 7; */
        if (message.homeLogo !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.homeLogo);
        /* int32 homeScore = 8; */
        if (message.homeScore !== 0)
            writer.tag(8, WireType.Varint).int32(message.homeScore);
        /* int32 awayId = 9; */
        if (message.awayId !== 0)
            writer.tag(9, WireType.Varint).int32(message.awayId);
        /* string awayName = 10; */
        if (message.awayName !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.awayName);
        /* string awayLogo = 11; */
        if (message.awayLogo !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.awayLogo);
        /* int32 awayScore = 12; */
        if (message.awayScore !== 0)
            writer.tag(12, WireType.Varint).int32(message.awayScore);
        /* int32 openDate = 13; */
        if (message.openDate !== 0)
            writer.tag(13, WireType.Varint).int32(message.openDate);
        /* int32 status = 14; */
        if (message.status !== 0)
            writer.tag(14, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchDetail.MatchDetail.MatchData
 */
export const MatchDetail_MatchData = new MatchDetail_MatchData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchDetail_FutureMatches$Type extends MessageType<MatchDetail_FutureMatches> {
    constructor() {
        super("ApiProtos.Matches.MatchDetail.MatchDetail.FutureMatches", [
            { no: 1, name: "leagueMatches", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchDetail_MatchData },
            { no: 2, name: "homeMatches", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchDetail_MatchData },
            { no: 3, name: "awayMatches", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchDetail_MatchData }
        ]);
    }
    create(value?: PartialMessage<MatchDetail_FutureMatches>): MatchDetail_FutureMatches {
        const message = { leagueMatches: [], homeMatches: [], awayMatches: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchDetail_FutureMatches>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchDetail_FutureMatches): MatchDetail_FutureMatches {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ApiProtos.Matches.MatchDetail.MatchDetail.MatchData leagueMatches */ 1:
                    message.leagueMatches.push(MatchDetail_MatchData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ApiProtos.Matches.MatchDetail.MatchDetail.MatchData homeMatches */ 2:
                    message.homeMatches.push(MatchDetail_MatchData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ApiProtos.Matches.MatchDetail.MatchDetail.MatchData awayMatches */ 3:
                    message.awayMatches.push(MatchDetail_MatchData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchDetail_FutureMatches, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ApiProtos.Matches.MatchDetail.MatchDetail.MatchData leagueMatches = 1; */
        for (let i = 0; i < message.leagueMatches.length; i++)
            MatchDetail_MatchData.internalBinaryWrite(message.leagueMatches[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Matches.MatchDetail.MatchDetail.MatchData homeMatches = 2; */
        for (let i = 0; i < message.homeMatches.length; i++)
            MatchDetail_MatchData.internalBinaryWrite(message.homeMatches[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Matches.MatchDetail.MatchDetail.MatchData awayMatches = 3; */
        for (let i = 0; i < message.awayMatches.length; i++)
            MatchDetail_MatchData.internalBinaryWrite(message.awayMatches[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchDetail.MatchDetail.FutureMatches
 */
export const MatchDetail_FutureMatches = new MatchDetail_FutureMatches$Type();
