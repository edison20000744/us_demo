// @generated by protobuf-ts 2.5.0
// @generated from protobuf file "protobuf/protos/api/matches/MatchOdds.proto" (package "ApiProtos.Matches.MatchOdds", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ApiProtos.Matches.MatchOdds.MatchOdds
 */
export interface MatchOdds {
    /**
     * @generated from protobuf field: ApiProtos.Matches.MatchOdds.MatchOdds.Odds odds = 1;
     */
    odds?: MatchOdds_Odds; // 一般指數
    /**
     * @generated from protobuf field: repeated ApiProtos.Matches.MatchOdds.MatchOdds.TgOdd tgOdds = 2;
     */
    tgOdds: MatchOdds_TgOdd[]; // TG指數
}
/**
 * @generated from protobuf message ApiProtos.Matches.MatchOdds.MatchOdds.Index
 */
export interface MatchOdds_Index {
    /**
     * @generated from protobuf field: string home = 1;
     */
    home: string; // 主胜
    /**
     * @generated from protobuf field: string handicap = 2;
     */
    handicap: string; // 盤口(和)
    /**
     * @generated from protobuf field: string away = 3;
     */
    away: string; // 客胜
}
/**
 * @generated from protobuf message ApiProtos.Matches.MatchOdds.MatchOdds.Odd
 */
export interface MatchOdds_Odd {
    /**
     * @generated from protobuf field: int32 companyID = 1;
     */
    companyID: number; // 公司id
    /**
     * @generated from protobuf field: string companyName = 2;
     */
    companyName: string; // 公司名稱
    /**
     * @generated from protobuf field: ApiProtos.Matches.MatchOdds.MatchOdds.Index first = 3;
     */
    first?: MatchOdds_Index; // 初盤
    /**
     * @generated from protobuf field: ApiProtos.Matches.MatchOdds.MatchOdds.Index latest = 4;
     */
    latest?: MatchOdds_Index; // 即時盤
    /**
     * @generated from protobuf field: ApiProtos.Matches.MatchOdds.MatchOdds.Index live = 5;
     */
    live?: MatchOdds_Index; // 滾球盤
    /**
     * @generated from protobuf field: int32 closed = 6;
     */
    closed: number; // 是否封盤
}
/**
 * @generated from protobuf message ApiProtos.Matches.MatchOdds.MatchOdds.Odds
 */
export interface MatchOdds_Odds {
    /**
     * @generated from protobuf field: ApiProtos.Matches.MatchOdds.MatchOdds.Odd asia = 1;
     */
    asia?: MatchOdds_Odd; // 亞盤
    /**
     * @generated from protobuf field: ApiProtos.Matches.MatchOdds.MatchOdds.Odd eu = 2;
     */
    eu?: MatchOdds_Odd; // 歐盤
    /**
     * @generated from protobuf field: ApiProtos.Matches.MatchOdds.MatchOdds.Odd bs = 3;
     */
    bs?: MatchOdds_Odd; // 大小球
    /**
     * @generated from protobuf field: ApiProtos.Matches.MatchOdds.MatchOdds.Odd cr = 4;
     */
    cr?: MatchOdds_Odd; // 角球
}
/**
 * @generated from protobuf message ApiProtos.Matches.MatchOdds.MatchOdds.TgOdd
 */
export interface MatchOdds_TgOdd {
    /**
     * @generated from protobuf field: string transaction = 1;
     */
    transaction: string; // 可交易量
    /**
     * @generated from protobuf field: string profit = 2;
     */
    profit: string; // 獲利率
    /**
     * @generated from protobuf field: string betMoney = 3;
     */
    betMoney: string; // 累計金額
    /**
     * @generated from protobuf field: int32 isPopular = 4;
     */
    isPopular: number; // 是否熱銷 0否 1是
    /**
     * @generated from protobuf field: int32 isSoldOut = 5;
     */
    isSoldOut: number; // 是否售完 0否 1是
    /**
     * @generated from protobuf field: string selectionName = 6;
     */
    selectionName: string; // 0-0 0-1 0-2 0-3 1-0 1-1 1-2 1-3 2-0 2-1 2-2 2-3 3-0 3-1 3-2 3-3 homeFourOrMore awayFourOrMore 盤口資訊
}
// @generated message type with reflection information, may provide speed optimized methods
class MatchOdds$Type extends MessageType<MatchOdds> {
    constructor() {
        super("ApiProtos.Matches.MatchOdds.MatchOdds", [
            { no: 1, name: "odds", kind: "message", T: () => MatchOdds_Odds },
            { no: 2, name: "tgOdds", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchOdds_TgOdd }
        ]);
    }
    create(value?: PartialMessage<MatchOdds>): MatchOdds {
        const message = { tgOdds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchOdds>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchOdds): MatchOdds {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ApiProtos.Matches.MatchOdds.MatchOdds.Odds odds */ 1:
                    message.odds = MatchOdds_Odds.internalBinaryRead(reader, reader.uint32(), options, message.odds);
                    break;
                case /* repeated ApiProtos.Matches.MatchOdds.MatchOdds.TgOdd tgOdds */ 2:
                    message.tgOdds.push(MatchOdds_TgOdd.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchOdds, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ApiProtos.Matches.MatchOdds.MatchOdds.Odds odds = 1; */
        if (message.odds)
            MatchOdds_Odds.internalBinaryWrite(message.odds, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Matches.MatchOdds.MatchOdds.TgOdd tgOdds = 2; */
        for (let i = 0; i < message.tgOdds.length; i++)
            MatchOdds_TgOdd.internalBinaryWrite(message.tgOdds[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchOdds.MatchOdds
 */
export const MatchOdds = new MatchOdds$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchOdds_Index$Type extends MessageType<MatchOdds_Index> {
    constructor() {
        super("ApiProtos.Matches.MatchOdds.MatchOdds.Index", [
            { no: 1, name: "home", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "handicap", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "away", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MatchOdds_Index>): MatchOdds_Index {
        const message = { home: "", handicap: "", away: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchOdds_Index>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchOdds_Index): MatchOdds_Index {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string home */ 1:
                    message.home = reader.string();
                    break;
                case /* string handicap */ 2:
                    message.handicap = reader.string();
                    break;
                case /* string away */ 3:
                    message.away = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchOdds_Index, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string home = 1; */
        if (message.home !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.home);
        /* string handicap = 2; */
        if (message.handicap !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.handicap);
        /* string away = 3; */
        if (message.away !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.away);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchOdds.MatchOdds.Index
 */
export const MatchOdds_Index = new MatchOdds_Index$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchOdds_Odd$Type extends MessageType<MatchOdds_Odd> {
    constructor() {
        super("ApiProtos.Matches.MatchOdds.MatchOdds.Odd", [
            { no: 1, name: "companyID", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "companyName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "first", kind: "message", T: () => MatchOdds_Index },
            { no: 4, name: "latest", kind: "message", T: () => MatchOdds_Index },
            { no: 5, name: "live", kind: "message", T: () => MatchOdds_Index },
            { no: 6, name: "closed", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MatchOdds_Odd>): MatchOdds_Odd {
        const message = { companyID: 0, companyName: "", closed: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchOdds_Odd>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchOdds_Odd): MatchOdds_Odd {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 companyID */ 1:
                    message.companyID = reader.int32();
                    break;
                case /* string companyName */ 2:
                    message.companyName = reader.string();
                    break;
                case /* ApiProtos.Matches.MatchOdds.MatchOdds.Index first */ 3:
                    message.first = MatchOdds_Index.internalBinaryRead(reader, reader.uint32(), options, message.first);
                    break;
                case /* ApiProtos.Matches.MatchOdds.MatchOdds.Index latest */ 4:
                    message.latest = MatchOdds_Index.internalBinaryRead(reader, reader.uint32(), options, message.latest);
                    break;
                case /* ApiProtos.Matches.MatchOdds.MatchOdds.Index live */ 5:
                    message.live = MatchOdds_Index.internalBinaryRead(reader, reader.uint32(), options, message.live);
                    break;
                case /* int32 closed */ 6:
                    message.closed = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchOdds_Odd, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 companyID = 1; */
        if (message.companyID !== 0)
            writer.tag(1, WireType.Varint).int32(message.companyID);
        /* string companyName = 2; */
        if (message.companyName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.companyName);
        /* ApiProtos.Matches.MatchOdds.MatchOdds.Index first = 3; */
        if (message.first)
            MatchOdds_Index.internalBinaryWrite(message.first, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* ApiProtos.Matches.MatchOdds.MatchOdds.Index latest = 4; */
        if (message.latest)
            MatchOdds_Index.internalBinaryWrite(message.latest, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* ApiProtos.Matches.MatchOdds.MatchOdds.Index live = 5; */
        if (message.live)
            MatchOdds_Index.internalBinaryWrite(message.live, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int32 closed = 6; */
        if (message.closed !== 0)
            writer.tag(6, WireType.Varint).int32(message.closed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchOdds.MatchOdds.Odd
 */
export const MatchOdds_Odd = new MatchOdds_Odd$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchOdds_Odds$Type extends MessageType<MatchOdds_Odds> {
    constructor() {
        super("ApiProtos.Matches.MatchOdds.MatchOdds.Odds", [
            { no: 1, name: "asia", kind: "message", T: () => MatchOdds_Odd },
            { no: 2, name: "eu", kind: "message", T: () => MatchOdds_Odd },
            { no: 3, name: "bs", kind: "message", T: () => MatchOdds_Odd },
            { no: 4, name: "cr", kind: "message", T: () => MatchOdds_Odd }
        ]);
    }
    create(value?: PartialMessage<MatchOdds_Odds>): MatchOdds_Odds {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchOdds_Odds>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchOdds_Odds): MatchOdds_Odds {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ApiProtos.Matches.MatchOdds.MatchOdds.Odd asia */ 1:
                    message.asia = MatchOdds_Odd.internalBinaryRead(reader, reader.uint32(), options, message.asia);
                    break;
                case /* ApiProtos.Matches.MatchOdds.MatchOdds.Odd eu */ 2:
                    message.eu = MatchOdds_Odd.internalBinaryRead(reader, reader.uint32(), options, message.eu);
                    break;
                case /* ApiProtos.Matches.MatchOdds.MatchOdds.Odd bs */ 3:
                    message.bs = MatchOdds_Odd.internalBinaryRead(reader, reader.uint32(), options, message.bs);
                    break;
                case /* ApiProtos.Matches.MatchOdds.MatchOdds.Odd cr */ 4:
                    message.cr = MatchOdds_Odd.internalBinaryRead(reader, reader.uint32(), options, message.cr);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchOdds_Odds, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ApiProtos.Matches.MatchOdds.MatchOdds.Odd asia = 1; */
        if (message.asia)
            MatchOdds_Odd.internalBinaryWrite(message.asia, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ApiProtos.Matches.MatchOdds.MatchOdds.Odd eu = 2; */
        if (message.eu)
            MatchOdds_Odd.internalBinaryWrite(message.eu, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* ApiProtos.Matches.MatchOdds.MatchOdds.Odd bs = 3; */
        if (message.bs)
            MatchOdds_Odd.internalBinaryWrite(message.bs, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* ApiProtos.Matches.MatchOdds.MatchOdds.Odd cr = 4; */
        if (message.cr)
            MatchOdds_Odd.internalBinaryWrite(message.cr, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchOdds.MatchOdds.Odds
 */
export const MatchOdds_Odds = new MatchOdds_Odds$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchOdds_TgOdd$Type extends MessageType<MatchOdds_TgOdd> {
    constructor() {
        super("ApiProtos.Matches.MatchOdds.MatchOdds.TgOdd", [
            { no: 1, name: "transaction", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "profit", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "betMoney", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "isPopular", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "isSoldOut", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "selectionName", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MatchOdds_TgOdd>): MatchOdds_TgOdd {
        const message = { transaction: "", profit: "", betMoney: "", isPopular: 0, isSoldOut: 0, selectionName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchOdds_TgOdd>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchOdds_TgOdd): MatchOdds_TgOdd {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string transaction */ 1:
                    message.transaction = reader.string();
                    break;
                case /* string profit */ 2:
                    message.profit = reader.string();
                    break;
                case /* string betMoney */ 3:
                    message.betMoney = reader.string();
                    break;
                case /* int32 isPopular */ 4:
                    message.isPopular = reader.int32();
                    break;
                case /* int32 isSoldOut */ 5:
                    message.isSoldOut = reader.int32();
                    break;
                case /* string selectionName */ 6:
                    message.selectionName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchOdds_TgOdd, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string transaction = 1; */
        if (message.transaction !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.transaction);
        /* string profit = 2; */
        if (message.profit !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.profit);
        /* string betMoney = 3; */
        if (message.betMoney !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.betMoney);
        /* int32 isPopular = 4; */
        if (message.isPopular !== 0)
            writer.tag(4, WireType.Varint).int32(message.isPopular);
        /* int32 isSoldOut = 5; */
        if (message.isSoldOut !== 0)
            writer.tag(5, WireType.Varint).int32(message.isSoldOut);
        /* string selectionName = 6; */
        if (message.selectionName !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.selectionName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchOdds.MatchOdds.TgOdd
 */
export const MatchOdds_TgOdd = new MatchOdds_TgOdd$Type();
