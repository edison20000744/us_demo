// @generated by protobuf-ts 2.5.0
// @generated from protobuf file "protobuf/protos/api/matches/MatchIntelligence.proto" (package "ApiProtos.Matches.MatchIntelligence", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ApiProtos.Matches.MatchIntelligence.MatchIntelligence
 */
export interface MatchIntelligence {
    /**
     * @generated from protobuf field: ApiProtos.Matches.MatchIntelligence.MatchIntelligence.Integration home = 1;
     */
    home?: MatchIntelligence_Integration; // 主隊情報資訊
    /**
     * @generated from protobuf field: ApiProtos.Matches.MatchIntelligence.MatchIntelligence.Integration away = 2;
     */
    away?: MatchIntelligence_Integration; // 客隊情報資訊
}
/**
 * @generated from protobuf message ApiProtos.Matches.MatchIntelligence.MatchIntelligence.Intelligence
 */
export interface MatchIntelligence_Intelligence {
    /**
     * @generated from protobuf field: int32 level = 1;
     */
    level: number; // 情报重要程度(1-5)，数值越大越重要
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string; // 情报内容
}
/**
 * @generated from protobuf message ApiProtos.Matches.MatchIntelligence.MatchIntelligence.Integration
 */
export interface MatchIntelligence_Integration {
    /**
     * @generated from protobuf field: repeated ApiProtos.Matches.MatchIntelligence.MatchIntelligence.Intelligence good = 1;
     */
    good: MatchIntelligence_Intelligence[]; // 有利情報
    /**
     * @generated from protobuf field: repeated ApiProtos.Matches.MatchIntelligence.MatchIntelligence.Intelligence bad = 2;
     */
    bad: MatchIntelligence_Intelligence[]; // 不利情報
    /**
     * @generated from protobuf field: repeated ApiProtos.Matches.MatchIntelligence.MatchIntelligence.Intelligence neutral = 3;
     */
    neutral: MatchIntelligence_Intelligence[]; // 中立情報
}
// @generated message type with reflection information, may provide speed optimized methods
class MatchIntelligence$Type extends MessageType<MatchIntelligence> {
    constructor() {
        super("ApiProtos.Matches.MatchIntelligence.MatchIntelligence", [
            { no: 1, name: "home", kind: "message", T: () => MatchIntelligence_Integration },
            { no: 2, name: "away", kind: "message", T: () => MatchIntelligence_Integration }
        ]);
    }
    create(value?: PartialMessage<MatchIntelligence>): MatchIntelligence {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchIntelligence>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchIntelligence): MatchIntelligence {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ApiProtos.Matches.MatchIntelligence.MatchIntelligence.Integration home */ 1:
                    message.home = MatchIntelligence_Integration.internalBinaryRead(reader, reader.uint32(), options, message.home);
                    break;
                case /* ApiProtos.Matches.MatchIntelligence.MatchIntelligence.Integration away */ 2:
                    message.away = MatchIntelligence_Integration.internalBinaryRead(reader, reader.uint32(), options, message.away);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchIntelligence, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ApiProtos.Matches.MatchIntelligence.MatchIntelligence.Integration home = 1; */
        if (message.home)
            MatchIntelligence_Integration.internalBinaryWrite(message.home, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ApiProtos.Matches.MatchIntelligence.MatchIntelligence.Integration away = 2; */
        if (message.away)
            MatchIntelligence_Integration.internalBinaryWrite(message.away, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchIntelligence.MatchIntelligence
 */
export const MatchIntelligence = new MatchIntelligence$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchIntelligence_Intelligence$Type extends MessageType<MatchIntelligence_Intelligence> {
    constructor() {
        super("ApiProtos.Matches.MatchIntelligence.MatchIntelligence.Intelligence", [
            { no: 1, name: "level", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MatchIntelligence_Intelligence>): MatchIntelligence_Intelligence {
        const message = { level: 0, message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchIntelligence_Intelligence>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchIntelligence_Intelligence): MatchIntelligence_Intelligence {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 level */ 1:
                    message.level = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchIntelligence_Intelligence, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 level = 1; */
        if (message.level !== 0)
            writer.tag(1, WireType.Varint).int32(message.level);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchIntelligence.MatchIntelligence.Intelligence
 */
export const MatchIntelligence_Intelligence = new MatchIntelligence_Intelligence$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchIntelligence_Integration$Type extends MessageType<MatchIntelligence_Integration> {
    constructor() {
        super("ApiProtos.Matches.MatchIntelligence.MatchIntelligence.Integration", [
            { no: 1, name: "good", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchIntelligence_Intelligence },
            { no: 2, name: "bad", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchIntelligence_Intelligence },
            { no: 3, name: "neutral", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchIntelligence_Intelligence }
        ]);
    }
    create(value?: PartialMessage<MatchIntelligence_Integration>): MatchIntelligence_Integration {
        const message = { good: [], bad: [], neutral: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchIntelligence_Integration>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchIntelligence_Integration): MatchIntelligence_Integration {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ApiProtos.Matches.MatchIntelligence.MatchIntelligence.Intelligence good */ 1:
                    message.good.push(MatchIntelligence_Intelligence.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ApiProtos.Matches.MatchIntelligence.MatchIntelligence.Intelligence bad */ 2:
                    message.bad.push(MatchIntelligence_Intelligence.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ApiProtos.Matches.MatchIntelligence.MatchIntelligence.Intelligence neutral */ 3:
                    message.neutral.push(MatchIntelligence_Intelligence.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchIntelligence_Integration, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ApiProtos.Matches.MatchIntelligence.MatchIntelligence.Intelligence good = 1; */
        for (let i = 0; i < message.good.length; i++)
            MatchIntelligence_Intelligence.internalBinaryWrite(message.good[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Matches.MatchIntelligence.MatchIntelligence.Intelligence bad = 2; */
        for (let i = 0; i < message.bad.length; i++)
            MatchIntelligence_Intelligence.internalBinaryWrite(message.bad[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Matches.MatchIntelligence.MatchIntelligence.Intelligence neutral = 3; */
        for (let i = 0; i < message.neutral.length; i++)
            MatchIntelligence_Intelligence.internalBinaryWrite(message.neutral[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchIntelligence.MatchIntelligence.Integration
 */
export const MatchIntelligence_Integration = new MatchIntelligence_Integration$Type();
