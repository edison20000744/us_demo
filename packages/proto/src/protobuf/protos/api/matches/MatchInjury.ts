// @generated by protobuf-ts 2.5.0
// @generated from protobuf file "protobuf/protos/api/matches/MatchInjury.proto" (package "ApiProtos.Matches.MatchInjury", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ApiProtos.Matches.MatchInjury.MatchInjury
 */
export interface MatchInjury {
    /**
     * @generated from protobuf field: repeated ApiProtos.Matches.MatchInjury.MatchInjury.InjuryInfo home = 1;
     */
    home: MatchInjury_InjuryInfo[]; // 主隊傷停資訊
    /**
     * @generated from protobuf field: repeated ApiProtos.Matches.MatchInjury.MatchInjury.InjuryInfo away = 2;
     */
    away: MatchInjury_InjuryInfo[]; // 客隊傷停資訊
}
/**
 * @generated from protobuf message ApiProtos.Matches.MatchInjury.MatchInjury.InjuryInfo
 */
export interface MatchInjury_InjuryInfo {
    /**
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number; // 球员id
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string; // 球员名称
    /**
     * @generated from protobuf field: string position = 3;
     */
    position: string; // 球员位置，F-前锋、M-中场、D-后卫、G-守门员、其他为未知
    /**
     * @generated from protobuf field: string logo = 4;
     */
    logo: string; // 球员logo
    /**
     * @generated from protobuf field: string reason = 5;
     */
    reason: string; // 伤停原因
    /**
     * @generated from protobuf field: uint32 missedMatches = 6;
     */
    missedMatches: number; // 影响场次
    /**
     * @generated from protobuf field: uint32 startTime = 7;
     */
    startTime: number; // 开始时间
    /**
     * @generated from protobuf field: uint32 endTime = 8;
     */
    endTime: number; // 结束时间
    /**
     * @generated from protobuf field: uint32 type = 9;
     */
    type: number; // 类型，0-未知、1-受伤、2-停赛
}
// @generated message type with reflection information, may provide speed optimized methods
class MatchInjury$Type extends MessageType<MatchInjury> {
    constructor() {
        super("ApiProtos.Matches.MatchInjury.MatchInjury", [
            { no: 1, name: "home", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchInjury_InjuryInfo },
            { no: 2, name: "away", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchInjury_InjuryInfo }
        ]);
    }
    create(value?: PartialMessage<MatchInjury>): MatchInjury {
        const message = { home: [], away: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchInjury>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchInjury): MatchInjury {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ApiProtos.Matches.MatchInjury.MatchInjury.InjuryInfo home */ 1:
                    message.home.push(MatchInjury_InjuryInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ApiProtos.Matches.MatchInjury.MatchInjury.InjuryInfo away */ 2:
                    message.away.push(MatchInjury_InjuryInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchInjury, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ApiProtos.Matches.MatchInjury.MatchInjury.InjuryInfo home = 1; */
        for (let i = 0; i < message.home.length; i++)
            MatchInjury_InjuryInfo.internalBinaryWrite(message.home[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Matches.MatchInjury.MatchInjury.InjuryInfo away = 2; */
        for (let i = 0; i < message.away.length; i++)
            MatchInjury_InjuryInfo.internalBinaryWrite(message.away[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchInjury.MatchInjury
 */
export const MatchInjury = new MatchInjury$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchInjury_InjuryInfo$Type extends MessageType<MatchInjury_InjuryInfo> {
    constructor() {
        super("ApiProtos.Matches.MatchInjury.MatchInjury.InjuryInfo", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "position", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "logo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "missedMatches", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "startTime", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "endTime", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "type", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MatchInjury_InjuryInfo>): MatchInjury_InjuryInfo {
        const message = { id: 0, name: "", position: "", logo: "", reason: "", missedMatches: 0, startTime: 0, endTime: 0, type: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchInjury_InjuryInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchInjury_InjuryInfo): MatchInjury_InjuryInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string position */ 3:
                    message.position = reader.string();
                    break;
                case /* string logo */ 4:
                    message.logo = reader.string();
                    break;
                case /* string reason */ 5:
                    message.reason = reader.string();
                    break;
                case /* uint32 missedMatches */ 6:
                    message.missedMatches = reader.uint32();
                    break;
                case /* uint32 startTime */ 7:
                    message.startTime = reader.uint32();
                    break;
                case /* uint32 endTime */ 8:
                    message.endTime = reader.uint32();
                    break;
                case /* uint32 type */ 9:
                    message.type = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchInjury_InjuryInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string position = 3; */
        if (message.position !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.position);
        /* string logo = 4; */
        if (message.logo !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.logo);
        /* string reason = 5; */
        if (message.reason !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.reason);
        /* uint32 missedMatches = 6; */
        if (message.missedMatches !== 0)
            writer.tag(6, WireType.Varint).uint32(message.missedMatches);
        /* uint32 startTime = 7; */
        if (message.startTime !== 0)
            writer.tag(7, WireType.Varint).uint32(message.startTime);
        /* uint32 endTime = 8; */
        if (message.endTime !== 0)
            writer.tag(8, WireType.Varint).uint32(message.endTime);
        /* uint32 type = 9; */
        if (message.type !== 0)
            writer.tag(9, WireType.Varint).uint32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchInjury.MatchInjury.InjuryInfo
 */
export const MatchInjury_InjuryInfo = new MatchInjury_InjuryInfo$Type();
