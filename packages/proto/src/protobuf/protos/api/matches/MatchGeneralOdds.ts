// @generated by protobuf-ts 2.5.0
// @generated from protobuf file "protobuf/protos/api/matches/MatchGeneralOdds.proto" (package "ApiProtos.Matches.MatchGeneralOdds", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ApiProtos.Matches.MatchGeneralOdds.MatchGeneralOdds
 */
export interface MatchGeneralOdds {
    /**
     * @generated from protobuf field: repeated ApiProtos.Matches.MatchGeneralOdds.MatchGeneralOdds.Odd asia = 1;
     */
    asia: MatchGeneralOdds_Odd[]; // 讓球盤
    /**
     * @generated from protobuf field: repeated ApiProtos.Matches.MatchGeneralOdds.MatchGeneralOdds.Odd eu = 2;
     */
    eu: MatchGeneralOdds_Odd[]; // 歐盤
    /**
     * @generated from protobuf field: repeated ApiProtos.Matches.MatchGeneralOdds.MatchGeneralOdds.Odd bs = 3;
     */
    bs: MatchGeneralOdds_Odd[]; // 大小球
    /**
     * @generated from protobuf field: repeated ApiProtos.Matches.MatchGeneralOdds.MatchGeneralOdds.Odd cr = 4;
     */
    cr: MatchGeneralOdds_Odd[]; // 角球
    /**
     * @generated from protobuf field: int32 timestamp = 5;
     */
    timestamp: number; // 更新時間 timestamp
}
/**
 * @generated from protobuf message ApiProtos.Matches.MatchGeneralOdds.MatchGeneralOdds.Index
 */
export interface MatchGeneralOdds_Index {
    /**
     * @generated from protobuf field: string home = 1;
     */
    home: string; // 主胜
    /**
     * @generated from protobuf field: string handicap = 2;
     */
    handicap: string; // 盤口
    /**
     * @generated from protobuf field: string away = 3;
     */
    away: string; // 客胜
}
/**
 * @generated from protobuf message ApiProtos.Matches.MatchGeneralOdds.MatchGeneralOdds.Odd
 */
export interface MatchGeneralOdds_Odd {
    /**
     * @generated from protobuf field: int32 companyID = 1;
     */
    companyID: number; // 公司id
    /**
     * @generated from protobuf field: string companyName = 2;
     */
    companyName: string; // 公司名稱
    /**
     * @generated from protobuf field: ApiProtos.Matches.MatchGeneralOdds.MatchGeneralOdds.Index first = 3;
     */
    first?: MatchGeneralOdds_Index; // 初盤
    /**
     * @generated from protobuf field: ApiProtos.Matches.MatchGeneralOdds.MatchGeneralOdds.Index live = 4;
     */
    live?: MatchGeneralOdds_Index; // 即時盤(含滾球)
    /**
     * @generated from protobuf field: int32 closed = 5;
     */
    closed: number; // 是否封盤 (0:否/1:是)
}
// @generated message type with reflection information, may provide speed optimized methods
class MatchGeneralOdds$Type extends MessageType<MatchGeneralOdds> {
    constructor() {
        super("ApiProtos.Matches.MatchGeneralOdds.MatchGeneralOdds", [
            { no: 1, name: "asia", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchGeneralOdds_Odd },
            { no: 2, name: "eu", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchGeneralOdds_Odd },
            { no: 3, name: "bs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchGeneralOdds_Odd },
            { no: 4, name: "cr", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchGeneralOdds_Odd },
            { no: 5, name: "timestamp", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MatchGeneralOdds>): MatchGeneralOdds {
        const message = { asia: [], eu: [], bs: [], cr: [], timestamp: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchGeneralOdds>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchGeneralOdds): MatchGeneralOdds {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ApiProtos.Matches.MatchGeneralOdds.MatchGeneralOdds.Odd asia */ 1:
                    message.asia.push(MatchGeneralOdds_Odd.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ApiProtos.Matches.MatchGeneralOdds.MatchGeneralOdds.Odd eu */ 2:
                    message.eu.push(MatchGeneralOdds_Odd.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ApiProtos.Matches.MatchGeneralOdds.MatchGeneralOdds.Odd bs */ 3:
                    message.bs.push(MatchGeneralOdds_Odd.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ApiProtos.Matches.MatchGeneralOdds.MatchGeneralOdds.Odd cr */ 4:
                    message.cr.push(MatchGeneralOdds_Odd.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 timestamp */ 5:
                    message.timestamp = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchGeneralOdds, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ApiProtos.Matches.MatchGeneralOdds.MatchGeneralOdds.Odd asia = 1; */
        for (let i = 0; i < message.asia.length; i++)
            MatchGeneralOdds_Odd.internalBinaryWrite(message.asia[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Matches.MatchGeneralOdds.MatchGeneralOdds.Odd eu = 2; */
        for (let i = 0; i < message.eu.length; i++)
            MatchGeneralOdds_Odd.internalBinaryWrite(message.eu[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Matches.MatchGeneralOdds.MatchGeneralOdds.Odd bs = 3; */
        for (let i = 0; i < message.bs.length; i++)
            MatchGeneralOdds_Odd.internalBinaryWrite(message.bs[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Matches.MatchGeneralOdds.MatchGeneralOdds.Odd cr = 4; */
        for (let i = 0; i < message.cr.length; i++)
            MatchGeneralOdds_Odd.internalBinaryWrite(message.cr[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int32 timestamp = 5; */
        if (message.timestamp !== 0)
            writer.tag(5, WireType.Varint).int32(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchGeneralOdds.MatchGeneralOdds
 */
export const MatchGeneralOdds = new MatchGeneralOdds$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchGeneralOdds_Index$Type extends MessageType<MatchGeneralOdds_Index> {
    constructor() {
        super("ApiProtos.Matches.MatchGeneralOdds.MatchGeneralOdds.Index", [
            { no: 1, name: "home", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "handicap", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "away", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MatchGeneralOdds_Index>): MatchGeneralOdds_Index {
        const message = { home: "", handicap: "", away: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchGeneralOdds_Index>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchGeneralOdds_Index): MatchGeneralOdds_Index {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string home */ 1:
                    message.home = reader.string();
                    break;
                case /* string handicap */ 2:
                    message.handicap = reader.string();
                    break;
                case /* string away */ 3:
                    message.away = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchGeneralOdds_Index, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string home = 1; */
        if (message.home !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.home);
        /* string handicap = 2; */
        if (message.handicap !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.handicap);
        /* string away = 3; */
        if (message.away !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.away);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchGeneralOdds.MatchGeneralOdds.Index
 */
export const MatchGeneralOdds_Index = new MatchGeneralOdds_Index$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchGeneralOdds_Odd$Type extends MessageType<MatchGeneralOdds_Odd> {
    constructor() {
        super("ApiProtos.Matches.MatchGeneralOdds.MatchGeneralOdds.Odd", [
            { no: 1, name: "companyID", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "companyName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "first", kind: "message", T: () => MatchGeneralOdds_Index },
            { no: 4, name: "live", kind: "message", T: () => MatchGeneralOdds_Index },
            { no: 5, name: "closed", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MatchGeneralOdds_Odd>): MatchGeneralOdds_Odd {
        const message = { companyID: 0, companyName: "", closed: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchGeneralOdds_Odd>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchGeneralOdds_Odd): MatchGeneralOdds_Odd {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 companyID */ 1:
                    message.companyID = reader.int32();
                    break;
                case /* string companyName */ 2:
                    message.companyName = reader.string();
                    break;
                case /* ApiProtos.Matches.MatchGeneralOdds.MatchGeneralOdds.Index first */ 3:
                    message.first = MatchGeneralOdds_Index.internalBinaryRead(reader, reader.uint32(), options, message.first);
                    break;
                case /* ApiProtos.Matches.MatchGeneralOdds.MatchGeneralOdds.Index live */ 4:
                    message.live = MatchGeneralOdds_Index.internalBinaryRead(reader, reader.uint32(), options, message.live);
                    break;
                case /* int32 closed */ 5:
                    message.closed = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchGeneralOdds_Odd, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 companyID = 1; */
        if (message.companyID !== 0)
            writer.tag(1, WireType.Varint).int32(message.companyID);
        /* string companyName = 2; */
        if (message.companyName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.companyName);
        /* ApiProtos.Matches.MatchGeneralOdds.MatchGeneralOdds.Index first = 3; */
        if (message.first)
            MatchGeneralOdds_Index.internalBinaryWrite(message.first, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* ApiProtos.Matches.MatchGeneralOdds.MatchGeneralOdds.Index live = 4; */
        if (message.live)
            MatchGeneralOdds_Index.internalBinaryWrite(message.live, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int32 closed = 5; */
        if (message.closed !== 0)
            writer.tag(5, WireType.Varint).int32(message.closed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchGeneralOdds.MatchGeneralOdds.Odd
 */
export const MatchGeneralOdds_Odd = new MatchGeneralOdds_Odd$Type();
