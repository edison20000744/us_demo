// @generated by protobuf-ts 2.5.0
// @generated from protobuf file "protobuf/protos/api/matches/MatchTgOdds.proto" (package "ApiProtos.Matches.MatchTgOdds", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ApiProtos.Matches.MatchTgOdds.MatchTgOdds
 */
export interface MatchTgOdds {
    /**
     * @generated from protobuf field: ApiProtos.Matches.MatchTgOdds.MatchTgOdds.Market correctScore = 1;
     */
    correctScore?: MatchTgOdds_Market; // 全場波膽
    /**
     * @generated from protobuf field: ApiProtos.Matches.MatchTgOdds.MatchTgOdds.Market halfTimeScore = 2;
     */
    halfTimeScore?: MatchTgOdds_Market; // 半場波膽
    /**
     * @generated from protobuf field: ApiProtos.Matches.MatchTgOdds.MatchTgOdds.Market totalGoals = 3;
     */
    totalGoals?: MatchTgOdds_Market; // 總入球
}
/**
 * @generated from protobuf message ApiProtos.Matches.MatchTgOdds.MatchTgOdds.Selections
 */
export interface MatchTgOdds_Selections {
    /**
     * @generated from protobuf field: string selectionName = 1;
     */
    selectionName: string; // 選項名稱 0-0 0-1 0-2 0-3 1-0 1-1 1-2 1-3 2-0 2-1 2-2 2-3 3-0 3-1 3-2 3-3 homeFourOrMore(主队赢-進球四球以上) awayFourOrMore(客队赢-進球四球以上) tieFourOrMore(平手-進球四球以上) oneOrMore(1球以上) twoOrMore(2球以上) threeOrMore(3球以上) fourOrMore(4球以上) fiveOrMore(5球以上) sixOrMore(6球以上) sevenOrMore(7球以上) other(其他)
    /**
     * @generated from protobuf field: string odd = 2;
     */
    odd: string; // 獲利率
    /**
     * @generated from protobuf field: string transaction = 3;
     */
    transaction: string; // 可交易量
    /**
     * @generated from protobuf field: string betMoney = 4;
     */
    betMoney: string; // 已交易量
}
/**
 * @generated from protobuf message ApiProtos.Matches.MatchTgOdds.MatchTgOdds.Market
 */
export interface MatchTgOdds_Market {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string; // 玩法名稱
    /**
     * @generated from protobuf field: repeated ApiProtos.Matches.MatchTgOdds.MatchTgOdds.Selections selections = 2;
     */
    selections: MatchTgOdds_Selections[]; // 選項資訊
}
// @generated message type with reflection information, may provide speed optimized methods
class MatchTgOdds$Type extends MessageType<MatchTgOdds> {
    constructor() {
        super("ApiProtos.Matches.MatchTgOdds.MatchTgOdds", [
            { no: 1, name: "correctScore", kind: "message", T: () => MatchTgOdds_Market },
            { no: 2, name: "halfTimeScore", kind: "message", T: () => MatchTgOdds_Market },
            { no: 3, name: "totalGoals", kind: "message", T: () => MatchTgOdds_Market }
        ]);
    }
    create(value?: PartialMessage<MatchTgOdds>): MatchTgOdds {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchTgOdds>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchTgOdds): MatchTgOdds {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ApiProtos.Matches.MatchTgOdds.MatchTgOdds.Market correctScore */ 1:
                    message.correctScore = MatchTgOdds_Market.internalBinaryRead(reader, reader.uint32(), options, message.correctScore);
                    break;
                case /* ApiProtos.Matches.MatchTgOdds.MatchTgOdds.Market halfTimeScore */ 2:
                    message.halfTimeScore = MatchTgOdds_Market.internalBinaryRead(reader, reader.uint32(), options, message.halfTimeScore);
                    break;
                case /* ApiProtos.Matches.MatchTgOdds.MatchTgOdds.Market totalGoals */ 3:
                    message.totalGoals = MatchTgOdds_Market.internalBinaryRead(reader, reader.uint32(), options, message.totalGoals);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchTgOdds, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ApiProtos.Matches.MatchTgOdds.MatchTgOdds.Market correctScore = 1; */
        if (message.correctScore)
            MatchTgOdds_Market.internalBinaryWrite(message.correctScore, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ApiProtos.Matches.MatchTgOdds.MatchTgOdds.Market halfTimeScore = 2; */
        if (message.halfTimeScore)
            MatchTgOdds_Market.internalBinaryWrite(message.halfTimeScore, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* ApiProtos.Matches.MatchTgOdds.MatchTgOdds.Market totalGoals = 3; */
        if (message.totalGoals)
            MatchTgOdds_Market.internalBinaryWrite(message.totalGoals, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchTgOdds.MatchTgOdds
 */
export const MatchTgOdds = new MatchTgOdds$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchTgOdds_Selections$Type extends MessageType<MatchTgOdds_Selections> {
    constructor() {
        super("ApiProtos.Matches.MatchTgOdds.MatchTgOdds.Selections", [
            { no: 1, name: "selectionName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "odd", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "transaction", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "betMoney", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MatchTgOdds_Selections>): MatchTgOdds_Selections {
        const message = { selectionName: "", odd: "", transaction: "", betMoney: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchTgOdds_Selections>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchTgOdds_Selections): MatchTgOdds_Selections {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string selectionName */ 1:
                    message.selectionName = reader.string();
                    break;
                case /* string odd */ 2:
                    message.odd = reader.string();
                    break;
                case /* string transaction */ 3:
                    message.transaction = reader.string();
                    break;
                case /* string betMoney */ 4:
                    message.betMoney = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchTgOdds_Selections, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string selectionName = 1; */
        if (message.selectionName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.selectionName);
        /* string odd = 2; */
        if (message.odd !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.odd);
        /* string transaction = 3; */
        if (message.transaction !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.transaction);
        /* string betMoney = 4; */
        if (message.betMoney !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.betMoney);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchTgOdds.MatchTgOdds.Selections
 */
export const MatchTgOdds_Selections = new MatchTgOdds_Selections$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchTgOdds_Market$Type extends MessageType<MatchTgOdds_Market> {
    constructor() {
        super("ApiProtos.Matches.MatchTgOdds.MatchTgOdds.Market", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "selections", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchTgOdds_Selections }
        ]);
    }
    create(value?: PartialMessage<MatchTgOdds_Market>): MatchTgOdds_Market {
        const message = { name: "", selections: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchTgOdds_Market>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchTgOdds_Market): MatchTgOdds_Market {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* repeated ApiProtos.Matches.MatchTgOdds.MatchTgOdds.Selections selections */ 2:
                    message.selections.push(MatchTgOdds_Selections.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchTgOdds_Market, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* repeated ApiProtos.Matches.MatchTgOdds.MatchTgOdds.Selections selections = 2; */
        for (let i = 0; i < message.selections.length; i++)
            MatchTgOdds_Selections.internalBinaryWrite(message.selections[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchTgOdds.MatchTgOdds.Market
 */
export const MatchTgOdds_Market = new MatchTgOdds_Market$Type();
