// @generated by protobuf-ts 2.5.0
// @generated from protobuf file "protobuf/protos/api/matches/MatchRanking.proto" (package "ApiProtos.Matches.MatchRanking", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ApiProtos.Matches.MatchRanking.MatchRanking
 */
export interface MatchRanking {
    /**
     * @generated from protobuf field: ApiProtos.Matches.MatchRanking.MatchRanking.Rank home = 1;
     */
    home?: MatchRanking_Rank; // 主隊積分資訊
    /**
     * @generated from protobuf field: ApiProtos.Matches.MatchRanking.MatchRanking.Rank away = 2;
     */
    away?: MatchRanking_Rank; // 客隊積分資訊
}
/**
 * @generated from protobuf message ApiProtos.Matches.MatchRanking.MatchRanking.Statistics
 */
export interface MatchRanking_Statistics {
    /**
     * @generated from protobuf field: int32 position = 1;
     */
    position: number; // 排名
    /**
     * @generated from protobuf field: int32 pts = 2;
     */
    pts: number; // 积分
    /**
     * @generated from protobuf field: int32 played = 3;
     */
    played: number; // 赛事场数
    /**
     * @generated from protobuf field: int32 won = 4;
     */
    won: number; // 胜场数
    /**
     * @generated from protobuf field: int32 drawn = 5;
     */
    drawn: number; // 平场数
    /**
     * @generated from protobuf field: int32 lost = 6;
     */
    lost: number; // 负场数
    /**
     * @generated from protobuf field: int32 goals = 7;
     */
    goals: number; // 进球数
    /**
     * @generated from protobuf field: int32 against = 8;
     */
    against: number; // 失球数
    /**
     * @generated from protobuf field: int32 diff = 9;
     */
    diff: number; // 净胜球数
    /**
     * @generated from protobuf field: double winRate = 10;
     */
    winRate: number; // 勝率(%)
}
/**
 * @generated from protobuf message ApiProtos.Matches.MatchRanking.MatchRanking.Rank
 */
export interface MatchRanking_Rank {
    /**
     * @generated from protobuf field: ApiProtos.Matches.MatchRanking.MatchRanking.Statistics all = 1;
     */
    all?: MatchRanking_Statistics; // 全部
    /**
     * @generated from protobuf field: ApiProtos.Matches.MatchRanking.MatchRanking.Statistics home = 2;
     */
    home?: MatchRanking_Statistics; // 主場
    /**
     * @generated from protobuf field: ApiProtos.Matches.MatchRanking.MatchRanking.Statistics away = 3;
     */
    away?: MatchRanking_Statistics; // 客場
}
// @generated message type with reflection information, may provide speed optimized methods
class MatchRanking$Type extends MessageType<MatchRanking> {
    constructor() {
        super("ApiProtos.Matches.MatchRanking.MatchRanking", [
            { no: 1, name: "home", kind: "message", T: () => MatchRanking_Rank },
            { no: 2, name: "away", kind: "message", T: () => MatchRanking_Rank }
        ]);
    }
    create(value?: PartialMessage<MatchRanking>): MatchRanking {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchRanking>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchRanking): MatchRanking {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ApiProtos.Matches.MatchRanking.MatchRanking.Rank home */ 1:
                    message.home = MatchRanking_Rank.internalBinaryRead(reader, reader.uint32(), options, message.home);
                    break;
                case /* ApiProtos.Matches.MatchRanking.MatchRanking.Rank away */ 2:
                    message.away = MatchRanking_Rank.internalBinaryRead(reader, reader.uint32(), options, message.away);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchRanking, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ApiProtos.Matches.MatchRanking.MatchRanking.Rank home = 1; */
        if (message.home)
            MatchRanking_Rank.internalBinaryWrite(message.home, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ApiProtos.Matches.MatchRanking.MatchRanking.Rank away = 2; */
        if (message.away)
            MatchRanking_Rank.internalBinaryWrite(message.away, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchRanking.MatchRanking
 */
export const MatchRanking = new MatchRanking$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchRanking_Statistics$Type extends MessageType<MatchRanking_Statistics> {
    constructor() {
        super("ApiProtos.Matches.MatchRanking.MatchRanking.Statistics", [
            { no: 1, name: "position", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "pts", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "played", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "won", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "drawn", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "lost", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "goals", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "against", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "diff", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "winRate", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<MatchRanking_Statistics>): MatchRanking_Statistics {
        const message = { position: 0, pts: 0, played: 0, won: 0, drawn: 0, lost: 0, goals: 0, against: 0, diff: 0, winRate: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchRanking_Statistics>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchRanking_Statistics): MatchRanking_Statistics {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 position */ 1:
                    message.position = reader.int32();
                    break;
                case /* int32 pts */ 2:
                    message.pts = reader.int32();
                    break;
                case /* int32 played */ 3:
                    message.played = reader.int32();
                    break;
                case /* int32 won */ 4:
                    message.won = reader.int32();
                    break;
                case /* int32 drawn */ 5:
                    message.drawn = reader.int32();
                    break;
                case /* int32 lost */ 6:
                    message.lost = reader.int32();
                    break;
                case /* int32 goals */ 7:
                    message.goals = reader.int32();
                    break;
                case /* int32 against */ 8:
                    message.against = reader.int32();
                    break;
                case /* int32 diff */ 9:
                    message.diff = reader.int32();
                    break;
                case /* double winRate */ 10:
                    message.winRate = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchRanking_Statistics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 position = 1; */
        if (message.position !== 0)
            writer.tag(1, WireType.Varint).int32(message.position);
        /* int32 pts = 2; */
        if (message.pts !== 0)
            writer.tag(2, WireType.Varint).int32(message.pts);
        /* int32 played = 3; */
        if (message.played !== 0)
            writer.tag(3, WireType.Varint).int32(message.played);
        /* int32 won = 4; */
        if (message.won !== 0)
            writer.tag(4, WireType.Varint).int32(message.won);
        /* int32 drawn = 5; */
        if (message.drawn !== 0)
            writer.tag(5, WireType.Varint).int32(message.drawn);
        /* int32 lost = 6; */
        if (message.lost !== 0)
            writer.tag(6, WireType.Varint).int32(message.lost);
        /* int32 goals = 7; */
        if (message.goals !== 0)
            writer.tag(7, WireType.Varint).int32(message.goals);
        /* int32 against = 8; */
        if (message.against !== 0)
            writer.tag(8, WireType.Varint).int32(message.against);
        /* int32 diff = 9; */
        if (message.diff !== 0)
            writer.tag(9, WireType.Varint).int32(message.diff);
        /* double winRate = 10; */
        if (message.winRate !== 0)
            writer.tag(10, WireType.Bit64).double(message.winRate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchRanking.MatchRanking.Statistics
 */
export const MatchRanking_Statistics = new MatchRanking_Statistics$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchRanking_Rank$Type extends MessageType<MatchRanking_Rank> {
    constructor() {
        super("ApiProtos.Matches.MatchRanking.MatchRanking.Rank", [
            { no: 1, name: "all", kind: "message", T: () => MatchRanking_Statistics },
            { no: 2, name: "home", kind: "message", T: () => MatchRanking_Statistics },
            { no: 3, name: "away", kind: "message", T: () => MatchRanking_Statistics }
        ]);
    }
    create(value?: PartialMessage<MatchRanking_Rank>): MatchRanking_Rank {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchRanking_Rank>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchRanking_Rank): MatchRanking_Rank {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ApiProtos.Matches.MatchRanking.MatchRanking.Statistics all */ 1:
                    message.all = MatchRanking_Statistics.internalBinaryRead(reader, reader.uint32(), options, message.all);
                    break;
                case /* ApiProtos.Matches.MatchRanking.MatchRanking.Statistics home */ 2:
                    message.home = MatchRanking_Statistics.internalBinaryRead(reader, reader.uint32(), options, message.home);
                    break;
                case /* ApiProtos.Matches.MatchRanking.MatchRanking.Statistics away */ 3:
                    message.away = MatchRanking_Statistics.internalBinaryRead(reader, reader.uint32(), options, message.away);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchRanking_Rank, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ApiProtos.Matches.MatchRanking.MatchRanking.Statistics all = 1; */
        if (message.all)
            MatchRanking_Statistics.internalBinaryWrite(message.all, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ApiProtos.Matches.MatchRanking.MatchRanking.Statistics home = 2; */
        if (message.home)
            MatchRanking_Statistics.internalBinaryWrite(message.home, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* ApiProtos.Matches.MatchRanking.MatchRanking.Statistics away = 3; */
        if (message.away)
            MatchRanking_Statistics.internalBinaryWrite(message.away, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Matches.MatchRanking.MatchRanking.Rank
 */
export const MatchRanking_Rank = new MatchRanking_Rank$Type();
