// @generated by protobuf-ts 2.5.0
// @generated from protobuf file "protobuf/protos/api/members/MemberInfo.proto" (package "ApiProtos.Members.MemberInfo", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ApiProtos.Members.MemberInfo.MemberInfo
 */
export interface MemberInfo {
    /**
     * @generated from protobuf field: int32 usId = 1;
     */
    usId: number; // usId(9碼數字)
    /**
     * @generated from protobuf field: int32 type = 2;
     */
    type: number; // 登入種類
    /**
     * @generated from protobuf field: string nickname = 3;
     */
    nickname: string; // 暱稱
    /**
     * @generated from protobuf field: string profilePhoto = 4;
     */
    profilePhoto: string; // 頭像
    /**
     * @generated from protobuf field: string mobile = 5;
     */
    mobile: string; // 手機號碼
    /**
     * @generated from protobuf field: string email = 6;
     */
    email: string; // email
}
// @generated message type with reflection information, may provide speed optimized methods
class MemberInfo$Type extends MessageType<MemberInfo> {
    constructor() {
        super("ApiProtos.Members.MemberInfo.MemberInfo", [
            { no: 1, name: "usId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "profilePhoto", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "mobile", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MemberInfo>): MemberInfo {
        const message = { usId: 0, type: 0, nickname: "", profilePhoto: "", mobile: "", email: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MemberInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MemberInfo): MemberInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 usId */ 1:
                    message.usId = reader.int32();
                    break;
                case /* int32 type */ 2:
                    message.type = reader.int32();
                    break;
                case /* string nickname */ 3:
                    message.nickname = reader.string();
                    break;
                case /* string profilePhoto */ 4:
                    message.profilePhoto = reader.string();
                    break;
                case /* string mobile */ 5:
                    message.mobile = reader.string();
                    break;
                case /* string email */ 6:
                    message.email = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MemberInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 usId = 1; */
        if (message.usId !== 0)
            writer.tag(1, WireType.Varint).int32(message.usId);
        /* int32 type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* string nickname = 3; */
        if (message.nickname !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.nickname);
        /* string profilePhoto = 4; */
        if (message.profilePhoto !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.profilePhoto);
        /* string mobile = 5; */
        if (message.mobile !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.mobile);
        /* string email = 6; */
        if (message.email !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.email);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Members.MemberInfo.MemberInfo
 */
export const MemberInfo = new MemberInfo$Type();
