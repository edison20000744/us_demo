// @generated by protobuf-ts 2.5.0
// @generated from protobuf file "protobuf/protos/api/members/Login.proto" (package "ApiProtos.Members.Login", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ApiProtos.Members.Login.Login
 */
export interface Login {
    /**
     * @generated from protobuf field: int32 usId = 1;
     */
    usId: number; // usid
    /**
     * @generated from protobuf field: string nickname = 2;
     */
    nickname: string; // 會員暱稱
    /**
     * @generated from protobuf field: string profilePhoto = 3;
     */
    profilePhoto: string; // 會員大頭貼
    /**
     * @generated from protobuf field: int32 level = 4;
     */
    level: number; // 會員等級
    /**
     * @generated from protobuf field: string score = 5;
     */
    score: string; // 會員積分
    /**
     * @generated from protobuf field: string amount = 6;
     */
    amount: string; // 會員金幣
    /**
     * @generated from protobuf field: string mobile = 7;
     */
    mobile: string; // 會員電話
    /**
     * @generated from protobuf field: string email = 8;
     */
    email: string; // 會員mail
    /**
     * @generated from protobuf field: int32 notifications = 9;
     */
    notifications: number; // 會員消息通知數量
    /**
     * @generated from protobuf field: int32 missions = 10;
     */
    missions: number; // 是否有任務
    /**
     * @generated from protobuf field: int32 weixin = 11;
     */
    weixin: number; // 是否綁定微信
    /**
     * @generated from protobuf field: int32 qq = 12;
     */
    qq: number; // 是否綁定QQ
    /**
     * @generated from protobuf field: int32 weibo = 13;
     */
    weibo: number; // 是否綁定微薄
    /**
     * @generated from protobuf field: int32 type = 14;
     */
    type: number; // 會員登入種類
    /**
     * @generated from protobuf field: string token = 15;
     */
    token: string; // 登入token
    /**
     * @generated from protobuf field: string ip = 16;
     */
    ip: string; // ip位置
    /**
     * @generated from protobuf field: string countryCode = 17;
     */
    countryCode: string; // 國家代碼
}
// @generated message type with reflection information, may provide speed optimized methods
class Login$Type extends MessageType<Login> {
    constructor() {
        super("ApiProtos.Members.Login.Login", [
            { no: 1, name: "usId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "profilePhoto", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "level", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "score", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "mobile", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "notifications", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "missions", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "weixin", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "qq", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "weibo", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "ip", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "countryCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Login>): Login {
        const message = { usId: 0, nickname: "", profilePhoto: "", level: 0, score: "", amount: "", mobile: "", email: "", notifications: 0, missions: 0, weixin: 0, qq: 0, weibo: 0, type: 0, token: "", ip: "", countryCode: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Login>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Login): Login {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 usId */ 1:
                    message.usId = reader.int32();
                    break;
                case /* string nickname */ 2:
                    message.nickname = reader.string();
                    break;
                case /* string profilePhoto */ 3:
                    message.profilePhoto = reader.string();
                    break;
                case /* int32 level */ 4:
                    message.level = reader.int32();
                    break;
                case /* string score */ 5:
                    message.score = reader.string();
                    break;
                case /* string amount */ 6:
                    message.amount = reader.string();
                    break;
                case /* string mobile */ 7:
                    message.mobile = reader.string();
                    break;
                case /* string email */ 8:
                    message.email = reader.string();
                    break;
                case /* int32 notifications */ 9:
                    message.notifications = reader.int32();
                    break;
                case /* int32 missions */ 10:
                    message.missions = reader.int32();
                    break;
                case /* int32 weixin */ 11:
                    message.weixin = reader.int32();
                    break;
                case /* int32 qq */ 12:
                    message.qq = reader.int32();
                    break;
                case /* int32 weibo */ 13:
                    message.weibo = reader.int32();
                    break;
                case /* int32 type */ 14:
                    message.type = reader.int32();
                    break;
                case /* string token */ 15:
                    message.token = reader.string();
                    break;
                case /* string ip */ 16:
                    message.ip = reader.string();
                    break;
                case /* string countryCode */ 17:
                    message.countryCode = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Login, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 usId = 1; */
        if (message.usId !== 0)
            writer.tag(1, WireType.Varint).int32(message.usId);
        /* string nickname = 2; */
        if (message.nickname !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nickname);
        /* string profilePhoto = 3; */
        if (message.profilePhoto !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.profilePhoto);
        /* int32 level = 4; */
        if (message.level !== 0)
            writer.tag(4, WireType.Varint).int32(message.level);
        /* string score = 5; */
        if (message.score !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.score);
        /* string amount = 6; */
        if (message.amount !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.amount);
        /* string mobile = 7; */
        if (message.mobile !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.mobile);
        /* string email = 8; */
        if (message.email !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.email);
        /* int32 notifications = 9; */
        if (message.notifications !== 0)
            writer.tag(9, WireType.Varint).int32(message.notifications);
        /* int32 missions = 10; */
        if (message.missions !== 0)
            writer.tag(10, WireType.Varint).int32(message.missions);
        /* int32 weixin = 11; */
        if (message.weixin !== 0)
            writer.tag(11, WireType.Varint).int32(message.weixin);
        /* int32 qq = 12; */
        if (message.qq !== 0)
            writer.tag(12, WireType.Varint).int32(message.qq);
        /* int32 weibo = 13; */
        if (message.weibo !== 0)
            writer.tag(13, WireType.Varint).int32(message.weibo);
        /* int32 type = 14; */
        if (message.type !== 0)
            writer.tag(14, WireType.Varint).int32(message.type);
        /* string token = 15; */
        if (message.token !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.token);
        /* string ip = 16; */
        if (message.ip !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.ip);
        /* string countryCode = 17; */
        if (message.countryCode !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.countryCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Members.Login.Login
 */
export const Login = new Login$Type();
