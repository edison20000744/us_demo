// @generated by protobuf-ts 2.5.0
// @generated from protobuf file "protobuf/protos/api/basic/MatchesData.proto" (package "ApiProtos.Basic.MatchesData", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ApiProtos.Basic.MatchesData.MatchData
 */
export interface MatchData {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number; // 賽事ID
    /**
     * @generated from protobuf field: int32 homeId = 2;
     */
    homeId: number; // 主隊ID
    /**
     * @generated from protobuf field: int32 awayId = 3;
     */
    awayId: number; // 客隊ID
    /**
     * @generated from protobuf field: int32 startTime = 4;
     */
    startTime: number; // 開球時間
    /**
     * @generated from protobuf field: int32 openDate = 5;
     */
    openDate: number; // 開賽時間
    /**
     * @generated from protobuf field: int32 homeScore = 6;
     */
    homeScore: number; // 主隊比分
    /**
     * @generated from protobuf field: int32 awayScore = 7;
     */
    awayScore: number; // 客隊比分
    /**
     * @generated from protobuf field: int32 homeHalfScore = 8;
     */
    homeHalfScore: number; // 主隊半場比分
    /**
     * @generated from protobuf field: int32 awayHalfScore = 9;
     */
    awayHalfScore: number; // 客隊半場比分
    /**
     * @generated from protobuf field: int32 homeCorner = 10;
     */
    homeCorner: number; // 主隊角球數量
    /**
     * @generated from protobuf field: int32 awayCorner = 11;
     */
    awayCorner: number; // 客隊角球數量
    /**
     * @generated from protobuf field: int32 homePenalty = 12;
     */
    homePenalty: number; // 主隊點求比分
    /**
     * @generated from protobuf field: int32 awayPenalty = 13;
     */
    awayPenalty: number; // 客隊點求比分
    /**
     * @generated from protobuf field: int32 homeExtend = 14;
     */
    homeExtend: number; // 主隊延長賽比分
    /**
     * @generated from protobuf field: int32 awayExtend = 15;
     */
    awayExtend: number; // 客隊延長賽比分
    /**
     * @generated from protobuf field: int32 status = 16;
     */
    status: number; // 賽事狀態
    /**
     * @generated from protobuf field: string note = 17;
     */
    note: string; // 備註
    /**
     * @generated from protobuf field: int32 neutral = 18;
     */
    neutral: number; // 是否為中立場
    /**
     * @generated from protobuf field: string rating = 19;
     */
    rating: string; // 球員評分
}
/**
 * @generated from protobuf message ApiProtos.Basic.MatchesData.MatchesSchedule
 */
export interface MatchesSchedule {
    /**
     * @generated from protobuf field: int32 leagueId = 1;
     */
    leagueId: number; // 聯盟ID
    /**
     * @generated from protobuf field: repeated ApiProtos.Basic.MatchesData.MatchData matches = 2;
     */
    matches: MatchData[]; // 賽事資訊
}
// @generated message type with reflection information, may provide speed optimized methods
class MatchData$Type extends MessageType<MatchData> {
    constructor() {
        super("ApiProtos.Basic.MatchesData.MatchData", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "homeId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "awayId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "startTime", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "openDate", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "homeScore", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "awayScore", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "homeHalfScore", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "awayHalfScore", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "homeCorner", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "awayCorner", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "homePenalty", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "awayPenalty", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "homeExtend", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "awayExtend", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 16, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 17, name: "note", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "neutral", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 19, name: "rating", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MatchData>): MatchData {
        const message = { id: 0, homeId: 0, awayId: 0, startTime: 0, openDate: 0, homeScore: 0, awayScore: 0, homeHalfScore: 0, awayHalfScore: 0, homeCorner: 0, awayCorner: 0, homePenalty: 0, awayPenalty: 0, homeExtend: 0, awayExtend: 0, status: 0, note: "", neutral: 0, rating: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchData): MatchData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* int32 homeId */ 2:
                    message.homeId = reader.int32();
                    break;
                case /* int32 awayId */ 3:
                    message.awayId = reader.int32();
                    break;
                case /* int32 startTime */ 4:
                    message.startTime = reader.int32();
                    break;
                case /* int32 openDate */ 5:
                    message.openDate = reader.int32();
                    break;
                case /* int32 homeScore */ 6:
                    message.homeScore = reader.int32();
                    break;
                case /* int32 awayScore */ 7:
                    message.awayScore = reader.int32();
                    break;
                case /* int32 homeHalfScore */ 8:
                    message.homeHalfScore = reader.int32();
                    break;
                case /* int32 awayHalfScore */ 9:
                    message.awayHalfScore = reader.int32();
                    break;
                case /* int32 homeCorner */ 10:
                    message.homeCorner = reader.int32();
                    break;
                case /* int32 awayCorner */ 11:
                    message.awayCorner = reader.int32();
                    break;
                case /* int32 homePenalty */ 12:
                    message.homePenalty = reader.int32();
                    break;
                case /* int32 awayPenalty */ 13:
                    message.awayPenalty = reader.int32();
                    break;
                case /* int32 homeExtend */ 14:
                    message.homeExtend = reader.int32();
                    break;
                case /* int32 awayExtend */ 15:
                    message.awayExtend = reader.int32();
                    break;
                case /* int32 status */ 16:
                    message.status = reader.int32();
                    break;
                case /* string note */ 17:
                    message.note = reader.string();
                    break;
                case /* int32 neutral */ 18:
                    message.neutral = reader.int32();
                    break;
                case /* string rating */ 19:
                    message.rating = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* int32 homeId = 2; */
        if (message.homeId !== 0)
            writer.tag(2, WireType.Varint).int32(message.homeId);
        /* int32 awayId = 3; */
        if (message.awayId !== 0)
            writer.tag(3, WireType.Varint).int32(message.awayId);
        /* int32 startTime = 4; */
        if (message.startTime !== 0)
            writer.tag(4, WireType.Varint).int32(message.startTime);
        /* int32 openDate = 5; */
        if (message.openDate !== 0)
            writer.tag(5, WireType.Varint).int32(message.openDate);
        /* int32 homeScore = 6; */
        if (message.homeScore !== 0)
            writer.tag(6, WireType.Varint).int32(message.homeScore);
        /* int32 awayScore = 7; */
        if (message.awayScore !== 0)
            writer.tag(7, WireType.Varint).int32(message.awayScore);
        /* int32 homeHalfScore = 8; */
        if (message.homeHalfScore !== 0)
            writer.tag(8, WireType.Varint).int32(message.homeHalfScore);
        /* int32 awayHalfScore = 9; */
        if (message.awayHalfScore !== 0)
            writer.tag(9, WireType.Varint).int32(message.awayHalfScore);
        /* int32 homeCorner = 10; */
        if (message.homeCorner !== 0)
            writer.tag(10, WireType.Varint).int32(message.homeCorner);
        /* int32 awayCorner = 11; */
        if (message.awayCorner !== 0)
            writer.tag(11, WireType.Varint).int32(message.awayCorner);
        /* int32 homePenalty = 12; */
        if (message.homePenalty !== 0)
            writer.tag(12, WireType.Varint).int32(message.homePenalty);
        /* int32 awayPenalty = 13; */
        if (message.awayPenalty !== 0)
            writer.tag(13, WireType.Varint).int32(message.awayPenalty);
        /* int32 homeExtend = 14; */
        if (message.homeExtend !== 0)
            writer.tag(14, WireType.Varint).int32(message.homeExtend);
        /* int32 awayExtend = 15; */
        if (message.awayExtend !== 0)
            writer.tag(15, WireType.Varint).int32(message.awayExtend);
        /* int32 status = 16; */
        if (message.status !== 0)
            writer.tag(16, WireType.Varint).int32(message.status);
        /* string note = 17; */
        if (message.note !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.note);
        /* int32 neutral = 18; */
        if (message.neutral !== 0)
            writer.tag(18, WireType.Varint).int32(message.neutral);
        /* string rating = 19; */
        if (message.rating !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.rating);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Basic.MatchesData.MatchData
 */
export const MatchData = new MatchData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchesSchedule$Type extends MessageType<MatchesSchedule> {
    constructor() {
        super("ApiProtos.Basic.MatchesData.MatchesSchedule", [
            { no: 1, name: "leagueId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "matches", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchData }
        ]);
    }
    create(value?: PartialMessage<MatchesSchedule>): MatchesSchedule {
        const message = { leagueId: 0, matches: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchesSchedule>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchesSchedule): MatchesSchedule {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 leagueId */ 1:
                    message.leagueId = reader.int32();
                    break;
                case /* repeated ApiProtos.Basic.MatchesData.MatchData matches */ 2:
                    message.matches.push(MatchData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchesSchedule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 leagueId = 1; */
        if (message.leagueId !== 0)
            writer.tag(1, WireType.Varint).int32(message.leagueId);
        /* repeated ApiProtos.Basic.MatchesData.MatchData matches = 2; */
        for (let i = 0; i < message.matches.length; i++)
            MatchData.internalBinaryWrite(message.matches[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Basic.MatchesData.MatchesSchedule
 */
export const MatchesSchedule = new MatchesSchedule$Type();
