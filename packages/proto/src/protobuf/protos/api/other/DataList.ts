// @generated by protobuf-ts 2.5.0
// @generated from protobuf file "protobuf/protos/api/other/DataList.proto" (package "ApiProtos.Other.DataList", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ApiProtos.Other.DataList.Info
 */
export interface Info {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number; // id
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string; // 名稱
    /**
     * @generated from protobuf field: string logo = 3;
     */
    logo: string; // LOGO
    /**
     * @generated from protobuf field: int32 count = 4;
     */
    count: number; // 數量
}
/**
 * @generated from protobuf message ApiProtos.Other.DataList.AreaList
 */
export interface AreaList {
    /**
     * @generated from protobuf field: repeated ApiProtos.Other.DataList.Info areas = 1;
     */
    areas: Info[]; // 區域列表
    /**
     * @generated from protobuf field: repeated ApiProtos.Other.DataList.AreaList.PopularCountry popularCountries = 2;
     */
    popularCountries: AreaList_PopularCountry[]; // 熱門國家
    /**
     * @generated from protobuf field: repeated ApiProtos.Other.DataList.AreaList.PopularLeague popularLeagues = 3;
     */
    popularLeagues: AreaList_PopularLeague[]; // 熱門聯盟
}
/**
 * @generated from protobuf message ApiProtos.Other.DataList.AreaList.PopularCountry
 */
export interface AreaList_PopularCountry {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number; // 國家id
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string; // 名稱
    /**
     * @generated from protobuf field: string logo = 3;
     */
    logo: string; // 國家LOGO
    /**
     * @generated from protobuf field: int32 areaId = 4;
     */
    areaId: number; // 地區ID
}
/**
 * @generated from protobuf message ApiProtos.Other.DataList.AreaList.PopularLeague
 */
export interface AreaList_PopularLeague {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number; // 聯盟id
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string; // 聯盟名稱
    /**
     * @generated from protobuf field: string logo = 3;
     */
    logo: string; // 聯盟LOGO
    /**
     * @generated from protobuf field: string areaName = 4;
     */
    areaName: string; // 區域名稱
    /**
     * @generated from protobuf field: string countryName = 5;
     */
    countryName: string; // 國家名稱
}
/**
 * @generated from protobuf message ApiProtos.Other.DataList.CountryList
 */
export interface CountryList {
    /**
     * @generated from protobuf field: repeated ApiProtos.Other.DataList.Info payload = 1;
     */
    payload: Info[]; // 國家列表 api payload(陣列)
}
/**
 * @generated from protobuf message ApiProtos.Other.DataList.LeagueList
 */
export interface LeagueList {
    /**
     * @generated from protobuf field: repeated ApiProtos.Other.DataList.Info payload = 1;
     */
    payload: Info[]; // 聯盟列表 api payload(陣列)
}
/**
 * @generated from protobuf message ApiProtos.Other.DataList.TeamList
 */
export interface TeamList {
    /**
     * @generated from protobuf field: repeated ApiProtos.Other.DataList.Info payload = 1;
     */
    payload: Info[]; // 球隊列表 api payload(陣列)
}
/**
 * @generated from protobuf message ApiProtos.Other.DataList.PlayerList
 */
export interface PlayerList {
    /**
     * @generated from protobuf field: repeated ApiProtos.Other.DataList.Info payload = 1;
     */
    payload: Info[]; // 球員列表 api payload(陣列)
}
/**
 * @generated from protobuf message ApiProtos.Other.DataList.AreaCountries
 */
export interface AreaCountries {
    /**
     * @generated from protobuf field: repeated ApiProtos.Other.DataList.AreaCountries.AreaCountryData payload = 1;
     */
    payload: AreaCountries_AreaCountryData[]; // 地區國家所有列表 api payload(陣列)
}
/**
 * @generated from protobuf message ApiProtos.Other.DataList.AreaCountries.AreaCountryData
 */
export interface AreaCountries_AreaCountryData {
    /**
     * @generated from protobuf field: int32 areaId = 1;
     */
    areaId: number; // 地區id 
    /**
     * @generated from protobuf field: string areaName = 2;
     */
    areaName: string; // 地區名稱
    /**
     * @generated from protobuf field: string areaLogo = 3;
     */
    areaLogo: string; // 地區LOGO
    /**
     * @generated from protobuf field: int32 countryCount = 4;
     */
    countryCount: number; // 該地區國家數量
    /**
     * @generated from protobuf field: repeated ApiProtos.Other.DataList.Info countries = 5;
     */
    countries: Info[]; // 地區國家列表 
}
// @generated message type with reflection information, may provide speed optimized methods
class Info$Type extends MessageType<Info> {
    constructor() {
        super("ApiProtos.Other.DataList.Info", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "logo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "count", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Info>): Info {
        const message = { id: 0, name: "", logo: "", count: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Info>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Info): Info {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string logo */ 3:
                    message.logo = reader.string();
                    break;
                case /* int32 count */ 4:
                    message.count = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Info, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string logo = 3; */
        if (message.logo !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.logo);
        /* int32 count = 4; */
        if (message.count !== 0)
            writer.tag(4, WireType.Varint).int32(message.count);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Other.DataList.Info
 */
export const Info = new Info$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AreaList$Type extends MessageType<AreaList> {
    constructor() {
        super("ApiProtos.Other.DataList.AreaList", [
            { no: 1, name: "areas", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Info },
            { no: 2, name: "popularCountries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AreaList_PopularCountry },
            { no: 3, name: "popularLeagues", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AreaList_PopularLeague }
        ]);
    }
    create(value?: PartialMessage<AreaList>): AreaList {
        const message = { areas: [], popularCountries: [], popularLeagues: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AreaList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AreaList): AreaList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ApiProtos.Other.DataList.Info areas */ 1:
                    message.areas.push(Info.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ApiProtos.Other.DataList.AreaList.PopularCountry popularCountries */ 2:
                    message.popularCountries.push(AreaList_PopularCountry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ApiProtos.Other.DataList.AreaList.PopularLeague popularLeagues */ 3:
                    message.popularLeagues.push(AreaList_PopularLeague.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AreaList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ApiProtos.Other.DataList.Info areas = 1; */
        for (let i = 0; i < message.areas.length; i++)
            Info.internalBinaryWrite(message.areas[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Other.DataList.AreaList.PopularCountry popularCountries = 2; */
        for (let i = 0; i < message.popularCountries.length; i++)
            AreaList_PopularCountry.internalBinaryWrite(message.popularCountries[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Other.DataList.AreaList.PopularLeague popularLeagues = 3; */
        for (let i = 0; i < message.popularLeagues.length; i++)
            AreaList_PopularLeague.internalBinaryWrite(message.popularLeagues[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Other.DataList.AreaList
 */
export const AreaList = new AreaList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AreaList_PopularCountry$Type extends MessageType<AreaList_PopularCountry> {
    constructor() {
        super("ApiProtos.Other.DataList.AreaList.PopularCountry", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "logo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "areaId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<AreaList_PopularCountry>): AreaList_PopularCountry {
        const message = { id: 0, name: "", logo: "", areaId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AreaList_PopularCountry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AreaList_PopularCountry): AreaList_PopularCountry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string logo */ 3:
                    message.logo = reader.string();
                    break;
                case /* int32 areaId */ 4:
                    message.areaId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AreaList_PopularCountry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string logo = 3; */
        if (message.logo !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.logo);
        /* int32 areaId = 4; */
        if (message.areaId !== 0)
            writer.tag(4, WireType.Varint).int32(message.areaId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Other.DataList.AreaList.PopularCountry
 */
export const AreaList_PopularCountry = new AreaList_PopularCountry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AreaList_PopularLeague$Type extends MessageType<AreaList_PopularLeague> {
    constructor() {
        super("ApiProtos.Other.DataList.AreaList.PopularLeague", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "logo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "areaName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "countryName", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AreaList_PopularLeague>): AreaList_PopularLeague {
        const message = { id: 0, name: "", logo: "", areaName: "", countryName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AreaList_PopularLeague>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AreaList_PopularLeague): AreaList_PopularLeague {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string logo */ 3:
                    message.logo = reader.string();
                    break;
                case /* string areaName */ 4:
                    message.areaName = reader.string();
                    break;
                case /* string countryName */ 5:
                    message.countryName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AreaList_PopularLeague, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string logo = 3; */
        if (message.logo !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.logo);
        /* string areaName = 4; */
        if (message.areaName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.areaName);
        /* string countryName = 5; */
        if (message.countryName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.countryName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Other.DataList.AreaList.PopularLeague
 */
export const AreaList_PopularLeague = new AreaList_PopularLeague$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CountryList$Type extends MessageType<CountryList> {
    constructor() {
        super("ApiProtos.Other.DataList.CountryList", [
            { no: 1, name: "payload", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Info }
        ]);
    }
    create(value?: PartialMessage<CountryList>): CountryList {
        const message = { payload: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CountryList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CountryList): CountryList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ApiProtos.Other.DataList.Info payload */ 1:
                    message.payload.push(Info.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CountryList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ApiProtos.Other.DataList.Info payload = 1; */
        for (let i = 0; i < message.payload.length; i++)
            Info.internalBinaryWrite(message.payload[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Other.DataList.CountryList
 */
export const CountryList = new CountryList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LeagueList$Type extends MessageType<LeagueList> {
    constructor() {
        super("ApiProtos.Other.DataList.LeagueList", [
            { no: 1, name: "payload", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Info }
        ]);
    }
    create(value?: PartialMessage<LeagueList>): LeagueList {
        const message = { payload: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LeagueList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LeagueList): LeagueList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ApiProtos.Other.DataList.Info payload */ 1:
                    message.payload.push(Info.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LeagueList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ApiProtos.Other.DataList.Info payload = 1; */
        for (let i = 0; i < message.payload.length; i++)
            Info.internalBinaryWrite(message.payload[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Other.DataList.LeagueList
 */
export const LeagueList = new LeagueList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamList$Type extends MessageType<TeamList> {
    constructor() {
        super("ApiProtos.Other.DataList.TeamList", [
            { no: 1, name: "payload", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Info }
        ]);
    }
    create(value?: PartialMessage<TeamList>): TeamList {
        const message = { payload: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamList): TeamList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ApiProtos.Other.DataList.Info payload */ 1:
                    message.payload.push(Info.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ApiProtos.Other.DataList.Info payload = 1; */
        for (let i = 0; i < message.payload.length; i++)
            Info.internalBinaryWrite(message.payload[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Other.DataList.TeamList
 */
export const TeamList = new TeamList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerList$Type extends MessageType<PlayerList> {
    constructor() {
        super("ApiProtos.Other.DataList.PlayerList", [
            { no: 1, name: "payload", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Info }
        ]);
    }
    create(value?: PartialMessage<PlayerList>): PlayerList {
        const message = { payload: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerList): PlayerList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ApiProtos.Other.DataList.Info payload */ 1:
                    message.payload.push(Info.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ApiProtos.Other.DataList.Info payload = 1; */
        for (let i = 0; i < message.payload.length; i++)
            Info.internalBinaryWrite(message.payload[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Other.DataList.PlayerList
 */
export const PlayerList = new PlayerList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AreaCountries$Type extends MessageType<AreaCountries> {
    constructor() {
        super("ApiProtos.Other.DataList.AreaCountries", [
            { no: 1, name: "payload", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AreaCountries_AreaCountryData }
        ]);
    }
    create(value?: PartialMessage<AreaCountries>): AreaCountries {
        const message = { payload: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AreaCountries>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AreaCountries): AreaCountries {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ApiProtos.Other.DataList.AreaCountries.AreaCountryData payload */ 1:
                    message.payload.push(AreaCountries_AreaCountryData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AreaCountries, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ApiProtos.Other.DataList.AreaCountries.AreaCountryData payload = 1; */
        for (let i = 0; i < message.payload.length; i++)
            AreaCountries_AreaCountryData.internalBinaryWrite(message.payload[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Other.DataList.AreaCountries
 */
export const AreaCountries = new AreaCountries$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AreaCountries_AreaCountryData$Type extends MessageType<AreaCountries_AreaCountryData> {
    constructor() {
        super("ApiProtos.Other.DataList.AreaCountries.AreaCountryData", [
            { no: 1, name: "areaId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "areaName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "areaLogo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "countryCount", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "countries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Info }
        ]);
    }
    create(value?: PartialMessage<AreaCountries_AreaCountryData>): AreaCountries_AreaCountryData {
        const message = { areaId: 0, areaName: "", areaLogo: "", countryCount: 0, countries: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AreaCountries_AreaCountryData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AreaCountries_AreaCountryData): AreaCountries_AreaCountryData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 areaId */ 1:
                    message.areaId = reader.int32();
                    break;
                case /* string areaName */ 2:
                    message.areaName = reader.string();
                    break;
                case /* string areaLogo */ 3:
                    message.areaLogo = reader.string();
                    break;
                case /* int32 countryCount */ 4:
                    message.countryCount = reader.int32();
                    break;
                case /* repeated ApiProtos.Other.DataList.Info countries */ 5:
                    message.countries.push(Info.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AreaCountries_AreaCountryData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 areaId = 1; */
        if (message.areaId !== 0)
            writer.tag(1, WireType.Varint).int32(message.areaId);
        /* string areaName = 2; */
        if (message.areaName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.areaName);
        /* string areaLogo = 3; */
        if (message.areaLogo !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.areaLogo);
        /* int32 countryCount = 4; */
        if (message.countryCount !== 0)
            writer.tag(4, WireType.Varint).int32(message.countryCount);
        /* repeated ApiProtos.Other.DataList.Info countries = 5; */
        for (let i = 0; i < message.countries.length; i++)
            Info.internalBinaryWrite(message.countries[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Other.DataList.AreaCountries.AreaCountryData
 */
export const AreaCountries_AreaCountryData = new AreaCountries_AreaCountryData$Type();
