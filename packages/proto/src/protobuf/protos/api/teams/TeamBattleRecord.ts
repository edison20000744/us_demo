// @generated by protobuf-ts 2.5.0
// @generated from protobuf file "protobuf/protos/api/teams/TeamBattleRecord.proto" (package "ApiProtos.Teams.TeamBattleRecord", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ApiProtos.Teams.TeamBattleRecord.TeamBattleRecord
 */
export interface TeamBattleRecord {
    /**
     * @generated from protobuf field: int32 win = 1;
     */
    win: number; // 勝場數
    /**
     * @generated from protobuf field: int32 lost = 2;
     */
    lost: number; // 敗場數 
    /**
     * @generated from protobuf field: int32 tie = 3;
     */
    tie: number; // 和局數
    /**
     * @generated from protobuf field: int32 total = 4;
     */
    total: number; // 總場數
    /**
     * @generated from protobuf field: int32 winRate = 5;
     */
    winRate: number; // 勝率
    /**
     * @generated from protobuf field: int32 bigCount = 6;
     */
    bigCount: number; // 大球數量
    /**
     * @generated from protobuf field: int32 bigRate = 7;
     */
    bigRate: number; // 大球率
    /**
     * @generated from protobuf field: int32 smallCount = 8;
     */
    smallCount: number; // 小球數量
    /**
     * @generated from protobuf field: int32 smallRate = 9;
     */
    smallRate: number; // 小球率
    /**
     * @generated from protobuf field: repeated ApiProtos.Teams.TeamBattleRecord.TeamBattleRecord.Match matches = 10;
     */
    matches: TeamBattleRecord_Match[]; // 賽事資訊
    /**
     * @generated from protobuf field: repeated ApiProtos.Teams.TeamBattleRecord.TeamBattleRecord.League leagues = 11;
     */
    leagues: TeamBattleRecord_League[]; // 聯盟資訊
    /**
     * @generated from protobuf field: repeated ApiProtos.Teams.TeamBattleRecord.TeamBattleRecord.Team teams = 12;
     */
    teams: TeamBattleRecord_Team[]; // 聯盟資訊
    /**
     * @generated from protobuf field: int32 lastPage = 13;
     */
    lastPage: number; // 分頁 - 最後一頁頁數
}
/**
 * @generated from protobuf message ApiProtos.Teams.TeamBattleRecord.TeamBattleRecord.Match
 */
export interface TeamBattleRecord_Match {
    /**
     * @generated from protobuf field: int32 matchId = 1;
     */
    matchId: number; // 比賽id
    /**
     * @generated from protobuf field: int32 leagueId = 2;
     */
    leagueId: number; // 聯盟ID
    /**
     * @generated from protobuf field: int32 openDate = 3;
     */
    openDate: number; // 比賽時間
    /**
     * @generated from protobuf field: int32 homeId = 4;
     */
    homeId: number; // 主隊ID
    /**
     * @generated from protobuf field: int32 awayId = 5;
     */
    awayId: number; // 客隊ID
    /**
     * @generated from protobuf field: int32 homeScore = 6;
     */
    homeScore: number; // 主隊比分
    /**
     * @generated from protobuf field: int32 awayScore = 7;
     */
    awayScore: number; // 客隊比分
    /**
     * @generated from protobuf field: int32 homeHalfScore = 8;
     */
    homeHalfScore: number; // 主隊半場比分
    /**
     * @generated from protobuf field: int32 awayHalfScore = 9;
     */
    awayHalfScore: number; // 客隊半場比分
    /**
     * @generated from protobuf field: int32 homeCorner = 10;
     */
    homeCorner: number; // 主隊角球數量
    /**
     * @generated from protobuf field: int32 awayCorner = 11;
     */
    awayCorner: number; // 客隊角球數量
    /**
     * @generated from protobuf field: string bsHome = 12;
     */
    bsHome: string; // 大球賠率
    /**
     * @generated from protobuf field: string bsHandicap = 13;
     */
    bsHandicap: string; // 大小球盤口
    /**
     * @generated from protobuf field: string bsAway = 14;
     */
    bsAway: string; // 小球賠率
    /**
     * @generated from protobuf field: string bsResult = 15;
     */
    bsResult: string; // 大小球 大/小/走
    /**
     * @generated from protobuf field: string asiaHome = 16;
     */
    asiaHome: string; // 讓球主勝賠率
    /**
     * @generated from protobuf field: string asiaHandicap = 17;
     */
    asiaHandicap: string; // 讓球平手賠率
    /**
     * @generated from protobuf field: string asiaAway = 18;
     */
    asiaAway: string; // 讓球客勝賠率
    /**
     * @generated from protobuf field: string asiaResult = 19;
     */
    asiaResult: string; // 讓球結果 home(主勝)/away(客勝)/tie(平手)
    /**
     * @generated from protobuf field: string euHome = 20;
     */
    euHome: string; // 歐賠主勝賠率
    /**
     * @generated from protobuf field: string euHandicap = 21;
     */
    euHandicap: string; // 歐賠平手賠率
    /**
     * @generated from protobuf field: string euAway = 22;
     */
    euAway: string; // 歐賠客勝賠率
    /**
     * @generated from protobuf field: string euResult = 23;
     */
    euResult: string; // 歐賠結果 home(主勝)/away(客勝)/tie(平手)
}
/**
 * @generated from protobuf message ApiProtos.Teams.TeamBattleRecord.TeamBattleRecord.League
 */
export interface TeamBattleRecord_League {
    /**
     * @generated from protobuf field: int32 leagueId = 1;
     */
    leagueId: number; // 聯盟id
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string; // 聯盟名稱
    /**
     * @generated from protobuf field: string shortName = 3;
     */
    shortName: string; // 聯盟簡稱
    /**
     * @generated from protobuf field: string logo = 4;
     */
    logo: string; // logo
}
/**
 * @generated from protobuf message ApiProtos.Teams.TeamBattleRecord.TeamBattleRecord.Team
 */
export interface TeamBattleRecord_Team {
    /**
     * @generated from protobuf field: int32 teamId = 1;
     */
    teamId: number; // 球隊id
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string; // 球隊名稱
    /**
     * @generated from protobuf field: string shortName = 3;
     */
    shortName: string; // 球隊簡稱
    /**
     * @generated from protobuf field: string logo = 4;
     */
    logo: string; // logo
}
// @generated message type with reflection information, may provide speed optimized methods
class TeamBattleRecord$Type extends MessageType<TeamBattleRecord> {
    constructor() {
        super("ApiProtos.Teams.TeamBattleRecord.TeamBattleRecord", [
            { no: 1, name: "win", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "lost", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "tie", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "total", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "winRate", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "bigCount", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "bigRate", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "smallCount", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "smallRate", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "matches", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TeamBattleRecord_Match },
            { no: 11, name: "leagues", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TeamBattleRecord_League },
            { no: 12, name: "teams", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TeamBattleRecord_Team },
            { no: 13, name: "lastPage", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TeamBattleRecord>): TeamBattleRecord {
        const message = { win: 0, lost: 0, tie: 0, total: 0, winRate: 0, bigCount: 0, bigRate: 0, smallCount: 0, smallRate: 0, matches: [], leagues: [], teams: [], lastPage: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamBattleRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamBattleRecord): TeamBattleRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 win */ 1:
                    message.win = reader.int32();
                    break;
                case /* int32 lost */ 2:
                    message.lost = reader.int32();
                    break;
                case /* int32 tie */ 3:
                    message.tie = reader.int32();
                    break;
                case /* int32 total */ 4:
                    message.total = reader.int32();
                    break;
                case /* int32 winRate */ 5:
                    message.winRate = reader.int32();
                    break;
                case /* int32 bigCount */ 6:
                    message.bigCount = reader.int32();
                    break;
                case /* int32 bigRate */ 7:
                    message.bigRate = reader.int32();
                    break;
                case /* int32 smallCount */ 8:
                    message.smallCount = reader.int32();
                    break;
                case /* int32 smallRate */ 9:
                    message.smallRate = reader.int32();
                    break;
                case /* repeated ApiProtos.Teams.TeamBattleRecord.TeamBattleRecord.Match matches */ 10:
                    message.matches.push(TeamBattleRecord_Match.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ApiProtos.Teams.TeamBattleRecord.TeamBattleRecord.League leagues */ 11:
                    message.leagues.push(TeamBattleRecord_League.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ApiProtos.Teams.TeamBattleRecord.TeamBattleRecord.Team teams */ 12:
                    message.teams.push(TeamBattleRecord_Team.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 lastPage */ 13:
                    message.lastPage = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamBattleRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 win = 1; */
        if (message.win !== 0)
            writer.tag(1, WireType.Varint).int32(message.win);
        /* int32 lost = 2; */
        if (message.lost !== 0)
            writer.tag(2, WireType.Varint).int32(message.lost);
        /* int32 tie = 3; */
        if (message.tie !== 0)
            writer.tag(3, WireType.Varint).int32(message.tie);
        /* int32 total = 4; */
        if (message.total !== 0)
            writer.tag(4, WireType.Varint).int32(message.total);
        /* int32 winRate = 5; */
        if (message.winRate !== 0)
            writer.tag(5, WireType.Varint).int32(message.winRate);
        /* int32 bigCount = 6; */
        if (message.bigCount !== 0)
            writer.tag(6, WireType.Varint).int32(message.bigCount);
        /* int32 bigRate = 7; */
        if (message.bigRate !== 0)
            writer.tag(7, WireType.Varint).int32(message.bigRate);
        /* int32 smallCount = 8; */
        if (message.smallCount !== 0)
            writer.tag(8, WireType.Varint).int32(message.smallCount);
        /* int32 smallRate = 9; */
        if (message.smallRate !== 0)
            writer.tag(9, WireType.Varint).int32(message.smallRate);
        /* repeated ApiProtos.Teams.TeamBattleRecord.TeamBattleRecord.Match matches = 10; */
        for (let i = 0; i < message.matches.length; i++)
            TeamBattleRecord_Match.internalBinaryWrite(message.matches[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Teams.TeamBattleRecord.TeamBattleRecord.League leagues = 11; */
        for (let i = 0; i < message.leagues.length; i++)
            TeamBattleRecord_League.internalBinaryWrite(message.leagues[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Teams.TeamBattleRecord.TeamBattleRecord.Team teams = 12; */
        for (let i = 0; i < message.teams.length; i++)
            TeamBattleRecord_Team.internalBinaryWrite(message.teams[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* int32 lastPage = 13; */
        if (message.lastPage !== 0)
            writer.tag(13, WireType.Varint).int32(message.lastPage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Teams.TeamBattleRecord.TeamBattleRecord
 */
export const TeamBattleRecord = new TeamBattleRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamBattleRecord_Match$Type extends MessageType<TeamBattleRecord_Match> {
    constructor() {
        super("ApiProtos.Teams.TeamBattleRecord.TeamBattleRecord.Match", [
            { no: 1, name: "matchId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "leagueId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "openDate", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "homeId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "awayId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "homeScore", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "awayScore", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "homeHalfScore", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "awayHalfScore", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "homeCorner", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "awayCorner", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "bsHome", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "bsHandicap", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "bsAway", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "bsResult", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "asiaHome", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "asiaHandicap", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "asiaAway", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "asiaResult", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "euHome", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "euHandicap", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 22, name: "euAway", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 23, name: "euResult", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TeamBattleRecord_Match>): TeamBattleRecord_Match {
        const message = { matchId: 0, leagueId: 0, openDate: 0, homeId: 0, awayId: 0, homeScore: 0, awayScore: 0, homeHalfScore: 0, awayHalfScore: 0, homeCorner: 0, awayCorner: 0, bsHome: "", bsHandicap: "", bsAway: "", bsResult: "", asiaHome: "", asiaHandicap: "", asiaAway: "", asiaResult: "", euHome: "", euHandicap: "", euAway: "", euResult: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamBattleRecord_Match>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamBattleRecord_Match): TeamBattleRecord_Match {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 matchId */ 1:
                    message.matchId = reader.int32();
                    break;
                case /* int32 leagueId */ 2:
                    message.leagueId = reader.int32();
                    break;
                case /* int32 openDate */ 3:
                    message.openDate = reader.int32();
                    break;
                case /* int32 homeId */ 4:
                    message.homeId = reader.int32();
                    break;
                case /* int32 awayId */ 5:
                    message.awayId = reader.int32();
                    break;
                case /* int32 homeScore */ 6:
                    message.homeScore = reader.int32();
                    break;
                case /* int32 awayScore */ 7:
                    message.awayScore = reader.int32();
                    break;
                case /* int32 homeHalfScore */ 8:
                    message.homeHalfScore = reader.int32();
                    break;
                case /* int32 awayHalfScore */ 9:
                    message.awayHalfScore = reader.int32();
                    break;
                case /* int32 homeCorner */ 10:
                    message.homeCorner = reader.int32();
                    break;
                case /* int32 awayCorner */ 11:
                    message.awayCorner = reader.int32();
                    break;
                case /* string bsHome */ 12:
                    message.bsHome = reader.string();
                    break;
                case /* string bsHandicap */ 13:
                    message.bsHandicap = reader.string();
                    break;
                case /* string bsAway */ 14:
                    message.bsAway = reader.string();
                    break;
                case /* string bsResult */ 15:
                    message.bsResult = reader.string();
                    break;
                case /* string asiaHome */ 16:
                    message.asiaHome = reader.string();
                    break;
                case /* string asiaHandicap */ 17:
                    message.asiaHandicap = reader.string();
                    break;
                case /* string asiaAway */ 18:
                    message.asiaAway = reader.string();
                    break;
                case /* string asiaResult */ 19:
                    message.asiaResult = reader.string();
                    break;
                case /* string euHome */ 20:
                    message.euHome = reader.string();
                    break;
                case /* string euHandicap */ 21:
                    message.euHandicap = reader.string();
                    break;
                case /* string euAway */ 22:
                    message.euAway = reader.string();
                    break;
                case /* string euResult */ 23:
                    message.euResult = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamBattleRecord_Match, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 matchId = 1; */
        if (message.matchId !== 0)
            writer.tag(1, WireType.Varint).int32(message.matchId);
        /* int32 leagueId = 2; */
        if (message.leagueId !== 0)
            writer.tag(2, WireType.Varint).int32(message.leagueId);
        /* int32 openDate = 3; */
        if (message.openDate !== 0)
            writer.tag(3, WireType.Varint).int32(message.openDate);
        /* int32 homeId = 4; */
        if (message.homeId !== 0)
            writer.tag(4, WireType.Varint).int32(message.homeId);
        /* int32 awayId = 5; */
        if (message.awayId !== 0)
            writer.tag(5, WireType.Varint).int32(message.awayId);
        /* int32 homeScore = 6; */
        if (message.homeScore !== 0)
            writer.tag(6, WireType.Varint).int32(message.homeScore);
        /* int32 awayScore = 7; */
        if (message.awayScore !== 0)
            writer.tag(7, WireType.Varint).int32(message.awayScore);
        /* int32 homeHalfScore = 8; */
        if (message.homeHalfScore !== 0)
            writer.tag(8, WireType.Varint).int32(message.homeHalfScore);
        /* int32 awayHalfScore = 9; */
        if (message.awayHalfScore !== 0)
            writer.tag(9, WireType.Varint).int32(message.awayHalfScore);
        /* int32 homeCorner = 10; */
        if (message.homeCorner !== 0)
            writer.tag(10, WireType.Varint).int32(message.homeCorner);
        /* int32 awayCorner = 11; */
        if (message.awayCorner !== 0)
            writer.tag(11, WireType.Varint).int32(message.awayCorner);
        /* string bsHome = 12; */
        if (message.bsHome !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.bsHome);
        /* string bsHandicap = 13; */
        if (message.bsHandicap !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.bsHandicap);
        /* string bsAway = 14; */
        if (message.bsAway !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.bsAway);
        /* string bsResult = 15; */
        if (message.bsResult !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.bsResult);
        /* string asiaHome = 16; */
        if (message.asiaHome !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.asiaHome);
        /* string asiaHandicap = 17; */
        if (message.asiaHandicap !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.asiaHandicap);
        /* string asiaAway = 18; */
        if (message.asiaAway !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.asiaAway);
        /* string asiaResult = 19; */
        if (message.asiaResult !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.asiaResult);
        /* string euHome = 20; */
        if (message.euHome !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.euHome);
        /* string euHandicap = 21; */
        if (message.euHandicap !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.euHandicap);
        /* string euAway = 22; */
        if (message.euAway !== "")
            writer.tag(22, WireType.LengthDelimited).string(message.euAway);
        /* string euResult = 23; */
        if (message.euResult !== "")
            writer.tag(23, WireType.LengthDelimited).string(message.euResult);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Teams.TeamBattleRecord.TeamBattleRecord.Match
 */
export const TeamBattleRecord_Match = new TeamBattleRecord_Match$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamBattleRecord_League$Type extends MessageType<TeamBattleRecord_League> {
    constructor() {
        super("ApiProtos.Teams.TeamBattleRecord.TeamBattleRecord.League", [
            { no: 1, name: "leagueId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "shortName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "logo", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TeamBattleRecord_League>): TeamBattleRecord_League {
        const message = { leagueId: 0, name: "", shortName: "", logo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamBattleRecord_League>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamBattleRecord_League): TeamBattleRecord_League {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 leagueId */ 1:
                    message.leagueId = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string shortName */ 3:
                    message.shortName = reader.string();
                    break;
                case /* string logo */ 4:
                    message.logo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamBattleRecord_League, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 leagueId = 1; */
        if (message.leagueId !== 0)
            writer.tag(1, WireType.Varint).int32(message.leagueId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string shortName = 3; */
        if (message.shortName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.shortName);
        /* string logo = 4; */
        if (message.logo !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.logo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Teams.TeamBattleRecord.TeamBattleRecord.League
 */
export const TeamBattleRecord_League = new TeamBattleRecord_League$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamBattleRecord_Team$Type extends MessageType<TeamBattleRecord_Team> {
    constructor() {
        super("ApiProtos.Teams.TeamBattleRecord.TeamBattleRecord.Team", [
            { no: 1, name: "teamId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "shortName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "logo", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TeamBattleRecord_Team>): TeamBattleRecord_Team {
        const message = { teamId: 0, name: "", shortName: "", logo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamBattleRecord_Team>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamBattleRecord_Team): TeamBattleRecord_Team {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 teamId */ 1:
                    message.teamId = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string shortName */ 3:
                    message.shortName = reader.string();
                    break;
                case /* string logo */ 4:
                    message.logo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamBattleRecord_Team, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 teamId = 1; */
        if (message.teamId !== 0)
            writer.tag(1, WireType.Varint).int32(message.teamId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string shortName = 3; */
        if (message.shortName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.shortName);
        /* string logo = 4; */
        if (message.logo !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.logo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Teams.TeamBattleRecord.TeamBattleRecord.Team
 */
export const TeamBattleRecord_Team = new TeamBattleRecord_Team$Type();
