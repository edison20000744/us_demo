// @generated by protobuf-ts 2.5.0
// @generated from protobuf file "protobuf/protos/api/teams/TeamDetail.proto" (package "ApiProtos.Teams.TeamDetail", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { MatchesSchedule } from "../basic/MatchesData";
import { BasicInfo } from "../basic/BasicData";
/**
 * @generated from protobuf message ApiProtos.Teams.TeamDetail.TeamDetail
 */
export interface TeamDetail {
    /**
     * @generated from protobuf field: ApiProtos.Teams.TeamDetail.TeamDetail.Info info = 1;
     */
    info?: TeamDetail_Info; // 基本資訊
    /**
     * @generated from protobuf field: repeated ApiProtos.Teams.TeamDetail.TeamDetail.Table tables = 2;
     */
    tables: TeamDetail_Table[]; // 積分榜
    /**
     * @generated from protobuf field: repeated ApiProtos.Teams.TeamDetail.TeamDetail.ShooterRank shooterRank = 3;
     */
    shooterRank: TeamDetail_ShooterRank[]; // 射手榜
    /**
     * @generated from protobuf field: repeated ApiProtos.Teams.TeamDetail.TeamDetail.MarketValueRank marketValueRank = 4;
     */
    marketValueRank: TeamDetail_MarketValueRank[]; // 市值榜
    /**
     * @generated from protobuf field: ApiProtos.Teams.TeamDetail.TeamDetail.Matches matches = 5;
     */
    matches?: TeamDetail_Matches; // 賽事資訊
    /**
     * @generated from protobuf field: repeated ApiProtos.Teams.TeamDetail.TeamDetail.Seasons seasons = 6;
     */
    seasons: TeamDetail_Seasons[]; // 賽季資訊
    /**
     * @generated from protobuf field: repeated ApiProtos.Basic.BasicData.BasicInfo leagues = 7;
     */
    leagues: BasicInfo[]; // 聯盟資訊
    /**
     * @generated from protobuf field: repeated ApiProtos.Basic.BasicData.BasicInfo teams = 8;
     */
    teams: BasicInfo[]; // 球隊資訊
    /**
     * @generated from protobuf field: repeated ApiProtos.Basic.BasicData.BasicInfo players = 9;
     */
    players: BasicInfo[]; // 球員資訊
}
/**
 * @generated from protobuf message ApiProtos.Teams.TeamDetail.TeamDetail.Venue
 */
export interface TeamDetail_Venue {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string; // 場館名稱
    /**
     * @generated from protobuf field: int32 capacity = 2;
     */
    capacity: number; // 場館容量
}
/**
 * @generated from protobuf message ApiProtos.Teams.TeamDetail.TeamDetail.Honors
 */
export interface TeamDetail_Honors {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string; // 榮耀名稱
    /**
     * @generated from protobuf field: string logo = 2;
     */
    logo: string; // 榮耀LOGO
    /**
     * @generated from protobuf field: int32 count = 3;
     */
    count: number; // 榮耀數量
    /**
     * @generated from protobuf field: repeated string season = 4;
     */
    season: string[]; // 獲得賽季
}
/**
 * @generated from protobuf message ApiProtos.Teams.TeamDetail.TeamDetail.Info
 */
export interface TeamDetail_Info {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number; // 隊伍ID
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string; // 隊伍名稱
    /**
     * @generated from protobuf field: string logo = 3;
     */
    logo: string; // 隊伍LOGO
    /**
     * @generated from protobuf field: int32 areaId = 4;
     */
    areaId: number; // 區域ID
    /**
     * @generated from protobuf field: int32 countryId = 5;
     */
    countryId: number; // 國家ID 
    /**
     * @generated from protobuf field: string country = 6;
     */
    country: string; // 隊伍國家
    /**
     * @generated from protobuf field: string countryLogo = 7;
     */
    countryLogo: string; // 隊伍國家LOGO
    /**
     * @generated from protobuf field: string leagueId = 8;
     */
    leagueId: string; // 聯盟ID
    /**
     * @generated from protobuf field: string found = 9;
     */
    found: string; // 隊伍成立日期
    /**
     * @generated from protobuf field: ApiProtos.Teams.TeamDetail.TeamDetail.Venue venue = 10;
     */
    venue?: TeamDetail_Venue; // 隊伍場館資訊
    /**
     * @generated from protobuf field: string marketValue = 11;
     */
    marketValue: string; // 隊伍市值
    /**
     * @generated from protobuf field: string website = 12;
     */
    website: string; // 隊伍官網
    /**
     * @generated from protobuf field: int32 participatePlayer = 13;
     */
    participatePlayer: number; // 餐數球員數量
    /**
     * @generated from protobuf field: repeated ApiProtos.Teams.TeamDetail.TeamDetail.Honors honors = 14;
     */
    honors: TeamDetail_Honors[]; // 榮耀資訊
}
/**
 * @generated from protobuf message ApiProtos.Teams.TeamDetail.TeamDetail.Table
 */
export interface TeamDetail_Table {
    /**
     * @generated from protobuf field: int32 leagueId = 1;
     */
    leagueId: number; // 聯盟ID
    /**
     * @generated from protobuf field: string stageName = 2;
     */
    stageName: string; // 階段名稱
    /**
     * @generated from protobuf field: int32 position = 3;
     */
    position: number; // 隊伍排名
    /**
     * @generated from protobuf field: int32 points = 4;
     */
    points: number; // 隊伍積分
    /**
     * @generated from protobuf field: int32 won = 5;
     */
    won: number; // 隊伍獲勝場數
    /**
     * @generated from protobuf field: int32 draw = 6;
     */
    draw: number; // 隊伍平局廠商
    /**
     * @generated from protobuf field: int32 loss = 7;
     */
    loss: number; // 隊伍敗場場數
    /**
     * @generated from protobuf field: string note = 8;
     */
    note: string; // 備註
}
/**
 * @generated from protobuf message ApiProtos.Teams.TeamDetail.TeamDetail.ShooterRank
 */
export interface TeamDetail_ShooterRank {
    /**
     * @generated from protobuf field: int32 playerId = 1;
     */
    playerId: number; // 球員ID
    /**
     * @generated from protobuf field: int32 position = 2;
     */
    position: number; // 排名
    /**
     * @generated from protobuf field: int32 total = 3;
     */
    total: number; // 總進球數
}
/**
 * @generated from protobuf message ApiProtos.Teams.TeamDetail.TeamDetail.MarketValueRank
 */
export interface TeamDetail_MarketValueRank {
    /**
     * @generated from protobuf field: int32 playerId = 1;
     */
    playerId: number; // 球員ID
    /**
     * @generated from protobuf field: int32 position = 2;
     */
    position: number; // 排名
    /**
     * @generated from protobuf field: int32 total = 3;
     */
    total: number; // 市值(int)
    /**
     * @generated from protobuf field: string marketValue = 4;
     */
    marketValue: string; // 市值(已轉換)
}
/**
 * @generated from protobuf message ApiProtos.Teams.TeamDetail.TeamDetail.Matches
 */
export interface TeamDetail_Matches {
    /**
     * @generated from protobuf field: repeated ApiProtos.Basic.MatchesData.MatchesSchedule futureMatches = 1;
     */
    futureMatches: MatchesSchedule[]; // 未來賽事資訊
    /**
     * @generated from protobuf field: repeated ApiProtos.Basic.MatchesData.MatchesSchedule pastMatches = 2;
     */
    pastMatches: MatchesSchedule[]; // 過去賽事資訊
    /**
     * @generated from protobuf field: string nextUrl = 3;
     */
    nextUrl: string; // 分頁連結
    /**
     * @generated from protobuf field: int32 totalPage = 4;
     */
    totalPage: number; // 總頁數
}
/**
 * @generated from protobuf message ApiProtos.Teams.TeamDetail.TeamDetail.Season
 */
export interface TeamDetail_Season {
    /**
     * @generated from protobuf field: int32 seasonId = 1;
     */
    seasonId: number; // 賽事ID
    /**
     * @generated from protobuf field: int32 leagueId = 2;
     */
    leagueId: number; // 聯盟ID
}
/**
 * @generated from protobuf message ApiProtos.Teams.TeamDetail.TeamDetail.Seasons
 */
export interface TeamDetail_Seasons {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string; // 賽季名稱
    /**
     * @generated from protobuf field: repeated ApiProtos.Teams.TeamDetail.TeamDetail.Season seasons = 2;
     */
    seasons: TeamDetail_Season[]; // 賽季資訊
}
// @generated message type with reflection information, may provide speed optimized methods
class TeamDetail$Type extends MessageType<TeamDetail> {
    constructor() {
        super("ApiProtos.Teams.TeamDetail.TeamDetail", [
            { no: 1, name: "info", kind: "message", T: () => TeamDetail_Info },
            { no: 2, name: "tables", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TeamDetail_Table },
            { no: 3, name: "shooterRank", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TeamDetail_ShooterRank },
            { no: 4, name: "marketValueRank", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TeamDetail_MarketValueRank },
            { no: 5, name: "matches", kind: "message", T: () => TeamDetail_Matches },
            { no: 6, name: "seasons", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TeamDetail_Seasons },
            { no: 7, name: "leagues", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BasicInfo },
            { no: 8, name: "teams", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BasicInfo },
            { no: 9, name: "players", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BasicInfo }
        ]);
    }
    create(value?: PartialMessage<TeamDetail>): TeamDetail {
        const message = { tables: [], shooterRank: [], marketValueRank: [], seasons: [], leagues: [], teams: [], players: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamDetail): TeamDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ApiProtos.Teams.TeamDetail.TeamDetail.Info info */ 1:
                    message.info = TeamDetail_Info.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                case /* repeated ApiProtos.Teams.TeamDetail.TeamDetail.Table tables */ 2:
                    message.tables.push(TeamDetail_Table.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ApiProtos.Teams.TeamDetail.TeamDetail.ShooterRank shooterRank */ 3:
                    message.shooterRank.push(TeamDetail_ShooterRank.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ApiProtos.Teams.TeamDetail.TeamDetail.MarketValueRank marketValueRank */ 4:
                    message.marketValueRank.push(TeamDetail_MarketValueRank.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* ApiProtos.Teams.TeamDetail.TeamDetail.Matches matches */ 5:
                    message.matches = TeamDetail_Matches.internalBinaryRead(reader, reader.uint32(), options, message.matches);
                    break;
                case /* repeated ApiProtos.Teams.TeamDetail.TeamDetail.Seasons seasons */ 6:
                    message.seasons.push(TeamDetail_Seasons.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ApiProtos.Basic.BasicData.BasicInfo leagues */ 7:
                    message.leagues.push(BasicInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ApiProtos.Basic.BasicData.BasicInfo teams */ 8:
                    message.teams.push(BasicInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ApiProtos.Basic.BasicData.BasicInfo players */ 9:
                    message.players.push(BasicInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ApiProtos.Teams.TeamDetail.TeamDetail.Info info = 1; */
        if (message.info)
            TeamDetail_Info.internalBinaryWrite(message.info, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Teams.TeamDetail.TeamDetail.Table tables = 2; */
        for (let i = 0; i < message.tables.length; i++)
            TeamDetail_Table.internalBinaryWrite(message.tables[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Teams.TeamDetail.TeamDetail.ShooterRank shooterRank = 3; */
        for (let i = 0; i < message.shooterRank.length; i++)
            TeamDetail_ShooterRank.internalBinaryWrite(message.shooterRank[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Teams.TeamDetail.TeamDetail.MarketValueRank marketValueRank = 4; */
        for (let i = 0; i < message.marketValueRank.length; i++)
            TeamDetail_MarketValueRank.internalBinaryWrite(message.marketValueRank[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* ApiProtos.Teams.TeamDetail.TeamDetail.Matches matches = 5; */
        if (message.matches)
            TeamDetail_Matches.internalBinaryWrite(message.matches, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Teams.TeamDetail.TeamDetail.Seasons seasons = 6; */
        for (let i = 0; i < message.seasons.length; i++)
            TeamDetail_Seasons.internalBinaryWrite(message.seasons[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Basic.BasicData.BasicInfo leagues = 7; */
        for (let i = 0; i < message.leagues.length; i++)
            BasicInfo.internalBinaryWrite(message.leagues[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Basic.BasicData.BasicInfo teams = 8; */
        for (let i = 0; i < message.teams.length; i++)
            BasicInfo.internalBinaryWrite(message.teams[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Basic.BasicData.BasicInfo players = 9; */
        for (let i = 0; i < message.players.length; i++)
            BasicInfo.internalBinaryWrite(message.players[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Teams.TeamDetail.TeamDetail
 */
export const TeamDetail = new TeamDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamDetail_Venue$Type extends MessageType<TeamDetail_Venue> {
    constructor() {
        super("ApiProtos.Teams.TeamDetail.TeamDetail.Venue", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "capacity", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TeamDetail_Venue>): TeamDetail_Venue {
        const message = { name: "", capacity: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamDetail_Venue>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamDetail_Venue): TeamDetail_Venue {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int32 capacity */ 2:
                    message.capacity = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamDetail_Venue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int32 capacity = 2; */
        if (message.capacity !== 0)
            writer.tag(2, WireType.Varint).int32(message.capacity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Teams.TeamDetail.TeamDetail.Venue
 */
export const TeamDetail_Venue = new TeamDetail_Venue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamDetail_Honors$Type extends MessageType<TeamDetail_Honors> {
    constructor() {
        super("ApiProtos.Teams.TeamDetail.TeamDetail.Honors", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "logo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "season", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TeamDetail_Honors>): TeamDetail_Honors {
        const message = { name: "", logo: "", count: 0, season: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamDetail_Honors>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamDetail_Honors): TeamDetail_Honors {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string logo */ 2:
                    message.logo = reader.string();
                    break;
                case /* int32 count */ 3:
                    message.count = reader.int32();
                    break;
                case /* repeated string season */ 4:
                    message.season.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamDetail_Honors, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string logo = 2; */
        if (message.logo !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.logo);
        /* int32 count = 3; */
        if (message.count !== 0)
            writer.tag(3, WireType.Varint).int32(message.count);
        /* repeated string season = 4; */
        for (let i = 0; i < message.season.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.season[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Teams.TeamDetail.TeamDetail.Honors
 */
export const TeamDetail_Honors = new TeamDetail_Honors$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamDetail_Info$Type extends MessageType<TeamDetail_Info> {
    constructor() {
        super("ApiProtos.Teams.TeamDetail.TeamDetail.Info", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "logo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "areaId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "countryId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "country", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "countryLogo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "leagueId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "found", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "venue", kind: "message", T: () => TeamDetail_Venue },
            { no: 11, name: "marketValue", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "website", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "participatePlayer", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "honors", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TeamDetail_Honors }
        ]);
    }
    create(value?: PartialMessage<TeamDetail_Info>): TeamDetail_Info {
        const message = { id: 0, name: "", logo: "", areaId: 0, countryId: 0, country: "", countryLogo: "", leagueId: "", found: "", marketValue: "", website: "", participatePlayer: 0, honors: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamDetail_Info>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamDetail_Info): TeamDetail_Info {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string logo */ 3:
                    message.logo = reader.string();
                    break;
                case /* int32 areaId */ 4:
                    message.areaId = reader.int32();
                    break;
                case /* int32 countryId */ 5:
                    message.countryId = reader.int32();
                    break;
                case /* string country */ 6:
                    message.country = reader.string();
                    break;
                case /* string countryLogo */ 7:
                    message.countryLogo = reader.string();
                    break;
                case /* string leagueId */ 8:
                    message.leagueId = reader.string();
                    break;
                case /* string found */ 9:
                    message.found = reader.string();
                    break;
                case /* ApiProtos.Teams.TeamDetail.TeamDetail.Venue venue */ 10:
                    message.venue = TeamDetail_Venue.internalBinaryRead(reader, reader.uint32(), options, message.venue);
                    break;
                case /* string marketValue */ 11:
                    message.marketValue = reader.string();
                    break;
                case /* string website */ 12:
                    message.website = reader.string();
                    break;
                case /* int32 participatePlayer */ 13:
                    message.participatePlayer = reader.int32();
                    break;
                case /* repeated ApiProtos.Teams.TeamDetail.TeamDetail.Honors honors */ 14:
                    message.honors.push(TeamDetail_Honors.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamDetail_Info, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string logo = 3; */
        if (message.logo !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.logo);
        /* int32 areaId = 4; */
        if (message.areaId !== 0)
            writer.tag(4, WireType.Varint).int32(message.areaId);
        /* int32 countryId = 5; */
        if (message.countryId !== 0)
            writer.tag(5, WireType.Varint).int32(message.countryId);
        /* string country = 6; */
        if (message.country !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.country);
        /* string countryLogo = 7; */
        if (message.countryLogo !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.countryLogo);
        /* string leagueId = 8; */
        if (message.leagueId !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.leagueId);
        /* string found = 9; */
        if (message.found !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.found);
        /* ApiProtos.Teams.TeamDetail.TeamDetail.Venue venue = 10; */
        if (message.venue)
            TeamDetail_Venue.internalBinaryWrite(message.venue, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* string marketValue = 11; */
        if (message.marketValue !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.marketValue);
        /* string website = 12; */
        if (message.website !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.website);
        /* int32 participatePlayer = 13; */
        if (message.participatePlayer !== 0)
            writer.tag(13, WireType.Varint).int32(message.participatePlayer);
        /* repeated ApiProtos.Teams.TeamDetail.TeamDetail.Honors honors = 14; */
        for (let i = 0; i < message.honors.length; i++)
            TeamDetail_Honors.internalBinaryWrite(message.honors[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Teams.TeamDetail.TeamDetail.Info
 */
export const TeamDetail_Info = new TeamDetail_Info$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamDetail_Table$Type extends MessageType<TeamDetail_Table> {
    constructor() {
        super("ApiProtos.Teams.TeamDetail.TeamDetail.Table", [
            { no: 1, name: "leagueId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "stageName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "position", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "points", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "won", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "draw", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "loss", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "note", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TeamDetail_Table>): TeamDetail_Table {
        const message = { leagueId: 0, stageName: "", position: 0, points: 0, won: 0, draw: 0, loss: 0, note: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamDetail_Table>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamDetail_Table): TeamDetail_Table {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 leagueId */ 1:
                    message.leagueId = reader.int32();
                    break;
                case /* string stageName */ 2:
                    message.stageName = reader.string();
                    break;
                case /* int32 position */ 3:
                    message.position = reader.int32();
                    break;
                case /* int32 points */ 4:
                    message.points = reader.int32();
                    break;
                case /* int32 won */ 5:
                    message.won = reader.int32();
                    break;
                case /* int32 draw */ 6:
                    message.draw = reader.int32();
                    break;
                case /* int32 loss */ 7:
                    message.loss = reader.int32();
                    break;
                case /* string note */ 8:
                    message.note = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamDetail_Table, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 leagueId = 1; */
        if (message.leagueId !== 0)
            writer.tag(1, WireType.Varint).int32(message.leagueId);
        /* string stageName = 2; */
        if (message.stageName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.stageName);
        /* int32 position = 3; */
        if (message.position !== 0)
            writer.tag(3, WireType.Varint).int32(message.position);
        /* int32 points = 4; */
        if (message.points !== 0)
            writer.tag(4, WireType.Varint).int32(message.points);
        /* int32 won = 5; */
        if (message.won !== 0)
            writer.tag(5, WireType.Varint).int32(message.won);
        /* int32 draw = 6; */
        if (message.draw !== 0)
            writer.tag(6, WireType.Varint).int32(message.draw);
        /* int32 loss = 7; */
        if (message.loss !== 0)
            writer.tag(7, WireType.Varint).int32(message.loss);
        /* string note = 8; */
        if (message.note !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.note);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Teams.TeamDetail.TeamDetail.Table
 */
export const TeamDetail_Table = new TeamDetail_Table$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamDetail_ShooterRank$Type extends MessageType<TeamDetail_ShooterRank> {
    constructor() {
        super("ApiProtos.Teams.TeamDetail.TeamDetail.ShooterRank", [
            { no: 1, name: "playerId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "position", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "total", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TeamDetail_ShooterRank>): TeamDetail_ShooterRank {
        const message = { playerId: 0, position: 0, total: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamDetail_ShooterRank>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamDetail_ShooterRank): TeamDetail_ShooterRank {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 playerId */ 1:
                    message.playerId = reader.int32();
                    break;
                case /* int32 position */ 2:
                    message.position = reader.int32();
                    break;
                case /* int32 total */ 3:
                    message.total = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamDetail_ShooterRank, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 playerId = 1; */
        if (message.playerId !== 0)
            writer.tag(1, WireType.Varint).int32(message.playerId);
        /* int32 position = 2; */
        if (message.position !== 0)
            writer.tag(2, WireType.Varint).int32(message.position);
        /* int32 total = 3; */
        if (message.total !== 0)
            writer.tag(3, WireType.Varint).int32(message.total);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Teams.TeamDetail.TeamDetail.ShooterRank
 */
export const TeamDetail_ShooterRank = new TeamDetail_ShooterRank$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamDetail_MarketValueRank$Type extends MessageType<TeamDetail_MarketValueRank> {
    constructor() {
        super("ApiProtos.Teams.TeamDetail.TeamDetail.MarketValueRank", [
            { no: 1, name: "playerId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "position", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "total", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "marketValue", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TeamDetail_MarketValueRank>): TeamDetail_MarketValueRank {
        const message = { playerId: 0, position: 0, total: 0, marketValue: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamDetail_MarketValueRank>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamDetail_MarketValueRank): TeamDetail_MarketValueRank {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 playerId */ 1:
                    message.playerId = reader.int32();
                    break;
                case /* int32 position */ 2:
                    message.position = reader.int32();
                    break;
                case /* int32 total */ 3:
                    message.total = reader.int32();
                    break;
                case /* string marketValue */ 4:
                    message.marketValue = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamDetail_MarketValueRank, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 playerId = 1; */
        if (message.playerId !== 0)
            writer.tag(1, WireType.Varint).int32(message.playerId);
        /* int32 position = 2; */
        if (message.position !== 0)
            writer.tag(2, WireType.Varint).int32(message.position);
        /* int32 total = 3; */
        if (message.total !== 0)
            writer.tag(3, WireType.Varint).int32(message.total);
        /* string marketValue = 4; */
        if (message.marketValue !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.marketValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Teams.TeamDetail.TeamDetail.MarketValueRank
 */
export const TeamDetail_MarketValueRank = new TeamDetail_MarketValueRank$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamDetail_Matches$Type extends MessageType<TeamDetail_Matches> {
    constructor() {
        super("ApiProtos.Teams.TeamDetail.TeamDetail.Matches", [
            { no: 1, name: "futureMatches", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchesSchedule },
            { no: 2, name: "pastMatches", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchesSchedule },
            { no: 3, name: "nextUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "totalPage", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TeamDetail_Matches>): TeamDetail_Matches {
        const message = { futureMatches: [], pastMatches: [], nextUrl: "", totalPage: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamDetail_Matches>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamDetail_Matches): TeamDetail_Matches {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ApiProtos.Basic.MatchesData.MatchesSchedule futureMatches */ 1:
                    message.futureMatches.push(MatchesSchedule.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ApiProtos.Basic.MatchesData.MatchesSchedule pastMatches */ 2:
                    message.pastMatches.push(MatchesSchedule.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string nextUrl */ 3:
                    message.nextUrl = reader.string();
                    break;
                case /* int32 totalPage */ 4:
                    message.totalPage = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamDetail_Matches, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ApiProtos.Basic.MatchesData.MatchesSchedule futureMatches = 1; */
        for (let i = 0; i < message.futureMatches.length; i++)
            MatchesSchedule.internalBinaryWrite(message.futureMatches[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Basic.MatchesData.MatchesSchedule pastMatches = 2; */
        for (let i = 0; i < message.pastMatches.length; i++)
            MatchesSchedule.internalBinaryWrite(message.pastMatches[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string nextUrl = 3; */
        if (message.nextUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.nextUrl);
        /* int32 totalPage = 4; */
        if (message.totalPage !== 0)
            writer.tag(4, WireType.Varint).int32(message.totalPage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Teams.TeamDetail.TeamDetail.Matches
 */
export const TeamDetail_Matches = new TeamDetail_Matches$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamDetail_Season$Type extends MessageType<TeamDetail_Season> {
    constructor() {
        super("ApiProtos.Teams.TeamDetail.TeamDetail.Season", [
            { no: 1, name: "seasonId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "leagueId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TeamDetail_Season>): TeamDetail_Season {
        const message = { seasonId: 0, leagueId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamDetail_Season>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamDetail_Season): TeamDetail_Season {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 seasonId */ 1:
                    message.seasonId = reader.int32();
                    break;
                case /* int32 leagueId */ 2:
                    message.leagueId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamDetail_Season, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 seasonId = 1; */
        if (message.seasonId !== 0)
            writer.tag(1, WireType.Varint).int32(message.seasonId);
        /* int32 leagueId = 2; */
        if (message.leagueId !== 0)
            writer.tag(2, WireType.Varint).int32(message.leagueId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Teams.TeamDetail.TeamDetail.Season
 */
export const TeamDetail_Season = new TeamDetail_Season$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamDetail_Seasons$Type extends MessageType<TeamDetail_Seasons> {
    constructor() {
        super("ApiProtos.Teams.TeamDetail.TeamDetail.Seasons", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "seasons", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TeamDetail_Season }
        ]);
    }
    create(value?: PartialMessage<TeamDetail_Seasons>): TeamDetail_Seasons {
        const message = { name: "", seasons: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamDetail_Seasons>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamDetail_Seasons): TeamDetail_Seasons {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* repeated ApiProtos.Teams.TeamDetail.TeamDetail.Season seasons */ 2:
                    message.seasons.push(TeamDetail_Season.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamDetail_Seasons, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* repeated ApiProtos.Teams.TeamDetail.TeamDetail.Season seasons = 2; */
        for (let i = 0; i < message.seasons.length; i++)
            TeamDetail_Season.internalBinaryWrite(message.seasons[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Teams.TeamDetail.TeamDetail.Seasons
 */
export const TeamDetail_Seasons = new TeamDetail_Seasons$Type();
