// @generated by protobuf-ts 2.5.0
// @generated from protobuf file "protobuf/protos/api/teams/TeamLineup.proto" (package "ApiProtos.Teams.TeamLineup", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ApiProtos.Teams.TeamLineup.TeamLineup
 */
export interface TeamLineup {
    /**
     * @generated from protobuf field: repeated ApiProtos.Teams.TeamLineup.TeamLineup.Lineup lineup = 1;
     */
    lineup: TeamLineup_Lineup[]; // 球隊陣容
    /**
     * @generated from protobuf field: repeated ApiProtos.Teams.TeamLineup.TeamLineup.Transfer transferIn = 2;
     */
    transferIn: TeamLineup_Transfer[]; // 轉入
    /**
     * @generated from protobuf field: repeated ApiProtos.Teams.TeamLineup.TeamLineup.Transfer transferOut = 3;
     */
    transferOut: TeamLineup_Transfer[]; // 轉出
}
/**
 * @generated from protobuf message ApiProtos.Teams.TeamLineup.TeamLineup.Lineup
 */
export interface TeamLineup_Lineup {
    /**
     * @generated from protobuf field: uint32 shirtNumber = 1;
     */
    shirtNumber: number; // 球衣號碼
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string; // 球員姓名
    /**
     * @generated from protobuf field: string marketValue = 3;
     */
    marketValue: string; // 身價(含貨幣單位)
    /**
     * @generated from protobuf field: uint32 marketValueNumber = 4;
     */
    marketValueNumber: number; // 身價(純數字)
    /**
     * @generated from protobuf field: string position = 5;
     */
    position: string; // 位置
    /**
     * @generated from protobuf field: uint32 age = 6;
     */
    age: number; // 年齡
    /**
     * @generated from protobuf field: uint32 height = 7;
     */
    height: number; // 身高
    /**
     * @generated from protobuf field: uint32 weight = 8;
     */
    weight: number; // 體重
    /**
     * @generated from protobuf field: string contractExpired = 9;
     */
    contractExpired: string; // 合約期限
    /**
     * @generated from protobuf field: string nationality = 10;
     */
    nationality: string; // 國籍
    /**
     * @generated from protobuf field: uint32 id = 11;
     */
    id: number; // 球員id
}
/**
 * @generated from protobuf message ApiProtos.Teams.TeamLineup.TeamLineup.Transfer
 */
export interface TeamLineup_Transfer {
    /**
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number; // 球員id
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string; // 球員姓名
    /**
     * @generated from protobuf field: string transferFee = 3;
     */
    transferFee: string; // 轉會金額(含貨幣單位)
    /**
     * @generated from protobuf field: uint32 transferFeeNumber = 4;
     */
    transferFeeNumber: number; // 轉會金額(純數字)
    /**
     * @generated from protobuf field: string position = 5;
     */
    position: string; // 位置
    /**
     * @generated from protobuf field: uint32 age = 6;
     */
    age: number; // 年齡
    /**
     * @generated from protobuf field: uint32 height = 7;
     */
    height: number; // 身高
    /**
     * @generated from protobuf field: uint32 weight = 8;
     */
    weight: number; // 體重
    /**
     * @generated from protobuf field: string transferTeamName = 9;
     */
    transferTeamName: string; // 來自或前往的隊伍名稱
    /**
     * @generated from protobuf field: string nationality = 10;
     */
    nationality: string; // 國籍
    /**
     * @generated from protobuf field: string transferType = 11;
     */
    transferType: string; // 轉會種類
    /**
     * @generated from protobuf field: uint32 transferTime = 12;
     */
    transferTime: number; // 轉會時間
}
// @generated message type with reflection information, may provide speed optimized methods
class TeamLineup$Type extends MessageType<TeamLineup> {
    constructor() {
        super("ApiProtos.Teams.TeamLineup.TeamLineup", [
            { no: 1, name: "lineup", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TeamLineup_Lineup },
            { no: 2, name: "transferIn", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TeamLineup_Transfer },
            { no: 3, name: "transferOut", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TeamLineup_Transfer }
        ]);
    }
    create(value?: PartialMessage<TeamLineup>): TeamLineup {
        const message = { lineup: [], transferIn: [], transferOut: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamLineup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamLineup): TeamLineup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ApiProtos.Teams.TeamLineup.TeamLineup.Lineup lineup */ 1:
                    message.lineup.push(TeamLineup_Lineup.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ApiProtos.Teams.TeamLineup.TeamLineup.Transfer transferIn */ 2:
                    message.transferIn.push(TeamLineup_Transfer.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ApiProtos.Teams.TeamLineup.TeamLineup.Transfer transferOut */ 3:
                    message.transferOut.push(TeamLineup_Transfer.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamLineup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ApiProtos.Teams.TeamLineup.TeamLineup.Lineup lineup = 1; */
        for (let i = 0; i < message.lineup.length; i++)
            TeamLineup_Lineup.internalBinaryWrite(message.lineup[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Teams.TeamLineup.TeamLineup.Transfer transferIn = 2; */
        for (let i = 0; i < message.transferIn.length; i++)
            TeamLineup_Transfer.internalBinaryWrite(message.transferIn[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Teams.TeamLineup.TeamLineup.Transfer transferOut = 3; */
        for (let i = 0; i < message.transferOut.length; i++)
            TeamLineup_Transfer.internalBinaryWrite(message.transferOut[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Teams.TeamLineup.TeamLineup
 */
export const TeamLineup = new TeamLineup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamLineup_Lineup$Type extends MessageType<TeamLineup_Lineup> {
    constructor() {
        super("ApiProtos.Teams.TeamLineup.TeamLineup.Lineup", [
            { no: 1, name: "shirtNumber", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "marketValue", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "marketValueNumber", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "position", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "age", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "height", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "weight", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "contractExpired", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "nationality", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TeamLineup_Lineup>): TeamLineup_Lineup {
        const message = { shirtNumber: 0, name: "", marketValue: "", marketValueNumber: 0, position: "", age: 0, height: 0, weight: 0, contractExpired: "", nationality: "", id: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamLineup_Lineup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamLineup_Lineup): TeamLineup_Lineup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 shirtNumber */ 1:
                    message.shirtNumber = reader.uint32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string marketValue */ 3:
                    message.marketValue = reader.string();
                    break;
                case /* uint32 marketValueNumber */ 4:
                    message.marketValueNumber = reader.uint32();
                    break;
                case /* string position */ 5:
                    message.position = reader.string();
                    break;
                case /* uint32 age */ 6:
                    message.age = reader.uint32();
                    break;
                case /* uint32 height */ 7:
                    message.height = reader.uint32();
                    break;
                case /* uint32 weight */ 8:
                    message.weight = reader.uint32();
                    break;
                case /* string contractExpired */ 9:
                    message.contractExpired = reader.string();
                    break;
                case /* string nationality */ 10:
                    message.nationality = reader.string();
                    break;
                case /* uint32 id */ 11:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamLineup_Lineup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 shirtNumber = 1; */
        if (message.shirtNumber !== 0)
            writer.tag(1, WireType.Varint).uint32(message.shirtNumber);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string marketValue = 3; */
        if (message.marketValue !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.marketValue);
        /* uint32 marketValueNumber = 4; */
        if (message.marketValueNumber !== 0)
            writer.tag(4, WireType.Varint).uint32(message.marketValueNumber);
        /* string position = 5; */
        if (message.position !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.position);
        /* uint32 age = 6; */
        if (message.age !== 0)
            writer.tag(6, WireType.Varint).uint32(message.age);
        /* uint32 height = 7; */
        if (message.height !== 0)
            writer.tag(7, WireType.Varint).uint32(message.height);
        /* uint32 weight = 8; */
        if (message.weight !== 0)
            writer.tag(8, WireType.Varint).uint32(message.weight);
        /* string contractExpired = 9; */
        if (message.contractExpired !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.contractExpired);
        /* string nationality = 10; */
        if (message.nationality !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.nationality);
        /* uint32 id = 11; */
        if (message.id !== 0)
            writer.tag(11, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Teams.TeamLineup.TeamLineup.Lineup
 */
export const TeamLineup_Lineup = new TeamLineup_Lineup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamLineup_Transfer$Type extends MessageType<TeamLineup_Transfer> {
    constructor() {
        super("ApiProtos.Teams.TeamLineup.TeamLineup.Transfer", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "transferFee", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "transferFeeNumber", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "position", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "age", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "height", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "weight", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "transferTeamName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "nationality", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "transferType", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "transferTime", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TeamLineup_Transfer>): TeamLineup_Transfer {
        const message = { id: 0, name: "", transferFee: "", transferFeeNumber: 0, position: "", age: 0, height: 0, weight: 0, transferTeamName: "", nationality: "", transferType: "", transferTime: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamLineup_Transfer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamLineup_Transfer): TeamLineup_Transfer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string transferFee */ 3:
                    message.transferFee = reader.string();
                    break;
                case /* uint32 transferFeeNumber */ 4:
                    message.transferFeeNumber = reader.uint32();
                    break;
                case /* string position */ 5:
                    message.position = reader.string();
                    break;
                case /* uint32 age */ 6:
                    message.age = reader.uint32();
                    break;
                case /* uint32 height */ 7:
                    message.height = reader.uint32();
                    break;
                case /* uint32 weight */ 8:
                    message.weight = reader.uint32();
                    break;
                case /* string transferTeamName */ 9:
                    message.transferTeamName = reader.string();
                    break;
                case /* string nationality */ 10:
                    message.nationality = reader.string();
                    break;
                case /* string transferType */ 11:
                    message.transferType = reader.string();
                    break;
                case /* uint32 transferTime */ 12:
                    message.transferTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamLineup_Transfer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string transferFee = 3; */
        if (message.transferFee !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.transferFee);
        /* uint32 transferFeeNumber = 4; */
        if (message.transferFeeNumber !== 0)
            writer.tag(4, WireType.Varint).uint32(message.transferFeeNumber);
        /* string position = 5; */
        if (message.position !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.position);
        /* uint32 age = 6; */
        if (message.age !== 0)
            writer.tag(6, WireType.Varint).uint32(message.age);
        /* uint32 height = 7; */
        if (message.height !== 0)
            writer.tag(7, WireType.Varint).uint32(message.height);
        /* uint32 weight = 8; */
        if (message.weight !== 0)
            writer.tag(8, WireType.Varint).uint32(message.weight);
        /* string transferTeamName = 9; */
        if (message.transferTeamName !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.transferTeamName);
        /* string nationality = 10; */
        if (message.nationality !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.nationality);
        /* string transferType = 11; */
        if (message.transferType !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.transferType);
        /* uint32 transferTime = 12; */
        if (message.transferTime !== 0)
            writer.tag(12, WireType.Varint).uint32(message.transferTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Teams.TeamLineup.TeamLineup.Transfer
 */
export const TeamLineup_Transfer = new TeamLineup_Transfer$Type();
