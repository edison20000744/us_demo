// @generated by protobuf-ts 2.5.0
// @generated from protobuf file "protobuf/protos/api/players/PlayersTransfer.proto" (package "ApiProtos.Players.PlayersTransfer", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ApiProtos.Players.PlayersTransfer.PlayersTransfer
 */
export interface PlayersTransfer {
    /**
     * @generated from protobuf field: repeated ApiProtos.Players.PlayersTransfer.PlayersTransfer.Transfer transferHistory = 1;
     */
    transferHistory: PlayersTransfer_Transfer[]; // 球員轉會紀錄
    /**
     * @generated from protobuf field: repeated ApiProtos.Players.PlayersTransfer.PlayersTransfer.TeamInfo teams = 2;
     */
    teams: PlayersTransfer_TeamInfo[]; // 球隊資訊
}
/**
 * @generated from protobuf message ApiProtos.Players.PlayersTransfer.PlayersTransfer.Transfer
 */
export interface PlayersTransfer_Transfer {
    /**
     * @generated from protobuf field: uint32 outTeamId = 1;
     */
    outTeamId: number; // 轉出球隊
    /**
     * @generated from protobuf field: uint32 inTeamId = 2;
     */
    inTeamId: number; // 轉入球隊
    /**
     * @generated from protobuf field: string transferTime = 3;
     */
    transferTime: string; // 轉會時間
    /**
     * @generated from protobuf field: string transferType = 4;
     */
    transferType: string; // 轉會種類
    /**
     * @generated from protobuf field: string transferFee = 5;
     */
    transferFee: string; // 轉會金額(含貨幣單位)
}
/**
 * @generated from protobuf message ApiProtos.Players.PlayersTransfer.PlayersTransfer.TeamInfo
 */
export interface PlayersTransfer_TeamInfo {
    /**
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number; // 球隊id
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string; // 球隊名稱
    /**
     * @generated from protobuf field: string logo = 3;
     */
    logo: string; // 球隊logo
}
// @generated message type with reflection information, may provide speed optimized methods
class PlayersTransfer$Type extends MessageType<PlayersTransfer> {
    constructor() {
        super("ApiProtos.Players.PlayersTransfer.PlayersTransfer", [
            { no: 1, name: "transferHistory", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayersTransfer_Transfer },
            { no: 2, name: "teams", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayersTransfer_TeamInfo }
        ]);
    }
    create(value?: PartialMessage<PlayersTransfer>): PlayersTransfer {
        const message = { transferHistory: [], teams: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayersTransfer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayersTransfer): PlayersTransfer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ApiProtos.Players.PlayersTransfer.PlayersTransfer.Transfer transferHistory */ 1:
                    message.transferHistory.push(PlayersTransfer_Transfer.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ApiProtos.Players.PlayersTransfer.PlayersTransfer.TeamInfo teams */ 2:
                    message.teams.push(PlayersTransfer_TeamInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayersTransfer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ApiProtos.Players.PlayersTransfer.PlayersTransfer.Transfer transferHistory = 1; */
        for (let i = 0; i < message.transferHistory.length; i++)
            PlayersTransfer_Transfer.internalBinaryWrite(message.transferHistory[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Players.PlayersTransfer.PlayersTransfer.TeamInfo teams = 2; */
        for (let i = 0; i < message.teams.length; i++)
            PlayersTransfer_TeamInfo.internalBinaryWrite(message.teams[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Players.PlayersTransfer.PlayersTransfer
 */
export const PlayersTransfer = new PlayersTransfer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayersTransfer_Transfer$Type extends MessageType<PlayersTransfer_Transfer> {
    constructor() {
        super("ApiProtos.Players.PlayersTransfer.PlayersTransfer.Transfer", [
            { no: 1, name: "outTeamId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "inTeamId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "transferTime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "transferType", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "transferFee", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlayersTransfer_Transfer>): PlayersTransfer_Transfer {
        const message = { outTeamId: 0, inTeamId: 0, transferTime: "", transferType: "", transferFee: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayersTransfer_Transfer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayersTransfer_Transfer): PlayersTransfer_Transfer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 outTeamId */ 1:
                    message.outTeamId = reader.uint32();
                    break;
                case /* uint32 inTeamId */ 2:
                    message.inTeamId = reader.uint32();
                    break;
                case /* string transferTime */ 3:
                    message.transferTime = reader.string();
                    break;
                case /* string transferType */ 4:
                    message.transferType = reader.string();
                    break;
                case /* string transferFee */ 5:
                    message.transferFee = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayersTransfer_Transfer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 outTeamId = 1; */
        if (message.outTeamId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.outTeamId);
        /* uint32 inTeamId = 2; */
        if (message.inTeamId !== 0)
            writer.tag(2, WireType.Varint).uint32(message.inTeamId);
        /* string transferTime = 3; */
        if (message.transferTime !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.transferTime);
        /* string transferType = 4; */
        if (message.transferType !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.transferType);
        /* string transferFee = 5; */
        if (message.transferFee !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.transferFee);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Players.PlayersTransfer.PlayersTransfer.Transfer
 */
export const PlayersTransfer_Transfer = new PlayersTransfer_Transfer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayersTransfer_TeamInfo$Type extends MessageType<PlayersTransfer_TeamInfo> {
    constructor() {
        super("ApiProtos.Players.PlayersTransfer.PlayersTransfer.TeamInfo", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "logo", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlayersTransfer_TeamInfo>): PlayersTransfer_TeamInfo {
        const message = { id: 0, name: "", logo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayersTransfer_TeamInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayersTransfer_TeamInfo): PlayersTransfer_TeamInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string logo */ 3:
                    message.logo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayersTransfer_TeamInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string logo = 3; */
        if (message.logo !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.logo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Players.PlayersTransfer.PlayersTransfer.TeamInfo
 */
export const PlayersTransfer_TeamInfo = new PlayersTransfer_TeamInfo$Type();
