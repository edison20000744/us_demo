// @generated by protobuf-ts 2.5.0
// @generated from protobuf file "protobuf/protos/api/players/PlayersDetail.proto" (package "ApiProtos.Players.PlayersDetail", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { MatchesSchedule } from "../basic/MatchesData";
import { BasicInfo } from "../basic/BasicData";
/**
 * @generated from protobuf message ApiProtos.Players.PlayersDetail.PlayersDetail
 */
export interface PlayersDetail {
    /**
     * @generated from protobuf field: string playerName = 1;
     */
    playerName: string; // 球員名(依照語言切換)
    /**
     * @generated from protobuf field: string playerNameEn = 2;
     */
    playerNameEn: string; // 球員名(英文)
    /**
     * @generated from protobuf field: string playerLogo = 3;
     */
    playerLogo: string; // 球員Logo
    /**
     * @generated from protobuf field: ApiProtos.Players.PlayersDetail.PlayersDetail.Basic basic = 4;
     */
    basic?: PlayersDetail_Basic; // 基本資料
    /**
     * @generated from protobuf field: ApiProtos.Players.PlayersDetail.PlayersDetail.Capability capability = 5;
     */
    capability?: PlayersDetail_Capability; // 球員能力
    /**
     * @generated from protobuf field: repeated ApiProtos.Players.PlayersDetail.PlayersDetail.PositionsInfo positionsInfo = 6;
     */
    positionsInfo: PlayersDetail_PositionsInfo[]; // 位置座標
    /**
     * @generated from protobuf field: ApiProtos.Players.PlayersDetail.PlayersDetail.Matches matches = 7;
     */
    matches?: PlayersDetail_Matches; // 賽事資訊
    /**
     * @generated from protobuf field: repeated ApiProtos.Basic.BasicData.BasicInfo leagues = 8;
     */
    leagues: BasicInfo[]; // 聯盟資訊
    /**
     * @generated from protobuf field: repeated ApiProtos.Basic.BasicData.BasicInfo teams = 9;
     */
    teams: BasicInfo[]; // 球隊資訊
}
/**
 * @generated from protobuf message ApiProtos.Players.PlayersDetail.PlayersDetail.Basic
 */
export interface PlayersDetail_Basic {
    /**
     * @generated from protobuf field: uint32 teamId = 1;
     */
    teamId: number; // 球隊id
    /**
     * @generated from protobuf field: string teamName = 2;
     */
    teamName: string; // 球隊名
    /**
     * @generated from protobuf field: string teamLogo = 3;
     */
    teamLogo: string; // 球隊logo
    /**
     * @generated from protobuf field: string contractExpired = 4;
     */
    contractExpired: string; // 合約到期日
    /**
     * @generated from protobuf field: string marketValue = 5;
     */
    marketValue: string; // 球員市值
    /**
     * @generated from protobuf field: string nationality = 6;
     */
    nationality: string; // 國籍
    /**
     * @generated from protobuf field: string nationalityLogo = 7;
     */
    nationalityLogo: string; // 國籍LOGO
    /**
     * @generated from protobuf field: uint32 age = 8;
     */
    age: number;
    /**
     * @generated from protobuf field: string birthday = 9;
     */
    birthday: string; // 出生年月日
    /**
     * @generated from protobuf field: uint32 height = 10;
     */
    height: number; // 身高
    /**
     * @generated from protobuf field: uint32 weight = 11;
     */
    weight: number; // 體重
    /**
     * @generated from protobuf field: uint32 preferredFoot = 12;
     */
    preferredFoot: number; // 慣用腳0 未知 1 左脚 2 右脚 3 左右脚
    /**
     * @generated from protobuf field: string position = 13;
     */
    position: string; // 擅长位置
    /**
     * @generated from protobuf field: uint32 shirtNumber = 14;
     */
    shirtNumber: number; // 球衣号 0表示未分配球衣或者无数据
}
/**
 * @generated from protobuf message ApiProtos.Players.PlayersDetail.PlayersDetail.Ability
 */
export interface PlayersDetail_Ability {
    /**
     * @generated from protobuf field: uint32 type = 1;
     */
    type: number; // 能力类型定义1 扑救 2 预判 3 处理球 4 空中 5 战术 6 进攻 7 防守 8 创造力 9 技术
    /**
     * @generated from protobuf field: uint32 score = 2;
     */
    score: number; // 评分
    /**
     * @generated from protobuf field: uint32 average = 3;
     */
    average: number; // 平均分
}
/**
 * @generated from protobuf message ApiProtos.Players.PlayersDetail.PlayersDetail.ProsCons
 */
export interface PlayersDetail_ProsCons {
    /**
     * @generated from protobuf field: uint32 type = 1;
     */
    type: number; // 类型，技术特点类型
    /**
     * @generated from protobuf field: uint32 score = 2;
     */
    score: number; // 评分
}
/**
 * @generated from protobuf message ApiProtos.Players.PlayersDetail.PlayersDetail.Characteristics
 */
export interface PlayersDetail_Characteristics {
    /**
     * @generated from protobuf field: repeated ApiProtos.Players.PlayersDetail.PlayersDetail.ProsCons pros = 1;
     */
    pros: PlayersDetail_ProsCons[]; // 優勢
    /**
     * @generated from protobuf field: repeated ApiProtos.Players.PlayersDetail.PlayersDetail.ProsCons cons = 2;
     */
    cons: PlayersDetail_ProsCons[]; // 劣勢
}
/**
 * @generated from protobuf message ApiProtos.Players.PlayersDetail.PlayersDetail.Positions
 */
export interface PlayersDetail_Positions {
    /**
     * @generated from protobuf field: string main = 1;
     */
    main: string; // 位置列表 ，详细位置字段说明位置类型定义LW 左边锋 RW 右边锋 ST 前锋 AM 攻击型中场 ML 左中场 MC 中路中场 MR 右中场 DM 防守型中 DL 左后卫 DC 中后卫 DR 右后卫 GK 守门员
    /**
     * @generated from protobuf field: repeated string second = 2;
     */
    second: string[]; // 次要位置列表
}
/**
 * @generated from protobuf message ApiProtos.Players.PlayersDetail.PlayersDetail.PositionsInfo
 */
export interface PlayersDetail_PositionsInfo {
    /**
     * @generated from protobuf field: string position = 1;
     */
    position: string; // 位置
    /**
     * @generated from protobuf field: int32 locationX = 2;
     */
    locationX: number; // 座標x
    /**
     * @generated from protobuf field: float locationXRate = 3;
     */
    locationXRate: number; // 座標x比率
    /**
     * @generated from protobuf field: int32 locationY = 4;
     */
    locationY: number; // 座標y
    /**
     * @generated from protobuf field: float locationYRate = 5;
     */
    locationYRate: number; // 座標y比率
}
/**
 * @generated from protobuf message ApiProtos.Players.PlayersDetail.PlayersDetail.Capability
 */
export interface PlayersDetail_Capability {
    /**
     * @generated from protobuf field: repeated ApiProtos.Players.PlayersDetail.PlayersDetail.Ability ability = 1;
     */
    ability: PlayersDetail_Ability[]; // 球員能力
    /**
     * @generated from protobuf field: ApiProtos.Players.PlayersDetail.PlayersDetail.Characteristics characteristics = 2;
     */
    characteristics?: PlayersDetail_Characteristics; // 優劣勢
    /**
     * @generated from protobuf field: ApiProtos.Players.PlayersDetail.PlayersDetail.Positions positions = 3;
     */
    positions?: PlayersDetail_Positions; // 主要、次要位置
}
/**
 * @generated from protobuf message ApiProtos.Players.PlayersDetail.PlayersDetail.Matches
 */
export interface PlayersDetail_Matches {
    /**
     * @generated from protobuf field: repeated ApiProtos.Basic.MatchesData.MatchesSchedule pastMatches = 1;
     */
    pastMatches: MatchesSchedule[]; // 過去賽事資訊
    /**
     * @generated from protobuf field: string nextUrl = 2;
     */
    nextUrl: string; // 分頁連結
    /**
     * @generated from protobuf field: int32 totalPage = 3;
     */
    totalPage: number; // 總頁數
}
// @generated message type with reflection information, may provide speed optimized methods
class PlayersDetail$Type extends MessageType<PlayersDetail> {
    constructor() {
        super("ApiProtos.Players.PlayersDetail.PlayersDetail", [
            { no: 1, name: "playerName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "playerNameEn", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "playerLogo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "basic", kind: "message", T: () => PlayersDetail_Basic },
            { no: 5, name: "capability", kind: "message", T: () => PlayersDetail_Capability },
            { no: 6, name: "positionsInfo", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayersDetail_PositionsInfo },
            { no: 7, name: "matches", kind: "message", T: () => PlayersDetail_Matches },
            { no: 8, name: "leagues", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BasicInfo },
            { no: 9, name: "teams", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BasicInfo }
        ]);
    }
    create(value?: PartialMessage<PlayersDetail>): PlayersDetail {
        const message = { playerName: "", playerNameEn: "", playerLogo: "", positionsInfo: [], leagues: [], teams: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayersDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayersDetail): PlayersDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string playerName */ 1:
                    message.playerName = reader.string();
                    break;
                case /* string playerNameEn */ 2:
                    message.playerNameEn = reader.string();
                    break;
                case /* string playerLogo */ 3:
                    message.playerLogo = reader.string();
                    break;
                case /* ApiProtos.Players.PlayersDetail.PlayersDetail.Basic basic */ 4:
                    message.basic = PlayersDetail_Basic.internalBinaryRead(reader, reader.uint32(), options, message.basic);
                    break;
                case /* ApiProtos.Players.PlayersDetail.PlayersDetail.Capability capability */ 5:
                    message.capability = PlayersDetail_Capability.internalBinaryRead(reader, reader.uint32(), options, message.capability);
                    break;
                case /* repeated ApiProtos.Players.PlayersDetail.PlayersDetail.PositionsInfo positionsInfo */ 6:
                    message.positionsInfo.push(PlayersDetail_PositionsInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* ApiProtos.Players.PlayersDetail.PlayersDetail.Matches matches */ 7:
                    message.matches = PlayersDetail_Matches.internalBinaryRead(reader, reader.uint32(), options, message.matches);
                    break;
                case /* repeated ApiProtos.Basic.BasicData.BasicInfo leagues */ 8:
                    message.leagues.push(BasicInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ApiProtos.Basic.BasicData.BasicInfo teams */ 9:
                    message.teams.push(BasicInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayersDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string playerName = 1; */
        if (message.playerName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.playerName);
        /* string playerNameEn = 2; */
        if (message.playerNameEn !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.playerNameEn);
        /* string playerLogo = 3; */
        if (message.playerLogo !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.playerLogo);
        /* ApiProtos.Players.PlayersDetail.PlayersDetail.Basic basic = 4; */
        if (message.basic)
            PlayersDetail_Basic.internalBinaryWrite(message.basic, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* ApiProtos.Players.PlayersDetail.PlayersDetail.Capability capability = 5; */
        if (message.capability)
            PlayersDetail_Capability.internalBinaryWrite(message.capability, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Players.PlayersDetail.PlayersDetail.PositionsInfo positionsInfo = 6; */
        for (let i = 0; i < message.positionsInfo.length; i++)
            PlayersDetail_PositionsInfo.internalBinaryWrite(message.positionsInfo[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* ApiProtos.Players.PlayersDetail.PlayersDetail.Matches matches = 7; */
        if (message.matches)
            PlayersDetail_Matches.internalBinaryWrite(message.matches, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Basic.BasicData.BasicInfo leagues = 8; */
        for (let i = 0; i < message.leagues.length; i++)
            BasicInfo.internalBinaryWrite(message.leagues[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Basic.BasicData.BasicInfo teams = 9; */
        for (let i = 0; i < message.teams.length; i++)
            BasicInfo.internalBinaryWrite(message.teams[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Players.PlayersDetail.PlayersDetail
 */
export const PlayersDetail = new PlayersDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayersDetail_Basic$Type extends MessageType<PlayersDetail_Basic> {
    constructor() {
        super("ApiProtos.Players.PlayersDetail.PlayersDetail.Basic", [
            { no: 1, name: "teamId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "teamName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "teamLogo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "contractExpired", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "marketValue", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "nationality", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "nationalityLogo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "age", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "birthday", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "height", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "weight", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "preferredFoot", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "position", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "shirtNumber", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayersDetail_Basic>): PlayersDetail_Basic {
        const message = { teamId: 0, teamName: "", teamLogo: "", contractExpired: "", marketValue: "", nationality: "", nationalityLogo: "", age: 0, birthday: "", height: 0, weight: 0, preferredFoot: 0, position: "", shirtNumber: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayersDetail_Basic>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayersDetail_Basic): PlayersDetail_Basic {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 teamId */ 1:
                    message.teamId = reader.uint32();
                    break;
                case /* string teamName */ 2:
                    message.teamName = reader.string();
                    break;
                case /* string teamLogo */ 3:
                    message.teamLogo = reader.string();
                    break;
                case /* string contractExpired */ 4:
                    message.contractExpired = reader.string();
                    break;
                case /* string marketValue */ 5:
                    message.marketValue = reader.string();
                    break;
                case /* string nationality */ 6:
                    message.nationality = reader.string();
                    break;
                case /* string nationalityLogo */ 7:
                    message.nationalityLogo = reader.string();
                    break;
                case /* uint32 age */ 8:
                    message.age = reader.uint32();
                    break;
                case /* string birthday */ 9:
                    message.birthday = reader.string();
                    break;
                case /* uint32 height */ 10:
                    message.height = reader.uint32();
                    break;
                case /* uint32 weight */ 11:
                    message.weight = reader.uint32();
                    break;
                case /* uint32 preferredFoot */ 12:
                    message.preferredFoot = reader.uint32();
                    break;
                case /* string position */ 13:
                    message.position = reader.string();
                    break;
                case /* uint32 shirtNumber */ 14:
                    message.shirtNumber = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayersDetail_Basic, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 teamId = 1; */
        if (message.teamId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.teamId);
        /* string teamName = 2; */
        if (message.teamName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.teamName);
        /* string teamLogo = 3; */
        if (message.teamLogo !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.teamLogo);
        /* string contractExpired = 4; */
        if (message.contractExpired !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.contractExpired);
        /* string marketValue = 5; */
        if (message.marketValue !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.marketValue);
        /* string nationality = 6; */
        if (message.nationality !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.nationality);
        /* string nationalityLogo = 7; */
        if (message.nationalityLogo !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.nationalityLogo);
        /* uint32 age = 8; */
        if (message.age !== 0)
            writer.tag(8, WireType.Varint).uint32(message.age);
        /* string birthday = 9; */
        if (message.birthday !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.birthday);
        /* uint32 height = 10; */
        if (message.height !== 0)
            writer.tag(10, WireType.Varint).uint32(message.height);
        /* uint32 weight = 11; */
        if (message.weight !== 0)
            writer.tag(11, WireType.Varint).uint32(message.weight);
        /* uint32 preferredFoot = 12; */
        if (message.preferredFoot !== 0)
            writer.tag(12, WireType.Varint).uint32(message.preferredFoot);
        /* string position = 13; */
        if (message.position !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.position);
        /* uint32 shirtNumber = 14; */
        if (message.shirtNumber !== 0)
            writer.tag(14, WireType.Varint).uint32(message.shirtNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Players.PlayersDetail.PlayersDetail.Basic
 */
export const PlayersDetail_Basic = new PlayersDetail_Basic$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayersDetail_Ability$Type extends MessageType<PlayersDetail_Ability> {
    constructor() {
        super("ApiProtos.Players.PlayersDetail.PlayersDetail.Ability", [
            { no: 1, name: "type", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "score", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "average", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayersDetail_Ability>): PlayersDetail_Ability {
        const message = { type: 0, score: 0, average: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayersDetail_Ability>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayersDetail_Ability): PlayersDetail_Ability {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 type */ 1:
                    message.type = reader.uint32();
                    break;
                case /* uint32 score */ 2:
                    message.score = reader.uint32();
                    break;
                case /* uint32 average */ 3:
                    message.average = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayersDetail_Ability, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).uint32(message.type);
        /* uint32 score = 2; */
        if (message.score !== 0)
            writer.tag(2, WireType.Varint).uint32(message.score);
        /* uint32 average = 3; */
        if (message.average !== 0)
            writer.tag(3, WireType.Varint).uint32(message.average);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Players.PlayersDetail.PlayersDetail.Ability
 */
export const PlayersDetail_Ability = new PlayersDetail_Ability$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayersDetail_ProsCons$Type extends MessageType<PlayersDetail_ProsCons> {
    constructor() {
        super("ApiProtos.Players.PlayersDetail.PlayersDetail.ProsCons", [
            { no: 1, name: "type", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "score", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayersDetail_ProsCons>): PlayersDetail_ProsCons {
        const message = { type: 0, score: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayersDetail_ProsCons>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayersDetail_ProsCons): PlayersDetail_ProsCons {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 type */ 1:
                    message.type = reader.uint32();
                    break;
                case /* uint32 score */ 2:
                    message.score = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayersDetail_ProsCons, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).uint32(message.type);
        /* uint32 score = 2; */
        if (message.score !== 0)
            writer.tag(2, WireType.Varint).uint32(message.score);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Players.PlayersDetail.PlayersDetail.ProsCons
 */
export const PlayersDetail_ProsCons = new PlayersDetail_ProsCons$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayersDetail_Characteristics$Type extends MessageType<PlayersDetail_Characteristics> {
    constructor() {
        super("ApiProtos.Players.PlayersDetail.PlayersDetail.Characteristics", [
            { no: 1, name: "pros", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayersDetail_ProsCons },
            { no: 2, name: "cons", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayersDetail_ProsCons }
        ]);
    }
    create(value?: PartialMessage<PlayersDetail_Characteristics>): PlayersDetail_Characteristics {
        const message = { pros: [], cons: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayersDetail_Characteristics>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayersDetail_Characteristics): PlayersDetail_Characteristics {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ApiProtos.Players.PlayersDetail.PlayersDetail.ProsCons pros */ 1:
                    message.pros.push(PlayersDetail_ProsCons.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ApiProtos.Players.PlayersDetail.PlayersDetail.ProsCons cons */ 2:
                    message.cons.push(PlayersDetail_ProsCons.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayersDetail_Characteristics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ApiProtos.Players.PlayersDetail.PlayersDetail.ProsCons pros = 1; */
        for (let i = 0; i < message.pros.length; i++)
            PlayersDetail_ProsCons.internalBinaryWrite(message.pros[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated ApiProtos.Players.PlayersDetail.PlayersDetail.ProsCons cons = 2; */
        for (let i = 0; i < message.cons.length; i++)
            PlayersDetail_ProsCons.internalBinaryWrite(message.cons[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Players.PlayersDetail.PlayersDetail.Characteristics
 */
export const PlayersDetail_Characteristics = new PlayersDetail_Characteristics$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayersDetail_Positions$Type extends MessageType<PlayersDetail_Positions> {
    constructor() {
        super("ApiProtos.Players.PlayersDetail.PlayersDetail.Positions", [
            { no: 1, name: "main", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "second", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlayersDetail_Positions>): PlayersDetail_Positions {
        const message = { main: "", second: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayersDetail_Positions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayersDetail_Positions): PlayersDetail_Positions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string main */ 1:
                    message.main = reader.string();
                    break;
                case /* repeated string second */ 2:
                    message.second.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayersDetail_Positions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string main = 1; */
        if (message.main !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.main);
        /* repeated string second = 2; */
        for (let i = 0; i < message.second.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.second[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Players.PlayersDetail.PlayersDetail.Positions
 */
export const PlayersDetail_Positions = new PlayersDetail_Positions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayersDetail_PositionsInfo$Type extends MessageType<PlayersDetail_PositionsInfo> {
    constructor() {
        super("ApiProtos.Players.PlayersDetail.PlayersDetail.PositionsInfo", [
            { no: 1, name: "position", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "locationX", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "locationXRate", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "locationY", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "locationYRate", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<PlayersDetail_PositionsInfo>): PlayersDetail_PositionsInfo {
        const message = { position: "", locationX: 0, locationXRate: 0, locationY: 0, locationYRate: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayersDetail_PositionsInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayersDetail_PositionsInfo): PlayersDetail_PositionsInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string position */ 1:
                    message.position = reader.string();
                    break;
                case /* int32 locationX */ 2:
                    message.locationX = reader.int32();
                    break;
                case /* float locationXRate */ 3:
                    message.locationXRate = reader.float();
                    break;
                case /* int32 locationY */ 4:
                    message.locationY = reader.int32();
                    break;
                case /* float locationYRate */ 5:
                    message.locationYRate = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayersDetail_PositionsInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string position = 1; */
        if (message.position !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.position);
        /* int32 locationX = 2; */
        if (message.locationX !== 0)
            writer.tag(2, WireType.Varint).int32(message.locationX);
        /* float locationXRate = 3; */
        if (message.locationXRate !== 0)
            writer.tag(3, WireType.Bit32).float(message.locationXRate);
        /* int32 locationY = 4; */
        if (message.locationY !== 0)
            writer.tag(4, WireType.Varint).int32(message.locationY);
        /* float locationYRate = 5; */
        if (message.locationYRate !== 0)
            writer.tag(5, WireType.Bit32).float(message.locationYRate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Players.PlayersDetail.PlayersDetail.PositionsInfo
 */
export const PlayersDetail_PositionsInfo = new PlayersDetail_PositionsInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayersDetail_Capability$Type extends MessageType<PlayersDetail_Capability> {
    constructor() {
        super("ApiProtos.Players.PlayersDetail.PlayersDetail.Capability", [
            { no: 1, name: "ability", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayersDetail_Ability },
            { no: 2, name: "characteristics", kind: "message", T: () => PlayersDetail_Characteristics },
            { no: 3, name: "positions", kind: "message", T: () => PlayersDetail_Positions }
        ]);
    }
    create(value?: PartialMessage<PlayersDetail_Capability>): PlayersDetail_Capability {
        const message = { ability: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayersDetail_Capability>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayersDetail_Capability): PlayersDetail_Capability {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ApiProtos.Players.PlayersDetail.PlayersDetail.Ability ability */ 1:
                    message.ability.push(PlayersDetail_Ability.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* ApiProtos.Players.PlayersDetail.PlayersDetail.Characteristics characteristics */ 2:
                    message.characteristics = PlayersDetail_Characteristics.internalBinaryRead(reader, reader.uint32(), options, message.characteristics);
                    break;
                case /* ApiProtos.Players.PlayersDetail.PlayersDetail.Positions positions */ 3:
                    message.positions = PlayersDetail_Positions.internalBinaryRead(reader, reader.uint32(), options, message.positions);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayersDetail_Capability, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ApiProtos.Players.PlayersDetail.PlayersDetail.Ability ability = 1; */
        for (let i = 0; i < message.ability.length; i++)
            PlayersDetail_Ability.internalBinaryWrite(message.ability[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ApiProtos.Players.PlayersDetail.PlayersDetail.Characteristics characteristics = 2; */
        if (message.characteristics)
            PlayersDetail_Characteristics.internalBinaryWrite(message.characteristics, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* ApiProtos.Players.PlayersDetail.PlayersDetail.Positions positions = 3; */
        if (message.positions)
            PlayersDetail_Positions.internalBinaryWrite(message.positions, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Players.PlayersDetail.PlayersDetail.Capability
 */
export const PlayersDetail_Capability = new PlayersDetail_Capability$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayersDetail_Matches$Type extends MessageType<PlayersDetail_Matches> {
    constructor() {
        super("ApiProtos.Players.PlayersDetail.PlayersDetail.Matches", [
            { no: 1, name: "pastMatches", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchesSchedule },
            { no: 2, name: "nextUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "totalPage", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayersDetail_Matches>): PlayersDetail_Matches {
        const message = { pastMatches: [], nextUrl: "", totalPage: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayersDetail_Matches>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayersDetail_Matches): PlayersDetail_Matches {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ApiProtos.Basic.MatchesData.MatchesSchedule pastMatches */ 1:
                    message.pastMatches.push(MatchesSchedule.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string nextUrl */ 2:
                    message.nextUrl = reader.string();
                    break;
                case /* int32 totalPage */ 3:
                    message.totalPage = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayersDetail_Matches, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ApiProtos.Basic.MatchesData.MatchesSchedule pastMatches = 1; */
        for (let i = 0; i < message.pastMatches.length; i++)
            MatchesSchedule.internalBinaryWrite(message.pastMatches[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string nextUrl = 2; */
        if (message.nextUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nextUrl);
        /* int32 totalPage = 3; */
        if (message.totalPage !== 0)
            writer.tag(3, WireType.Varint).int32(message.totalPage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Players.PlayersDetail.PlayersDetail.Matches
 */
export const PlayersDetail_Matches = new PlayersDetail_Matches$Type();
