// @generated by protobuf-ts 2.5.0
// @generated from protobuf file "protobuf/protos/api/news/NewsBanner.proto" (package "ApiProtos.News.NewsBanner", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ApiProtos.News.NewsBanner.NewsBanner
 */
export interface NewsBanner {
    /**
     * @generated from protobuf field: repeated ApiProtos.News.NewsBanner.NewsBanner.NewsData payload = 1;
     */
    payload: NewsBanner_NewsData[]; // 新聞首頁banner列表 api payload(陣列)
}
/**
 * @generated from protobuf message ApiProtos.News.NewsBanner.NewsBanner.NewsData
 */
export interface NewsBanner_NewsData {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number; // 新聞ID
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string; // 新聞標題
    /**
     * @generated from protobuf field: string time = 3;
     */
    time: string; // 發布時間
    /**
     * @generated from protobuf field: string imgSrc = 4;
     */
    imgSrc: string; // 新聞圖片
}
// @generated message type with reflection information, may provide speed optimized methods
class NewsBanner$Type extends MessageType<NewsBanner> {
    constructor() {
        super("ApiProtos.News.NewsBanner.NewsBanner", [
            { no: 1, name: "payload", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => NewsBanner_NewsData }
        ]);
    }
    create(value?: PartialMessage<NewsBanner>): NewsBanner {
        const message = { payload: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NewsBanner>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NewsBanner): NewsBanner {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ApiProtos.News.NewsBanner.NewsBanner.NewsData payload */ 1:
                    message.payload.push(NewsBanner_NewsData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NewsBanner, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ApiProtos.News.NewsBanner.NewsBanner.NewsData payload = 1; */
        for (let i = 0; i < message.payload.length; i++)
            NewsBanner_NewsData.internalBinaryWrite(message.payload[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.News.NewsBanner.NewsBanner
 */
export const NewsBanner = new NewsBanner$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NewsBanner_NewsData$Type extends MessageType<NewsBanner_NewsData> {
    constructor() {
        super("ApiProtos.News.NewsBanner.NewsBanner.NewsData", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "imgSrc", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<NewsBanner_NewsData>): NewsBanner_NewsData {
        const message = { id: 0, title: "", time: "", imgSrc: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NewsBanner_NewsData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NewsBanner_NewsData): NewsBanner_NewsData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string time */ 3:
                    message.time = reader.string();
                    break;
                case /* string imgSrc */ 4:
                    message.imgSrc = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NewsBanner_NewsData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string time = 3; */
        if (message.time !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.time);
        /* string imgSrc = 4; */
        if (message.imgSrc !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.imgSrc);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.News.NewsBanner.NewsBanner.NewsData
 */
export const NewsBanner_NewsData = new NewsBanner_NewsData$Type();
