// @generated by protobuf-ts 2.5.0
// @generated from protobuf file "protobuf/protos/api/tg/TGMatchBetInfo.proto" (package "ApiProtos.Tg.TGMatchBetInfo", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ApiProtos.Tg.TGMatchBetInfo.TGMatchBetInfo
 */
export interface TGMatchBetInfo {
    /**
     * @generated from protobuf field: repeated ApiProtos.Tg.TGMatchBetInfo.TGMatchBetInfo.BetInfo payload = 1;
     */
    payload: TGMatchBetInfo_BetInfo[]; // 各選項下注資訊 api payload(陣列)
}
/**
 * @generated from protobuf message ApiProtos.Tg.TGMatchBetInfo.TGMatchBetInfo.BetInfo
 */
export interface TGMatchBetInfo_BetInfo {
    /**
     * @generated from protobuf field: string transaction = 1;
     */
    transaction: string; // 可交易量
    /**
     * @generated from protobuf field: string profit = 2;
     */
    profit: string; // 獲利率
    /**
     * @generated from protobuf field: string betMoney = 3;
     */
    betMoney: string; // 累計金額
    /**
     * @generated from protobuf field: int32 isPopular = 4;
     */
    isPopular: number; // 是否熱銷 0否 1是
    /**
     * @generated from protobuf field: int32 isSoldOut = 5;
     */
    isSoldOut: number; // 是否售完 0否 1是
    /**
     * @generated from protobuf field: string selectionName = 6;
     */
    selectionName: string; // 0-0 0-1 0-2 0-3 1-0 1-1 1-2 1-3 2-0 2-1 2-2 2-3 3-0 3-1 3-2 3-3 homeFourOrMore awayFourOrMore 選項名稱
}
// @generated message type with reflection information, may provide speed optimized methods
class TGMatchBetInfo$Type extends MessageType<TGMatchBetInfo> {
    constructor() {
        super("ApiProtos.Tg.TGMatchBetInfo.TGMatchBetInfo", [
            { no: 1, name: "payload", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TGMatchBetInfo_BetInfo }
        ]);
    }
    create(value?: PartialMessage<TGMatchBetInfo>): TGMatchBetInfo {
        const message = { payload: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TGMatchBetInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TGMatchBetInfo): TGMatchBetInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ApiProtos.Tg.TGMatchBetInfo.TGMatchBetInfo.BetInfo payload */ 1:
                    message.payload.push(TGMatchBetInfo_BetInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TGMatchBetInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ApiProtos.Tg.TGMatchBetInfo.TGMatchBetInfo.BetInfo payload = 1; */
        for (let i = 0; i < message.payload.length; i++)
            TGMatchBetInfo_BetInfo.internalBinaryWrite(message.payload[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Tg.TGMatchBetInfo.TGMatchBetInfo
 */
export const TGMatchBetInfo = new TGMatchBetInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TGMatchBetInfo_BetInfo$Type extends MessageType<TGMatchBetInfo_BetInfo> {
    constructor() {
        super("ApiProtos.Tg.TGMatchBetInfo.TGMatchBetInfo.BetInfo", [
            { no: 1, name: "transaction", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "profit", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "betMoney", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "isPopular", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "isSoldOut", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "selectionName", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TGMatchBetInfo_BetInfo>): TGMatchBetInfo_BetInfo {
        const message = { transaction: "", profit: "", betMoney: "", isPopular: 0, isSoldOut: 0, selectionName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TGMatchBetInfo_BetInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TGMatchBetInfo_BetInfo): TGMatchBetInfo_BetInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string transaction */ 1:
                    message.transaction = reader.string();
                    break;
                case /* string profit */ 2:
                    message.profit = reader.string();
                    break;
                case /* string betMoney */ 3:
                    message.betMoney = reader.string();
                    break;
                case /* int32 isPopular */ 4:
                    message.isPopular = reader.int32();
                    break;
                case /* int32 isSoldOut */ 5:
                    message.isSoldOut = reader.int32();
                    break;
                case /* string selectionName */ 6:
                    message.selectionName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TGMatchBetInfo_BetInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string transaction = 1; */
        if (message.transaction !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.transaction);
        /* string profit = 2; */
        if (message.profit !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.profit);
        /* string betMoney = 3; */
        if (message.betMoney !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.betMoney);
        /* int32 isPopular = 4; */
        if (message.isPopular !== 0)
            writer.tag(4, WireType.Varint).int32(message.isPopular);
        /* int32 isSoldOut = 5; */
        if (message.isSoldOut !== 0)
            writer.tag(5, WireType.Varint).int32(message.isSoldOut);
        /* string selectionName = 6; */
        if (message.selectionName !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.selectionName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.Tg.TGMatchBetInfo.TGMatchBetInfo.BetInfo
 */
export const TGMatchBetInfo_BetInfo = new TGMatchBetInfo_BetInfo$Type();
