// @generated by protobuf-ts 2.5.0
// @generated from protobuf file "protobuf/protos/api/chat_room/InfoSoccer.proto" (package "ApiProtos.ChatRoom.chat", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * /room/info/soccer
 *
 * @generated from protobuf message ApiProtos.ChatRoom.chat.RoomInfoSoccerLive
 */
export interface RoomInfoSoccerLive {
    /**
     * @generated from protobuf field: int32 matchId = 1;
     */
    matchId: number; // 比賽ID
    /**
     * @generated from protobuf field: string roomId = 2;
     */
    roomId: string; // 聊天室ID
    /**
     * @generated from protobuf field: int32 roomType = 3;
     */
    roomType: number; // 1:比賽直播
    /**
     * @generated from protobuf field: ApiProtos.ChatRoom.chat.RoomStatusList roomStatus = 4;
     */
    roomStatus: RoomStatusList; // 聊天室狀態
}
/**
 * @generated from protobuf enum ApiProtos.ChatRoom.chat.RoomStatusList
 */
export enum RoomStatusList {
    /**
     * 未尚開始
     *
     * @generated from protobuf enum value: None = 0;
     */
    None = 0,
    /**
     * 開放中
     *
     * @generated from protobuf enum value: Start = 1;
     */
    Start = 1,
    /**
     * 已結束
     *
     * @generated from protobuf enum value: Close = 8;
     */
    Close = 8
}
// @generated message type with reflection information, may provide speed optimized methods
class RoomInfoSoccerLive$Type extends MessageType<RoomInfoSoccerLive> {
    constructor() {
        super("ApiProtos.ChatRoom.chat.RoomInfoSoccerLive", [
            { no: 1, name: "matchId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "roomId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "roomType", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "roomStatus", kind: "enum", T: () => ["ApiProtos.ChatRoom.chat.RoomStatusList", RoomStatusList] }
        ]);
    }
    create(value?: PartialMessage<RoomInfoSoccerLive>): RoomInfoSoccerLive {
        const message = { matchId: 0, roomId: "", roomType: 0, roomStatus: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomInfoSoccerLive>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomInfoSoccerLive): RoomInfoSoccerLive {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 matchId */ 1:
                    message.matchId = reader.int32();
                    break;
                case /* string roomId */ 2:
                    message.roomId = reader.string();
                    break;
                case /* int32 roomType */ 3:
                    message.roomType = reader.int32();
                    break;
                case /* ApiProtos.ChatRoom.chat.RoomStatusList roomStatus */ 4:
                    message.roomStatus = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomInfoSoccerLive, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 matchId = 1; */
        if (message.matchId !== 0)
            writer.tag(1, WireType.Varint).int32(message.matchId);
        /* string roomId = 2; */
        if (message.roomId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.roomId);
        /* int32 roomType = 3; */
        if (message.roomType !== 0)
            writer.tag(3, WireType.Varint).int32(message.roomType);
        /* ApiProtos.ChatRoom.chat.RoomStatusList roomStatus = 4; */
        if (message.roomStatus !== 0)
            writer.tag(4, WireType.Varint).int32(message.roomStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ApiProtos.ChatRoom.chat.RoomInfoSoccerLive
 */
export const RoomInfoSoccerLive = new RoomInfoSoccerLive$Type();
